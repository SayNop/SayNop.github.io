import{_ as t,r as e,o,c,a as n,b as s,d as l,e as a}from"./app-1dff8a18.js";const i="/assets/imgs/019/01.png",u="/assets/imgs/019/02.png",r="/assets/imgs/019/03.png",k="/assets/imgs/019/04.png",d="/assets/imgs/019/05.png",v={},m=a('<p><strong>如有不当可联系本人删除！</strong></p><p>本文以x乎的请求为例，发现加密字段在请求头中。下面分析请求头中的加密字段96</p><p><img src="'+i+'" alt="请求头"></p><h2 id="加密函数的定位" tabindex="-1"><a class="header-anchor" href="#加密函数的定位" aria-hidden="true">#</a> 加密函数的定位</h2><ul><li><p>复制携带加密参数的请求路径。在 <em>Source</em> 中下XHR断点，然后右键清除缓存并刷新页面</p></li><li><p>在调用堆栈中回溯，可查看到加密参数生成过程。<code>tT</code>中包含了加密参数。<code>tT</code>是通过函数<code>ed</code>生成的，因此<code>ed</code>为加密函数 (补充：t0，即<code>er</code>函数是取cookie中<code>d_c0</code>的值)</p><p><img src="'+u+`" alt="定位加密函数"></p></li><li><p>通过函数所在文件的第一行，发现该函数在webpack中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span>self<span class="token punctuation">.</span>webpackChunkheifetz <span class="token operator">=</span> self<span class="token punctuation">.</span>webpackChunkheifetz <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2636</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="webpack流程" tabindex="-1"><a class="header-anchor" href="#webpack流程" aria-hidden="true">#</a> webpack流程</h2><p>以下内容为webpack内函数的快速调用办法。如果涉及到复杂的环境检测，需要补环境或者依旧使用扣逻辑的方式去解密目标函数</p><h3 id="明确分发编号" tabindex="-1"><a class="header-anchor" href="#明确分发编号" aria-hidden="true">#</a> 明确分发编号</h3><ul><li>该js文件为webpack，所在编号为 <code>61763</code> 。编号可能是字符串或者此处的整数</li><li>若是非webpack文件，调用了webpack文件内的函数，需要手动明确编号</li><li>webpack文件特征，搜索<code>||[]).push([</code>，类似 <code>(window.webpackJsonp = window.webpackJsonp || []).push([</code>。如本js中的 <code>(self.webpackChunkheifetz = self.webpackChunkheifetz || []).push([[2636], {</code></li></ul><h3 id="分发器-加载器-定位" tabindex="-1"><a class="header-anchor" href="#分发器-加载器-定位" aria-hidden="true">#</a> 分发器(加载器)定位</h3><ul><li><p>特征，通常在 <em>runtime*.js</em> 内，多用一元运算符引导的自执行函数写法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \`!\`引导的自执行函数 参数数量不一定</span>
    <span class="token operator">...</span>
    <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span> <span class="token comment">// 特征，返回 export</span>
        <span class="token keyword">var</span> d <span class="token operator">=</span> f<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// 特征对象</span>
            <span class="token literal-property property">i</span><span class="token operator">:</span> a<span class="token punctuation">,</span>  <span class="token comment">// 字段1为索引</span>
            <span class="token literal-property property">l</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">// 字段2为!1</span>
            <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 字段3为exports</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 特征，返回*.call(*.exports, *, *.exports, 函数本身)</span>
        <span class="token keyword">return</span> e<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> d<span class="token punctuation">,</span> d<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span>  
        d<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>
        d<span class="token punctuation">.</span>exports
    <span class="token punctuation">}</span> <span class="token comment">// 此时函数c为加载器</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定位方法</p><ul><li><p>方法一：在目标函数加断点，例如本例中的<code>ed</code>函数。右键刷新后单步调试。发现执行到 <em>runtime.app.*.js</em> 。代码有分发器特征，确定了分发器位置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> e<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> f<span class="token punctuation">,</span> d<span class="token punctuation">,</span> b<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> o<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> u <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span> m<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">!==</span> a<span class="token punctuation">)</span>
            <span class="token keyword">return</span> a<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
        <span class="token keyword">var</span> c <span class="token operator">=</span> m<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">id</span><span class="token operator">:</span> e<span class="token punctuation">,</span>
            <span class="token literal-property property">loaded</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> u<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span>
        c<span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>
        c<span class="token punctuation">.</span>exports
    <span class="token punctuation">}</span>
    p<span class="token punctuation">.</span>m <span class="token operator">=</span> u<span class="token punctuation">,</span>
    p<span class="token punctuation">.</span>c <span class="token operator">=</span> m<span class="token punctuation">,</span>
    p<span class="token punctuation">.</span><span class="token function-variable function">amdD</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;define cannot be used indirect&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">,</span>
    <span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方法二：找到目标函数所在编号函数的声明处，在首行添加断点。由于三个参数固定为<code>__unused_webpack_module, exports, __webpack_require__</code> ，第三个参数为该编号函数内代码的依赖，由分发器生成，因此第三个参数的位置就是分发器所在位置</p><p><img src="`+r+'" alt="定位分发器位置"></p></li></ul></li></ul><h3 id="处理加密函数" tabindex="-1"><a class="header-anchor" href="#处理加密函数" aria-hidden="true">#</a> 处理加密函数</h3><ul><li><p>方法1: 将分发器与目标函数全局化。使js文件可以webpack内目标函数的依赖构建与调用</p><ul><li><p>分发器全局化。方便初始化目标函数所需的依赖</p><ul><li><p>将分发器的整个自执行函数代码扣出来，在分发器内的函数前，添加 <code>window.wp_require=分发器函数名</code> 使分发器可被外部调用（取消代码格式化防止内部含有格式化检测）</p><p><img src="'+k+`" alt="分发器全局化1"></p></li><li><p>如果上述方法失败可以模仿编号函数，使用webpack执行全局化代码。查看编号函数处的webpack代码，类似 <code>(window.webpackJsonp = window.webpackJsonp || []).push([</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span>self<span class="token punctuation">.</span>webpackChunkheifetz <span class="token operator">=</span> self<span class="token punctuation">.</span>webpackChunkheifetz <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2636</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token number">54616</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tt<span class="token punctuation">,</span> te<span class="token punctuation">,</span> tr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
        tr<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>te<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token function-variable function">Z</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> ec
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">...</span>
        <span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在分发器中也使用该方式执行我们需要执行的代码，即分发器全局化代码（取消代码格式化防止内部含有格式化检测）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span>self<span class="token punctuation">.</span>webpackChunkheifetz <span class="token operator">=</span> self<span class="token punctuation">.</span>webpackChunkheifetz <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token comment">// 参考项目内的webpack代码</span>
    <span class="token punctuation">[</span><span class="token number">123456789</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 随意传一个整形数组</span>
    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 不自定义编号函数，传空</span>
    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 此处传递分发器</span>
    window<span class="token punctuation">.</span>wp_require<span class="token operator">=</span>e  <span class="token comment">// 分发器全局化代码</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt="分发器全局化2"></p></li></ul></li><li><p>目标函数全局化。使我们可直接在最外层调用目标函数。在目标函数定义完成后，新增行 <code>window.target_fn=目标函数名;</code> 使其全局化</p></li><li><p>调用目标函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 构建目标函数的依赖</span>
<span class="token function">wp_require</span><span class="token punctuation">(</span><span class="token number">61763</span><span class="token punctuation">)</span>  <span class="token comment">// 将目标函数所在的编号传入分发器，即第一步的明确编号</span>
<span class="token function">target_fn</span><span class="token punctuation">(</span>xxx<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment">// 传入对应参数调用目标函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>方法2: 目标编号块与分发器组合</p><ul><li><p>确认分发器的参数。查看分发器所在的自执行函数是否包含参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 自执行没有传入参数</span>
<span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 自执行函数有1个参数</span>
<span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">o<span class="token punctuation">,</span> pls</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 自执行函数有2个参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将分发器代码扣出后，将目标代码段作为分发器自执行函数的参数传入或内部赋值进去。注意分发器的返回值，调用call的对象就是需要构造成 <code>{编号: 代码块}</code> 的对象</p><ul><li>没有参数的情况<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> e<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> f<span class="token punctuation">,</span> b<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> o<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> u <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.通过分发器的返回值明确需要构造的变量</span>
    u <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token number">61763</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tt<span class="token punctuation">,</span> te<span class="token punctuation">,</span> tr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
            tr<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>te<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token function-variable function">DH</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> tq
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token operator">...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span> m<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">!==</span> a<span class="token punctuation">)</span>
            <span class="token keyword">return</span> a<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
        <span class="token keyword">var</span> c <span class="token operator">=</span> m<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">id</span><span class="token operator">:</span> e<span class="token punctuation">,</span>
            <span class="token literal-property property">loaded</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> u<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 1.u为需要构造的对象</span>
        c<span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>
        c<span class="token punctuation">.</span>exports
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>一个参数<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
    <span class="token operator">...</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> h<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
        <span class="token keyword">var</span> u <span class="token operator">=</span> h<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">i</span><span class="token operator">:</span> n<span class="token punctuation">,</span>
            <span class="token literal-property property">l</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 1.c为需要构造的对象，且c是自执行函数的参数</span>
        <span class="token keyword">return</span> c<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> u<span class="token punctuation">,</span> u<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">,</span>
        u<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>
        u<span class="token punctuation">.</span>exports
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span>  <span class="token comment">// 此行之前是分发器的全部原始代码。</span>
    <span class="token comment">// 2.将编码和代码块构造成对象 传入</span>
    <span class="token punctuation">{</span>
        <span class="token number">61763</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tt<span class="token punctuation">,</span> te<span class="token punctuation">,</span> tr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
            tr<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>te<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token function-variable function">DH</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> tq
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token operator">...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>两个参数<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">o<span class="token punctuation">,</span> p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">function</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
        <span class="token keyword">var</span> d <span class="token operator">=</span> n<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">i</span><span class="token operator">:</span> e<span class="token punctuation">,</span>
            <span class="token literal-property property">l</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> o<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> d<span class="token punctuation">,</span> d<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span>
        d<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>
        d<span class="token punctuation">.</span>exports
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token number">61763</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tt<span class="token punctuation">,</span> te<span class="token punctuation">,</span> tr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
        tr<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>te<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token function-variable function">DH</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> tq
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>将分发器全局化并将加密函数的参数与返回值绑定到window中，同时将自执行函数套一个函数壳改为普通的调用执行函数，并返回绑定在window中的结果。这样我们在调用时在window中绑定传入参数，加密函数才正常读取到我们传入的参数，并返回我们需要的结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">var</span> llll<span class="token punctuation">;</span>  <span class="token comment">// 分发器全局化变量</span>

<span class="token comment">// 可直接在外边套一个函数保证其不会自执行。函数返回结果</span>
<span class="token keyword">function</span> <span class="token function">ppp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
        <span class="token operator">...</span>
        <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> h<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
            <span class="token keyword">var</span> u <span class="token operator">=</span> h<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">i</span><span class="token operator">:</span> n<span class="token punctuation">,</span>
                <span class="token literal-property property">l</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> c<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> u<span class="token punctuation">,</span> u<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">,</span>
            u<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>
            u<span class="token punctuation">.</span>exports
        <span class="token punctuation">}</span>
        <span class="token operator">...</span>

        llll <span class="token operator">=</span> f<span class="token punctuation">;</span>  <span class="token comment">// 将分发器全局化</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span> 
        <span class="token punctuation">{</span>
            <span class="token number">61763</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tt<span class="token punctuation">,</span> te<span class="token punctuation">,</span> tr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
                <span class="token operator">...</span>
                <span class="token keyword">function</span> <span class="token function">ed</span><span class="token punctuation">(</span><span class="token parameter">tt<span class="token punctuation">,</span> te<span class="token punctuation">,</span> tr<span class="token punctuation">,</span> ti</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                    <span class="token comment">// 传入参数改从window中获取                          </span>
                    tt <span class="token operator">=</span> window<span class="token punctuation">.</span>tt
                    te <span class="token operator">=</span> window<span class="token punctuation">.</span>te
                    tr <span class="token operator">=</span> window<span class="token punctuation">.</span>tr
                    ti <span class="token operator">=</span> window<span class="token punctuation">.</span>ti

                    <span class="token keyword">var</span> ta <span class="token operator">=</span> tr<span class="token punctuation">.</span>zse93
                    <span class="token punctuation">,</span> tu <span class="token operator">=</span> tr<span class="token punctuation">.</span>dc0
                    <span class="token punctuation">,</span> tc <span class="token operator">=</span> tr<span class="token punctuation">.</span>xZst81
                    <span class="token punctuation">,</span> tf <span class="token operator">=</span> <span class="token function">t3</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span>
                    <span class="token punctuation">,</span> td <span class="token operator">=</span> <span class="token function">t6</span><span class="token punctuation">(</span>te<span class="token punctuation">)</span>
                    <span class="token punctuation">,</span> tp <span class="token operator">=</span> <span class="token punctuation">[</span>ta<span class="token punctuation">,</span> tf<span class="token punctuation">,</span> tu<span class="token punctuation">,</span> <span class="token function">t8</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> td<span class="token punctuation">,</span> tc<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">// 运行结果全局化</span>
                    result <span class="token operator">=</span> <span class="token punctuation">{</span>
                        <span class="token literal-property property">source</span><span class="token operator">:</span> tp<span class="token punctuation">,</span>
                        <span class="token literal-property property">signature</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>
                        <span class="token function">tJ</span><span class="token punctuation">(</span>ti<span class="token punctuation">)</span><span class="token punctuation">.</span>encrypt<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">ty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                    window<span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>

                    <span class="token keyword">return</span> result
                <span class="token punctuation">}</span>
                <span class="token operator">...</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    llll<span class="token punctuation">[</span><span class="token number">61763</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 加载依赖</span>
    <span class="token keyword">return</span> window<span class="token punctuation">.</span>result  <span class="token comment">// 返回绑定在window上的结果</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>生成目标结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>tt <span class="token operator">=</span> <span class="token number">1</span>
window<span class="token punctuation">.</span>te <span class="token operator">=</span> <span class="token number">2</span>
window<span class="token punctuation">.</span>tr <span class="token operator">=</span> <span class="token number">3</span>
window<span class="token punctuation">.</span>ti <span class="token operator">=</span> <span class="token number">4</span>
res <span class="token operator">=</span> <span class="token function">ppp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 调用套壳函数，内部会自执行分发器，加载依赖，并返回结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="解密" tabindex="-1"><a class="header-anchor" href="#解密" aria-hidden="true">#</a> 解密</h2>`,14),b={href:"https://github.com/cilame/v_jstools",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,"使用webpack的流程将目标函数扣出",-1),f=a(`<p> </p><p><strong>补充说明：</strong> 如果传入参数固定，每次生成内容不一致的，可能是加密过程中使用了随机数或者时间戳。可在重载对应方法（在加密函数调用前重载即可），看看生成内容是否不变。明确后在浏览器console中，也重载对应方法后调用，查看生成结果是否与解密一致</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">,</span><span class="token function-variable function">random</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0.5</span><span class="token punctuation">}</span>  <span class="token comment">// 重载随机数方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3);function y(h,g){const p=e("ExternalLinkIcon");return o(),c("div",null,[m,n("ul",null,[n("li",null,[s("一般会进行环境检测，需要补环境， 推荐使用 "),n("a",b,[s("v_jstools"),l(p)])]),w]),f])}const _=t(v,[["render",y],["__file","019.html.vue"]]);export{_ as default};
