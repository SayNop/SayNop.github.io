import{_ as e,r as o,o as c,c as l,a as n,b as a,d as t,e as s}from"./app-da04b297.js";const i={},u=s('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><blockquote><p>消息摘要（Message Digest）是数字签名算法的核心，常用于验证数据完整性，包含MD，SHA，MAC三大种类</p><p>java中的<code>equals</code>方法在比较对象时，实际上比较的是两个对象的散列值<code>hashCode()</code>是否相同</p><p>任何消息经过散列函数处理后，都会得到唯一的散列值。这一过程称为“消息摘要”，其散列值称为“数字指纹”，自然其算法就是“消息摘要算法”</p><p>通过散列函数可获得对应的散列值，但不可通过该散列值反推其原始信息。这是消息摘要算法安全性的根本所在</p></blockquote><h2 id="md5加密" tabindex="-1"><a class="header-anchor" href="#md5加密" aria-hidden="true">#</a> MD5加密</h2><blockquote><p>MD5算法是典型的消息摘要算法，是计算机广泛使用的杂凑算法之一（又译摘要算法、散列算法）</p></blockquote><p>补充：杂凑（Hash）算法的输出被称作杂凑值（hash value），输出长度与算法有关，与原文长度无关</p><p>MD5算法会输出128位的二进制摘要信息，转换为16进制得到32位字符串</p>',6),k=n("p",null,"实现流程",-1),r=s(`<li><p>目标字符串以字符为单位转换成字符编码（ascii码/unicode码等），将字符编码转换为二进制码</p></li><li><p>明文末尾补1个1和n个0，使其对512取余为448</p></li><li><p>二进制码进行分组转换。即每以512位二进制码一组，最后一组数据位数448（保留64位）</p></li><li><p>保留64位处表明原文长度信息，记录原文的位长。以使最后一组也保持512位</p></li><li><p>将每个512分组再分出16个32位子分组</p></li><li><p>初始化幻数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A: 01 23 45 67 （16进制）
B: 89 ab cd ef （16进制）
C: fe dc ba 98 （16进制）
D: 76 54 32 10 （16进制）

A: 0x67452301
B: 0xefcdab89
C: 0x98badcfe
D: 0x10325476

A: 1732584193
B: 4023233417
C: 2562383102
D: 271733878
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,6),d=n("p",null,"32位分组与幻数组合进行4轮（FF，GG，HH，II），每轮16次，共64次的位运算",-1),m=s(`<li><p>位运算涉及常量：<strong>位移S</strong>与<strong>正弦函数表（sine table）</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 向左位移数</span>
<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>
    <span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token number">15</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// unsigned int(abs(sin(i+1))*(2pow32))</span>
<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> k<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">0xd76aa478</span><span class="token punctuation">,</span> <span class="token number">0xe8c7b756</span><span class="token punctuation">,</span> <span class="token number">0x242070db</span><span class="token punctuation">,</span> <span class="token number">0xc1bdceee</span><span class="token punctuation">,</span> <span class="token number">0xf57c0faf</span><span class="token punctuation">,</span> <span class="token number">0x4787c62a</span><span class="token punctuation">,</span> <span class="token number">0xa8304613</span><span class="token punctuation">,</span> <span class="token number">0xfd469501</span><span class="token punctuation">,</span>
    <span class="token number">0x698098d8</span><span class="token punctuation">,</span> <span class="token number">0x8b44f7af</span><span class="token punctuation">,</span> <span class="token number">0xffff5bb1</span><span class="token punctuation">,</span> <span class="token number">0x895cd7be</span><span class="token punctuation">,</span> <span class="token number">0x6b901122</span><span class="token punctuation">,</span> <span class="token number">0xfd987193</span><span class="token punctuation">,</span> <span class="token number">0xa679438e</span><span class="token punctuation">,</span> <span class="token number">0x49b40821</span><span class="token punctuation">,</span>
    <span class="token number">0xf61e2562</span><span class="token punctuation">,</span> <span class="token number">0xc040b340</span><span class="token punctuation">,</span> <span class="token number">0x265e5a51</span><span class="token punctuation">,</span> <span class="token number">0xe9b6c7aa</span><span class="token punctuation">,</span> <span class="token number">0xd62f105d</span><span class="token punctuation">,</span> <span class="token number">0x02441453</span><span class="token punctuation">,</span> <span class="token number">0xd8a1e681</span><span class="token punctuation">,</span> <span class="token number">0xe7d3fbc8</span><span class="token punctuation">,</span>
    <span class="token number">0x21e1cde6</span><span class="token punctuation">,</span> <span class="token number">0xc33707d6</span><span class="token punctuation">,</span> <span class="token number">0xf4d50d87</span><span class="token punctuation">,</span> <span class="token number">0x455a14ed</span><span class="token punctuation">,</span> <span class="token number">0xa9e3e905</span><span class="token punctuation">,</span> <span class="token number">0xfcefa3f8</span><span class="token punctuation">,</span> <span class="token number">0x676f02d9</span><span class="token punctuation">,</span> <span class="token number">0x8d2a4c8a</span><span class="token punctuation">,</span>
    <span class="token number">0xfffa3942</span><span class="token punctuation">,</span> <span class="token number">0x8771f681</span><span class="token punctuation">,</span> <span class="token number">0x6d9d6122</span><span class="token punctuation">,</span> <span class="token number">0xfde5380c</span><span class="token punctuation">,</span> <span class="token number">0xa4beea44</span><span class="token punctuation">,</span> <span class="token number">0x4bdecfa9</span><span class="token punctuation">,</span> <span class="token number">0xf6bb4b60</span><span class="token punctuation">,</span> <span class="token number">0xbebfbc70</span><span class="token punctuation">,</span>
    <span class="token number">0x289b7ec6</span><span class="token punctuation">,</span> <span class="token number">0xeaa127fa</span><span class="token punctuation">,</span> <span class="token number">0xd4ef3085</span><span class="token punctuation">,</span> <span class="token number">0x04881d05</span><span class="token punctuation">,</span> <span class="token number">0xd9d4d039</span><span class="token punctuation">,</span> <span class="token number">0xe6db99e5</span><span class="token punctuation">,</span> <span class="token number">0x1fa27cf8</span><span class="token punctuation">,</span> <span class="token number">0xc4ac5665</span><span class="token punctuation">,</span>
    <span class="token number">0xf4292244</span><span class="token punctuation">,</span> <span class="token number">0x432aff97</span><span class="token punctuation">,</span> <span class="token number">0xab9423a7</span><span class="token punctuation">,</span> <span class="token number">0xfc93a039</span><span class="token punctuation">,</span> <span class="token number">0x655b59c3</span><span class="token punctuation">,</span> <span class="token number">0x8f0ccc92</span><span class="token punctuation">,</span> <span class="token number">0xffeff47d</span><span class="token punctuation">,</span> <span class="token number">0x85845dd1</span><span class="token punctuation">,</span>
    <span class="token number">0x6fa87e4f</span><span class="token punctuation">,</span> <span class="token number">0xfe2ce6e0</span><span class="token punctuation">,</span> <span class="token number">0xa3014314</span><span class="token punctuation">,</span> <span class="token number">0x4e0811a1</span><span class="token punctuation">,</span> <span class="token number">0xf7537e82</span><span class="token punctuation">,</span> <span class="token number">0xbd3af235</span><span class="token punctuation">,</span> <span class="token number">0x2ad7d2bb</span><span class="token punctuation">,</span> <span class="token number">0xeb86d391</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* [
        3614090360, 3905402710, 606105819, 3250441966, 4118548399,1200080426, 2821735955, 4249261313,
        1770035416, 2336552879, 4294925233, 2304563134, 1804603682, 4254626195, 2792965006, 1236535329,
        4129170786, 3225465664, 643717713, 3921069994, 3593408605, 38016083, 3634488961, 3889429448,
        568446438, 3275163606, 4107603335, 1163531501, 2850285829, 4243563512, 1735328473, 2368359562,
        4294588738, 2272392833, 1839030562, 4259657740, 2763975236, 1272893353, 4139469664, 3200236656,
        681279174, 3936430074, 3572445317, 76029189, 3654602809, 3873151461, 530742520, 3299628645,
        4096336452, 1126891415, 2878612391, 4237533241, 1700485571, 2399980690, 4293915773, 2240044497,
        1873313359, 4264355552, 2734768916, 1309151649, 4149444226, 3174756917, 718787259, 3951481745
] */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),v={href:"https://www.cnblogs.com/xiaxveliang/p/15004954.html",target:"_blank",rel:"noopener noreferrer"},b=s(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// FF,GG,HH和II调用F,G,H,I函数进行进一步变换</span>
<span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">FF</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> <span class="token keyword">long</span> c<span class="token punctuation">,</span> <span class="token keyword">long</span> d<span class="token punctuation">,</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> s<span class="token punctuation">,</span> <span class="token keyword">long</span> ac<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">+=</span> <span class="token class-name">F</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> x <span class="token operator">+</span> ac<span class="token punctuation">;</span>
    <span class="token comment">// 循环左移s位</span>
    <span class="token comment">//这里long型数据右移时使用无符号右移运算符&gt;&gt;&gt;</span>
    a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> a <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> a <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a <span class="token operator">+=</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),f=s(`<li><p>计算过程中幻数ABCD也会改变。运算后每个512分组得到4个数值A、B、C、D，与拿到的A、B、C、D求和，作为下一组的幻数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 一组中的第一轮运算FF为例</span>
<span class="token comment">// 参数[4]: 明文数据块  参数[5]: 位移  参数[6]: 正弦函数表</span>
<span class="token comment">// 返回值 - 新的A、B、C、D</span>
a <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token constant">M0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span>xd76aa478L<span class="token punctuation">)</span><span class="token punctuation">;</span>
d <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token constant">M1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span>xe8c7b756L<span class="token punctuation">)</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token constant">M2</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span>x242070dbL<span class="token punctuation">)</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token constant">M3</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span>xc1bdceeeL<span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token constant">M4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span>xf57c0fafL<span class="token punctuation">)</span><span class="token punctuation">;</span>
d <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token constant">M5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span>x4787c62aL<span class="token punctuation">)</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token constant">M6</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span>xa8304613L<span class="token punctuation">)</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token constant">M7</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span>xfd469501L<span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token constant">M8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span>x698098d8L<span class="token punctuation">)</span><span class="token punctuation">;</span> 
d <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token constant">M9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span>x8b44f7afL<span class="token punctuation">)</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token constant">M10</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span>xffff5bb1L<span class="token punctuation">)</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token constant">M11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span>x895cd7beL<span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token constant">M12</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span>x6b901122L<span class="token punctuation">)</span><span class="token punctuation">;</span>
d <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token constant">M13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span>xfd987193L<span class="token punctuation">)</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token constant">M14</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span>xa679438eL<span class="token punctuation">)</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token function">FF</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token constant">M15</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span>x49b40821L<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// a、b、c、d 为每一512bit分组的运算结果； </span>
<span class="token comment">// A、B、C、D 是下一组计算的输入参数；</span>
<span class="token comment">// 若无下一个512bit分组 A、B、C、D 则为最终计算结果；</span>
<span class="token class-name">A</span> <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token class-name">A</span><span class="token punctuation">;</span>  
<span class="token class-name">B</span> <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token class-name">B</span><span class="token punctuation">;</span> 
<span class="token class-name">C</span> <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token class-name">C</span><span class="token punctuation">;</span> 
<span class="token class-name">D</span> <span class="token operator">=</span> d <span class="token operator">+</span> <span class="token class-name">D</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>字符串拼接最后一个512分组计算出的ABCD得到MD5结果</p></li>`,2),x=s(`<li><p>例子：目标字符串 <code>A</code></p><ul><li><p><code>A</code> 的ascii码为<code>65</code>，ascii码的二进制码<code>01000001</code>。因此只有一个512分组</p></li><li><p>填充 0 位，直到总长度达到 448 位。<code>01000001 10000000 00000000 ... (共 439 个 0)</code></p></li><li><p>补充长度信息。原文共一个字符，8位，保留64位为<code>00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000</code></p></li><li><p>将其分为16个32位分组</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>01000001 10000000 00000000 00000000
... 14个全0分组 ...
00000000 00000000 00000000 00001000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>与幻数进行4*16次位运算得到计算后的ABCD</p></li><li><p>将计算后的A <code>7fc56270</code> B <code>e7a70fa8</code> C <code>1a5935b7</code> D <code>2eacbe29</code> 拼接得到结果<code>7fc56270e7a70fa81a5935b72eacbe29</code></p></li></ul></li>`,1),g=n("p",null,"代码",-1),y=s(`<li><p>Java API</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MD5</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> getMD5 <span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化</span>
        <span class="token class-name">MessageDigest</span> messageDigest <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取md5算法</span>
            messageDigest <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;MD5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            messageDigest<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 传入明文</span>
            messageDigest<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 执行摘要</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuffer</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> byteArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// toHexString: 无符号生疏参数所表示的值转16进制</span>
            <span class="token comment">// 取低8位后转16进制</span>
            <span class="token class-name">String</span> hex <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">0xFF</span> <span class="token operator">&amp;</span> byteArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hex<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 返回16位则切9-25</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回正常的32位 </span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Python实现。代码出自GPT：使用python编写md5算法的实现流程</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> math
<span class="token keyword">import</span> struct


<span class="token comment"># 左旋转函数</span>
<span class="token keyword">def</span> <span class="token function">left_rotate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>
    x <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span>  <span class="token comment"># 确保 x 是 32 位</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> amount<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>

<span class="token comment"># MD5 主算法类</span>
<span class="token keyword">class</span> <span class="token class-name">MD5</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 初始化常量</span>
        self<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span>  <span class="token comment"># 轮 1</span>
            <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span>   <span class="token comment"># 轮 2</span>
            <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span>  <span class="token comment"># 轮 3</span>
            <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span>   <span class="token comment"># 轮 4</span>
        <span class="token punctuation">]</span>
    
        <span class="token comment"># 常数 T(i) - 正弦表</span>
        self<span class="token punctuation">.</span>K <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    
        <span class="token comment"># 初始化缓冲区</span>
        self<span class="token punctuation">.</span>A <span class="token operator">=</span> <span class="token number">0x67452301</span>
        self<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token number">0xEFCDAB89</span>
        self<span class="token punctuation">.</span>C <span class="token operator">=</span> <span class="token number">0x98BADCFE</span>
        self<span class="token punctuation">.</span>D <span class="token operator">=</span> <span class="token number">0x10325476</span>

    <span class="token keyword">def</span> <span class="token function">process_block</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 把 512 位块拆成 16 个 32 位的小块</span>
        M <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">&#39;&lt;16I&#39;</span><span class="token punctuation">,</span> block<span class="token punctuation">)</span>
    
        A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> D <span class="token operator">=</span> self<span class="token punctuation">.</span>A<span class="token punctuation">,</span> self<span class="token punctuation">.</span>B<span class="token punctuation">,</span> self<span class="token punctuation">.</span>C<span class="token punctuation">,</span> self<span class="token punctuation">.</span>D
    
        <span class="token comment"># 主循环</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">:</span>
                F <span class="token operator">=</span> <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> C<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">~</span>B <span class="token operator">&amp;</span> D<span class="token punctuation">)</span>
                g <span class="token operator">=</span> i
            <span class="token keyword">elif</span> <span class="token number">16</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token number">31</span><span class="token punctuation">:</span>
                F <span class="token operator">=</span> <span class="token punctuation">(</span>D <span class="token operator">&amp;</span> B<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">~</span>D <span class="token operator">&amp;</span> C<span class="token punctuation">)</span>
                g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span>
            <span class="token keyword">elif</span> <span class="token number">32</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token number">47</span><span class="token punctuation">:</span>
                F <span class="token operator">=</span> B <span class="token operator">^</span> C <span class="token operator">^</span> D
                g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span>
            <span class="token keyword">elif</span> <span class="token number">48</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token number">63</span><span class="token punctuation">:</span>
                F <span class="token operator">=</span> C <span class="token operator">^</span> <span class="token punctuation">(</span>B <span class="token operator">|</span> <span class="token operator">~</span>D<span class="token punctuation">)</span>
                g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span>
        
            F <span class="token operator">=</span> <span class="token punctuation">(</span>F <span class="token operator">+</span> A <span class="token operator">+</span> self<span class="token punctuation">.</span>K<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> M<span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>
            A <span class="token operator">=</span> D
            D <span class="token operator">=</span> C
            C <span class="token operator">=</span> B
            B <span class="token operator">=</span> <span class="token punctuation">(</span>B <span class="token operator">+</span> left_rotate<span class="token punctuation">(</span>F<span class="token punctuation">,</span> self<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">//</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>
    
        <span class="token comment"># 更新缓冲区</span>
        self<span class="token punctuation">.</span>A <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>A <span class="token operator">+</span> A<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>
        self<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>B <span class="token operator">+</span> B<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>
        self<span class="token punctuation">.</span>C <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>C <span class="token operator">+</span> C<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>
        self<span class="token punctuation">.</span>D <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>D <span class="token operator">+</span> D<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>

    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 预处理步骤：填充消息</span>
        original_length_in_bits <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFFFFFFFFF</span>
        message <span class="token operator">+=</span> <span class="token string">b&#39;\\x80&#39;</span>
        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">64</span> <span class="token operator">!=</span> <span class="token number">56</span><span class="token punctuation">:</span>
            message <span class="token operator">+=</span> <span class="token string">b&#39;\\x00&#39;</span>
        
        <span class="token comment"># 添加消息长度 - 小端长整数 - Q: unsigned long long</span>
        message <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&#39;&lt;Q&#39;</span><span class="token punctuation">,</span> original_length_in_bits<span class="token punctuation">)</span>
        
        <span class="token comment"># 处理每个 512 位块</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>process_block<span class="token punctuation">(</span>message<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">digest</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 输出最终的 128 位摘要 - 小端 unsigned int</span>
        <span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&#39;&lt;4I&#39;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>A<span class="token punctuation">,</span> self<span class="token punctuation">.</span>B<span class="token punctuation">,</span> self<span class="token punctuation">.</span>C<span class="token punctuation">,</span> self<span class="token punctuation">.</span>D<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">hexdigest</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 将摘要转换为十六进制字符串</span>
        <span class="token comment"># 02表示大端补0填充到2位，x表示16进制 - b二进制，o八进制，d十进制</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span> <span class="token keyword">for</span> x <span class="token keyword">in</span> self<span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 测试 MD5 算法</span>
<span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>
    md5_obj <span class="token operator">=</span> MD5<span class="token punctuation">(</span><span class="token punctuation">)</span>
    md5_obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token keyword">return</span> md5_obj<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 示例</span>
message <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;MD5(\\&quot;hello world\\&quot;) = </span><span class="token interpolation"><span class="token punctuation">{</span>md5<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),F={href:"https://baike.baidu.com/item/MD5/212708#6-1",target:"_blank",rel:"noopener noreferrer"},w=s(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
#define shift(x, n) (((x) &lt;&lt; (n)) | ((x) &gt;&gt; (32-(n))))//右移的时候，高位一定要补零，而不是补充符号位
#define F(x, y, z) (((x) &amp; (y)) | ((~x) &amp; (z)))    
#define G(x, y, z) (((x) &amp; (z)) | ((y) &amp; (~z)))
#define H(x, y, z) ((x) ^ (y) ^ (z))
#define I(x, y, z) ((y) ^ ((x) | (~z)))
#define A 0x67452301
#define B 0xefcdab89
#define C 0x98badcfe
#define D 0x10325476
//strBaye的长度
unsigned int strlength;
//A,B,C,D的临时变量
unsigned int atemp;
unsigned int btemp;
unsigned int ctemp;
unsigned int dtemp;
//常量ti unsigned int(abs(sin(i+1))*(2pow32))
const unsigned int k[]={
    0xd76aa478,0xe8c7b756,0x242070db,0xc1bdceee,
    0xf57c0faf,0x4787c62a,0xa8304613,0xfd469501,0x698098d8,
    0x8b44f7af,0xffff5bb1,0x895cd7be,0x6b901122,0xfd987193,
    0xa679438e,0x49b40821,0xf61e2562,0xc040b340,0x265e5a51,
    0xe9b6c7aa,0xd62f105d,0x02441453,0xd8a1e681,0xe7d3fbc8,
    0x21e1cde6,0xc33707d6,0xf4d50d87,0x455a14ed,0xa9e3e905,
    0xfcefa3f8,0x676f02d9,0x8d2a4c8a,0xfffa3942,0x8771f681,
    0x6d9d6122,0xfde5380c,0xa4beea44,0x4bdecfa9,0xf6bb4b60,
    0xbebfbc70,0x289b7ec6,0xeaa127fa,0xd4ef3085,0x04881d05,
    0xd9d4d039,0xe6db99e5,0x1fa27cf8,0xc4ac5665,0xf4292244,
    0x432aff97,0xab9423a7,0xfc93a039,0x655b59c3,0x8f0ccc92,
    0xffeff47d,0x85845dd1,0x6fa87e4f,0xfe2ce6e0,0xa3014314,
    0x4e0811a1,0xf7537e82,0xbd3af235,0x2ad7d2bb,0xeb86d391};
//向左位移数
const unsigned int s[]={7,12,17,22,7,12,17,22,7,12,17,22,7,
    12,17,22,5,9,14,20,5,9,14,20,5,9,14,20,5,9,14,20,
    4,11,16,23,4,11,16,23,4,11,16,23,4,11,16,23,6,10,
    15,21,6,10,15,21,6,10,15,21,6,10,15,21};
const char str16[]=&quot;0123456789abcdef&quot;;
void mainLoop(unsigned int M[]) {
    unsigned int f,g;
    unsigned int a=atemp;
    unsigned int b=btemp;
    unsigned int c=ctemp;
    unsigned int d=dtemp;
    for (unsigned int i = 0; i &lt; 64; i++) {
        if(i&lt;16){
            // 第一轮
            f=F(b,c,d); // BCD的位运算
            g=i;  // 明文数据块下标
        } else if (i&lt;32) {
            f=G(b,c,d);
            g=(5*i+1)%16;
        } else if(i&lt;48) {
            f=H(b,c,d);
            g=(3*i+5)%16;
        } else {
            f=I(b,c,d);
            g=(7*i)%16;
        }
        unsigned int tmp=d;
        d=c;
        c=b;
        b=b+shift((a+f+k[i]+M[g]),s[i]);  // 求和并位移，再与B求和
        a=tmp;
    }
    atemp=a+atemp;
    btemp=b+btemp;
    ctemp=c+ctemp;
    dtemp=d+dtemp;
}
/*
*填充函数
*处理后应满足bits≡448(mod512),字节就是bytes≡56（mode64)
*填充方式为先加一个1,其它位补零
*最后加上64位的原来长度
*/
unsigned int* add(string str) {
    unsigned int num=((str.length()+8)/64)+1;  // 以512位,64个字节为一组
    unsigned int *strByte=new unsigned int[num*16];  // 64/4=16,所以有16个整数
    strlength=num*16;
    for (unsigned int i = 0; i &lt; num*16; i++)
        strByte[i]=0;
    for (unsigned int i=0; i &lt;str.length(); i++) {
        strByte[i&gt;&gt;2]|=(str[i])&lt;&lt;((i%4)*8);  // 一个整数存储四个字节，i&gt;&gt;2表示i/4 一个unsigned int对应4个字节，保存4个字符信息
    }
    strByte[str.length()&gt;&gt;2]|=0x80&lt;&lt;(((str.length()%4))*8);  // 尾部添加1 一个unsigned int保存4个字符信息,所以用128左移
    /*
    *添加原长度，长度指位的长度，所以要乘8，然后是小端序，所以放在倒数第二个,这里长度只用了32位
    */
    strByte[num*16-2] = str.length()*8;
    return strByte;
}

string changeHex(int a) {
    int b;
    string str1;
    string str=&quot;&quot;;
    for (int i = 0; i &lt; 4; i++) {
        str1=&quot;&quot;;
        b = ((a&gt;&gt;i*8)%(1&lt;&lt;8))&amp;0xff;  //逆序处理每个字节
        for (int j = 0; j &lt; 2; j++) {
            str1.insert(0,1,str16[b%16]);
            b = b / 16;
        }
        str += str1;
    }
    return str;
}

string getMD5(string source) {
    atemp=A;  //初始化
    btemp=B;
    ctemp=C;
    dtemp=D;
    unsigned int *strByte=add(source);
    for(unsigned int i = 0; i &lt; strlength/16; i++) {
        unsigned int num[16];
        for(unsigned int j=0;j&lt;16;j++)
            num[j] = strByte[i*16+j];
        mainLoop(num);
    }
    return changeHex(atemp).append(changeHex(btemp)).append(changeHex(ctemp)).append(changeHex(dtemp));
}

unsigned int main() {
    string ss;
    // cin&gt;&gt;ss;
    string s=getMD5(&quot;abc&quot;);
    cout&lt;&lt;s;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),h=n("li",null,[n("p",null,"加盐：原文保持不变的情况下，md5得到的值也会不变，这是撞库的原理。通过加盐方式防止撞库，比如原文后拼接特定字符串")],-1),_=n("h2",{id:"sha加密",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sha加密","aria-hidden":"true"},"#"),a(" SHA加密")],-1),H=n("blockquote",null,[n("p",null,"SHA算法（Secure Hash Algorithm，安全散列算法）基于MD4算法基础。与MD算法不同之处主要在于摘要长度，SHA算法的摘要长度更长，安全性更高"),n("p",null,"SHA算法家族目前共有SHA-1、SHA-224、SHA-256、SHA-384和SHA-512五种算法。通常将后四种算法并称为SHA-2算法")],-1),A=s(`<li><p>实现流程</p><ul><li><p>目标字符串以字符为单位转换成字符编码（ascii码/unicode码等），将字符编码转换为二进制码</p></li><li><p>明文末尾补1个1和n个0，使其对512取余为448</p></li><li><p>二进制码进行分组转换。即每以512位二进制码一组，最后一组数据位数448（保留64位）</p></li><li><p>保留64位处表明原文长度信息，记录原文的位长。以使最后一组也保持512位</p></li><li><p>将每个512分组再分出16个32位子分组</p></li><li><p>将16个32位子分组扩展到80个32位子分组</p><ul><li><p>对于前 16 个子块（0 ≤ t ≤15），直接将 W[t] 赋值为 M[t]</p></li><li><p>从第 17 个子块开始（16 ≤ t ≤ 79），使用以下公式进行扩展： W[t]=(W[t−3]⊕W[t−8]⊕W[t−14]⊕W[t−16])≪1</p></li></ul></li><li><p>初始化幻数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">uint32_t</span> H0 <span class="token operator">=</span> <span class="token number">0x67452301</span><span class="token punctuation">;</span>   <span class="token comment">// 0x01, 0x23, 0x45, 0x67</span>
<span class="token class-name">uint32_t</span> H1 <span class="token operator">=</span> <span class="token number">0xEFCDAB89</span><span class="token punctuation">;</span>   <span class="token comment">// 0x89, 0xAB, 0xCD, 0xEF</span>
<span class="token class-name">uint32_t</span> H2 <span class="token operator">=</span> <span class="token number">0x98BADCFE</span><span class="token punctuation">;</span>   <span class="token comment">// 0xFE, 0xDC, 0xBA, 0x98</span>
<span class="token class-name">uint32_t</span> H3 <span class="token operator">=</span> <span class="token number">0x10325476</span><span class="token punctuation">;</span>   <span class="token comment">// 0x76, 0x54, 0x32, 0x10</span>
<span class="token class-name">uint32_t</span> H4 <span class="token operator">=</span> <span class="token number">0xC3D2E1F0</span><span class="token punctuation">;</span>   <span class="token comment">// 0xF0, 0xE1, 0xD2, 0xC3</span>

<span class="token comment">/* 前4个数字与MD5幻数一致
A: 1732584193
B: 4023233417
C: 2562383102
D: 271733878
E: 3285377520
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>进行4轮，每轮20次，共80次运算。每轮运算时使用不同的值求和</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* SHA1 Constants */</span>
<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> K<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">0x5A827999</span><span class="token punctuation">,</span>     <span class="token comment">/* [0,  19] */</span>
    <span class="token number">0x6ED9EBA1</span><span class="token punctuation">,</span>     <span class="token comment">/* [20, 39] */</span>
    <span class="token number">0x8F1BBCDC</span><span class="token punctuation">,</span>     <span class="token comment">/* [40, 59] */</span>
    <span class="token number">0xCA62C1D6</span>      <span class="token comment">/* [60, 79] */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/*
1518500249
1859775393
2400959708
3395469782
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>计算过程中幻数ABCDE也会改变。运算后每个512分组得到幻数，与该分组计算前传入的幻数求和，作为下一分组的传入幻数</p></li><li><p>字符串拼接最后一个512分组计算出的ABCDE得到SHA1结果</p></li></ul></li><li><p>例子：目标字符串<code>abc</code></p><ul><li><p>字符串<code>abc</code>ascii码的二进制码<code>01100001 01100010 01100011</code></p></li><li><p>补位以便进行分组<code>01100001 01100010 01100011 100...0</code>共计423个0（423个0 + 1个1 + 原文3*8 = 448），16进制如下所示 (512位二进制 -&gt; 128位16进制)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>61626380 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>附加长度信息：原文长度：3*8 = 24位二进制，24的16进制为18</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>61626380 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000018
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>先分出32个子分组，再通过公示扩展成80个子分组</p></li><li><p>进行位运算得到最终幻数H0 = H0+A、H1=H1+B、H2=H2+C、H3=H3+D、H4=H4+E</p></li><li><p>拼接最后一个分组得到的ABCDE即为最终结果</p></li></ul></li>`,2),D=n("p",null,"代码",-1),B=s(`<li><p>JAVA API</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">MessageDigest</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SHA</span> <span class="token punctuation">{</span>
    <span class="token comment">// SHA-1 : 160位二进制 - 40位16进制字符串（每4位二进制得到一个16进制字符）</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encodeSHA1</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">MessageDigest</span> md <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;SHA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// SHA-256 : 256位二进制 - 64位16进制字符串</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encodeSHA256</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">MessageDigest</span> md <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;SHA-256&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// SHA-384 : 384位二进制 - 96位16进制字符串</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encodeSHA384</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">MessageDigest</span> md <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;SHA-384&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// SHA-512 : 512位二进制 - 128位16进制字符串</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encodeSHA512</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">MessageDigest</span> md <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;SHA-512&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Python实现。代码出自GPT：使用python编写sha1算法的实现流程</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> struct

<span class="token comment"># 定义循环左移函数</span>
<span class="token keyword">def</span> <span class="token function">left_rotate</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>

<span class="token comment"># SHA-1 主算法类</span>
<span class="token keyword">class</span> <span class="token class-name">SHA1</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 初始化五个缓冲区变量（五个32位寄存器）</span>
        self<span class="token punctuation">.</span>h0 <span class="token operator">=</span> <span class="token number">0x67452301</span>
        self<span class="token punctuation">.</span>h1 <span class="token operator">=</span> <span class="token number">0xEFCDAB89</span>
        self<span class="token punctuation">.</span>h2 <span class="token operator">=</span> <span class="token number">0x98BADCFE</span>
        self<span class="token punctuation">.</span>h3 <span class="token operator">=</span> <span class="token number">0x10325476</span>
        self<span class="token punctuation">.</span>h4 <span class="token operator">=</span> <span class="token number">0xC3D2E1F0</span> 

    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 预处理：填充消息</span>
        original_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span>  <span class="token comment"># 以位为单位 - 一字节8位</span>
        message <span class="token operator">+=</span> <span class="token string">b&#39;\\x80&#39;</span>  <span class="token comment"># 先添加 1 位，后跟随 0 位填充</span>
    
        <span class="token comment"># 填充0直到消息长度模512等于448位（即最后64位用来存储长度）</span>
        <span class="token comment"># while (len(message) * 8 + 64) % 512 != 0:  # 化简后为 56 = 448 / 8</span>
        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">64</span> <span class="token operator">!=</span> <span class="token number">56</span><span class="token punctuation">:</span>
            message <span class="token operator">+=</span> <span class="token string">b&#39;\\x00&#39;</span>  <span class="token comment"># 补充全0字节</span>
    
        <span class="token comment"># 以大端格式附加消息的原始长度</span>
        message <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&#39;&gt;Q&#39;</span><span class="token punctuation">,</span> original_length<span class="token punctuation">)</span>
    
        <span class="token comment"># 按 512 位（64 字节）块处理消息</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>process_block<span class="token punctuation">(</span>message<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">process_block</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 将 512 位块分成 16 个 32 位的字</span>
        w <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">&#39;&gt;16I&#39;</span><span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 长度16的数组</span>
    
        <span class="token comment"># 扩展到 80 个 32 位字</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 补充index 16 - 79</span>
            w<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left_rotate<span class="token punctuation">(</span>w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">^</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment"># 初始化五个变量</span>
        a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e <span class="token operator">=</span> self<span class="token punctuation">.</span>h0<span class="token punctuation">,</span> self<span class="token punctuation">.</span>h1<span class="token punctuation">,</span> self<span class="token punctuation">.</span>h2<span class="token punctuation">,</span> self<span class="token punctuation">.</span>h3<span class="token punctuation">,</span> self<span class="token punctuation">.</span>h4

        <span class="token comment"># 主循环</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token number">19</span><span class="token punctuation">:</span>
                f <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">~</span>b <span class="token operator">&amp;</span> d<span class="token punctuation">)</span>
                k <span class="token operator">=</span> <span class="token number">0x5A827999</span>
            <span class="token keyword">elif</span> <span class="token number">20</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token number">39</span><span class="token punctuation">:</span>
                f <span class="token operator">=</span> b <span class="token operator">^</span> c <span class="token operator">^</span> d
                k <span class="token operator">=</span> <span class="token number">0x6ED9EBA1</span>
            <span class="token keyword">elif</span> <span class="token number">40</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token number">59</span><span class="token punctuation">:</span>
                f <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> d<span class="token punctuation">)</span>
                k <span class="token operator">=</span> <span class="token number">0x8F1BBCDC</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                f <span class="token operator">=</span> b <span class="token operator">^</span> c <span class="token operator">^</span> d
                k <span class="token operator">=</span> <span class="token number">0xCA62C1D6</span>

            temp <span class="token operator">=</span> <span class="token punctuation">(</span>left_rotate<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> f <span class="token operator">+</span> e <span class="token operator">+</span> k <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>
            e <span class="token operator">=</span> d
            d <span class="token operator">=</span> c
            c <span class="token operator">=</span> left_rotate<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
            b <span class="token operator">=</span> a
            a <span class="token operator">=</span> temp

        <span class="token comment"># 更新缓冲区</span>
        self<span class="token punctuation">.</span>h0 <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>h0 <span class="token operator">+</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>
        self<span class="token punctuation">.</span>h1 <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>h1 <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>
        self<span class="token punctuation">.</span>h2 <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>h2 <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>
        self<span class="token punctuation">.</span>h3 <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>h3 <span class="token operator">+</span> d<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>
        self<span class="token punctuation">.</span>h4 <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>h4 <span class="token operator">+</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>

    <span class="token keyword">def</span> <span class="token function">digest</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 拼接返回 160 位哈希值 - 指定&#39;&gt;5I&#39;拼接</span>
        <span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&#39;&gt;5I&#39;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>h0<span class="token punctuation">,</span> self<span class="token punctuation">.</span>h1<span class="token punctuation">,</span> self<span class="token punctuation">.</span>h2<span class="token punctuation">,</span> self<span class="token punctuation">.</span>h3<span class="token punctuation">,</span> self<span class="token punctuation">.</span>h4<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">hexdigest</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 将哈希值转换为十六进制字符串</span>
        <span class="token comment"># 指定&#39;&gt;5I&#39;解包后</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token format-spec">08x</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span> <span class="token keyword">for</span> x <span class="token keyword">in</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">&#39;&gt;5I&#39;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># 等效为&#39;&#39;.join(f&#39;{x:08x}&#39; for x in [h0, h1, h2, h3, h4])</span>

<span class="token comment"># 测试 SHA-1 算法</span>
<span class="token keyword">def</span> <span class="token function">sha1</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sha1_obj <span class="token operator">=</span> SHA1<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sha1_obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token keyword">return</span> sha1_obj<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 示例</span>
    message <span class="token operator">=</span> <span class="token string">b&quot;hello world&quot;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;SHA-1(\\&quot;hello world\\&quot;) = </span><span class="token interpolation"><span class="token punctuation">{</span>sha1<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),C={href:"https://www.cnblogs.com/Kingfans/p/16561821.html",target:"_blank",rel:"noopener noreferrer"},S=s(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASH_BLOCK_SIZE</span>         <span class="token expression"><span class="token number">64</span>  </span><span class="token comment">/* 512 bits = 64 bytes */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASH_LEN_SIZE</span>           <span class="token expression"><span class="token number">8</span>   </span><span class="token comment">/* 64 bits =  8 bytes */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASH_LEN_OFFSET</span>         <span class="token expression"><span class="token number">56</span>  </span><span class="token comment">/* 64 bytes - 8 bytes */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASH_DIGEST_SIZE</span>        <span class="token expression"><span class="token number">16</span>  </span><span class="token comment">/* 128 bits = 16 bytes */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASH_ROUND_NUM</span>          <span class="token expression"><span class="token number">80</span> </span></span>

<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span>       <span class="token class-name">uint8_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span>  <span class="token class-name">uint16_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>        <span class="token class-name">uint32_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span>  <span class="token class-name">uint64_t</span><span class="token punctuation">;</span>

<span class="token comment">/* Swap bytes in 32 bit value. 0x01234567 -&gt; 0x67452301 */</span>
<span class="token comment">// 大端小端互转</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__bswap_32</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff000000</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span>  </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00ff0000</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span>  <span class="token number">8</span><span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0000ff00</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span>  <span class="token number">8</span><span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x000000ff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token comment">/* SHA1 Constants */</span>
<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> K<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">0x5A827999</span><span class="token punctuation">,</span>     <span class="token comment">/* [0,  19] */</span>
    <span class="token number">0x6ED9EBA1</span><span class="token punctuation">,</span>     <span class="token comment">/* [20, 39] */</span>
    <span class="token number">0x8F1BBCDC</span><span class="token punctuation">,</span>     <span class="token comment">/* [40, 59] */</span>
    <span class="token number">0xCA62C1D6</span>      <span class="token comment">/* [60, 79] */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/*                  f(X, Y, Z)                      */</span>
<span class="token comment">/* [0,  19] */</span>
<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> <span class="token function">Ch</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> X<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> Y<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> Z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>X <span class="token operator">&amp;</span> Y<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>X<span class="token punctuation">)</span> <span class="token operator">&amp;</span> Z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* [20, 39] */</span>  <span class="token comment">/* [60, 79] */</span>
<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> <span class="token function">Parity</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> X<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> Y<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> Z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> X <span class="token operator">^</span> Y <span class="token operator">^</span> Z<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* [40, 59] */</span>
<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> <span class="token function">Maj</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> X<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> Y<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> Z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>X <span class="token operator">&amp;</span> Y<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>X <span class="token operator">&amp;</span> Z<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>Y <span class="token operator">&amp;</span> Z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 循环向左移动offset个比特位 */</span>
<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> <span class="token function">MoveLeft</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> X<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>X <span class="token operator">&lt;&lt;</span> offset<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>X <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ASSERT_RETURN_INT</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> d<span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span>

<span class="token keyword">int</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>out<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> in<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> inlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ASSERT_RETURN_INT</span><span class="token punctuation">(</span>out <span class="token operator">&amp;&amp;</span> in <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>inlen <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// step 1: 字节填充(Append Padding Bytes)</span>
    <span class="token comment">// 数据先补上1个1比特，再补上k个0比特，使得补位后的数据比特数(n+1+k)满足(n+1+k) mod 512 = 448，k取最小正整数</span>
    <span class="token keyword">int</span> iX <span class="token operator">=</span> inlen <span class="token operator">/</span> HASH_BLOCK_SIZE<span class="token punctuation">;</span>
    <span class="token keyword">int</span> iY <span class="token operator">=</span> inlen <span class="token operator">%</span> HASH_BLOCK_SIZE<span class="token punctuation">;</span>
    iX <span class="token operator">=</span> <span class="token punctuation">(</span>iY <span class="token operator">&lt;</span> HASH_LEN_OFFSET<span class="token punctuation">)</span> <span class="token operator">?</span> iX <span class="token operator">:</span> <span class="token punctuation">(</span>iX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> iLen <span class="token operator">=</span> <span class="token punctuation">(</span>iX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> HASH_BLOCK_SIZE<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> X <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>iLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> in<span class="token punctuation">,</span> inlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 先补上1个1比特+7个0比特</span>
    X<span class="token punctuation">[</span>inlen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>
    <span class="token comment">// 再补上(k-7)个0比特</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> inlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>iX <span class="token operator">*</span> HASH_BLOCK_SIZE <span class="token operator">+</span> HASH_LEN_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        X<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// step 2: 追加长度信息(Append Length)</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>pLen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>X <span class="token operator">+</span> <span class="token punctuation">(</span>iX <span class="token operator">*</span> HASH_BLOCK_SIZE <span class="token operator">+</span> HASH_LEN_OFFSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> iTempLen <span class="token operator">=</span> inlen <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>pTempLen <span class="token operator">=</span> <span class="token operator">&amp;</span>iTempLen<span class="token punctuation">;</span>
    pLen<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> pTempLen<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> pLen<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pTempLen<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> pLen<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> pTempLen<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  pLen<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> pTempLen<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    pLen<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> pTempLen<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> pLen<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> pTempLen<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> pLen<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> pTempLen<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  pLen<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> pTempLen<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// Step 3. 初始化MD Buffer(Initialize MD Buffer)</span>
    <span class="token class-name">uint32_t</span> H0 <span class="token operator">=</span> <span class="token number">0x67452301</span><span class="token punctuation">;</span>   <span class="token comment">// 0x01, 0x23, 0x45, 0x67</span>
    <span class="token class-name">uint32_t</span> H1 <span class="token operator">=</span> <span class="token number">0xEFCDAB89</span><span class="token punctuation">;</span>   <span class="token comment">// 0x89, 0xAB, 0xCD, 0xEF</span>
    <span class="token class-name">uint32_t</span> H2 <span class="token operator">=</span> <span class="token number">0x98BADCFE</span><span class="token punctuation">;</span>   <span class="token comment">// 0xFE, 0xDC, 0xBA, 0x98</span>
    <span class="token class-name">uint32_t</span> H3 <span class="token operator">=</span> <span class="token number">0x10325476</span><span class="token punctuation">;</span>   <span class="token comment">// 0x76, 0x54, 0x32, 0x10</span>
    <span class="token class-name">uint32_t</span> H4 <span class="token operator">=</span> <span class="token number">0xC3D2E1F0</span><span class="token punctuation">;</span>   <span class="token comment">// 0xF0, 0xE1, 0xD2, 0xC3</span>

    <span class="token class-name">uint32_t</span> M<span class="token punctuation">[</span>HASH_BLOCK_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> W<span class="token punctuation">[</span>HASH_ROUND_NUM<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// step 4: 处理消息块(Process Message in 64-Byte Blocks)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> iLen <span class="token operator">/</span> HASH_BLOCK_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* Copy block i into X. */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> HASH_BLOCK_SIZE<span class="token punctuation">;</span> j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">uint64_t</span> k <span class="token operator">=</span> i <span class="token operator">*</span> HASH_BLOCK_SIZE <span class="token operator">+</span> j<span class="token punctuation">;</span>
            M<span class="token punctuation">[</span>j <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>X<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>X<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>X<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> X<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/*  a. Divide M(i) into 16 words W(0), W(1), ..., W(15), where W(0) is the left - most word. */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            W<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> M<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/*  b. For t = 16 to 79 let
        W(t) = S^1(W(t-3) XOR W(t-8) XOR W(t-14) XOR W(t-16)). */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span> t <span class="token operator">&lt;=</span> <span class="token number">79</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            W<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">MoveLeft</span><span class="token punctuation">(</span>W<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> W<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> W<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">^</span> W<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/*  c. Let A = H0, B = H1, C = H2, D = H3, E = H4. */</span>
        <span class="token class-name">uint32_t</span> A <span class="token operator">=</span> H0<span class="token punctuation">;</span>
        <span class="token class-name">uint32_t</span> B <span class="token operator">=</span> H1<span class="token punctuation">;</span>
        <span class="token class-name">uint32_t</span> C <span class="token operator">=</span> H2<span class="token punctuation">;</span>
        <span class="token class-name">uint32_t</span> D <span class="token operator">=</span> H3<span class="token punctuation">;</span>
        _t E <span class="token operator">=</span> H4<span class="token punctuation">;</span>

        <span class="token comment">/*  d. For t = 0 to 79 do
        TEMP = S^5(A) + f(t;B,C,D) + E + W(t) + K(t);
        E = D;  D = C;  C = S^30(B);  B = A; A = TEMP; */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;=</span> <span class="token number">19</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">uint32_t</span> temp <span class="token operator">=</span> <span class="token function">MoveLeft</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Ch</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> D<span class="token punctuation">)</span> <span class="token operator">+</span> E <span class="token operator">+</span> W<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> K<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            E <span class="token operator">=</span> D<span class="token punctuation">;</span>
            D <span class="token operator">=</span> C<span class="token punctuation">;</span>
            C <span class="token operator">=</span> <span class="token function">MoveLeft</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            B <span class="token operator">=</span> A<span class="token punctuation">;</span>
            A <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> t <span class="token operator">&lt;=</span> <span class="token number">39</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">uint32_t</span> temp <span class="token operator">=</span> <span class="token function">MoveLeft</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Parity</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> D<span class="token punctuation">)</span> <span class="token operator">+</span> E <span class="token operator">+</span> W<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> K<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            E <span class="token operator">=</span> D<span class="token punctuation">;</span>
            D <span class="token operator">=</span> C<span class="token punctuation">;</span>
            C <span class="token operator">=</span> <span class="token function">MoveLeft</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            B <span class="token operator">=</span> A<span class="token punctuation">;</span>
            A <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span> t <span class="token operator">&lt;=</span> <span class="token number">59</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">uint32_t</span> temp <span class="token operator">=</span> <span class="token function">MoveLeft</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Maj</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> D<span class="token punctuation">)</span> <span class="token operator">+</span> E <span class="token operator">+</span> W<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> K<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            E <span class="token operator">=</span> D<span class="token punctuation">;</span>
            D <span class="token operator">=</span> C<span class="token punctuation">;</span>
            C <span class="token operator">=</span> <span class="token function">MoveLeft</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            B <span class="token operator">=</span> A<span class="token punctuation">;</span>
            A <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span> t <span class="token operator">&lt;=</span> <span class="token number">79</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">uint32_t</span> temp <span class="token operator">=</span> <span class="token function">MoveLeft</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Parity</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> D<span class="token punctuation">)</span> <span class="token operator">+</span> E <span class="token operator">+</span> W<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> K<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            E <span class="token operator">=</span> D<span class="token punctuation">;</span>
            D <span class="token operator">=</span> C<span class="token punctuation">;</span>
            C <span class="token operator">=</span> <span class="token function">MoveLeft</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            B <span class="token operator">=</span> A<span class="token punctuation">;</span>
            A <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/*  e. Let H0 = H0 + A, H1 = H1 + B, H2 = H2 + C, H3 = H3 + D, H4 = H4 + E. */</span>
        H0 <span class="token operator">=</span> H0 <span class="token operator">+</span> A<span class="token punctuation">;</span>
        H1 <span class="token operator">=</span> H1 <span class="token operator">+</span> B<span class="token punctuation">;</span>
        H2 <span class="token operator">=</span> H2 <span class="token operator">+</span> C<span class="token punctuation">;</span>
        H3 <span class="token operator">=</span> H3 <span class="token operator">+</span> D<span class="token punctuation">;</span>
        H4 <span class="token operator">=</span> H4 <span class="token operator">+</span> E<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// step 5: 输出ABCD</span>
    <span class="token class-name">uint32_t</span><span class="token operator">*</span> pOut <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>out<span class="token punctuation">;</span>
    pOut<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__bswap_32</span><span class="token punctuation">(</span>H0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pOut<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__bswap_32</span><span class="token punctuation">(</span>H1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pOut<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__bswap_32</span><span class="token punctuation">(</span>H2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pOut<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__bswap_32</span><span class="token punctuation">(</span>H3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pOut<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__bswap_32</span><span class="token punctuation">(</span>H4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> digest<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">sha1</span><span class="token punctuation">(</span>digest<span class="token punctuation">,</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function E(M,L){const p=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[n("li",null,[k,n("ul",null,[r,n("li",null,[d,n("ul",null,[m,n("li",null,[n("p",null,[a("A + BCD进行位运算结果 + 明文块 + 正弦常量。得到的结果，循环左移指定常量位数。得到的结果 + B = 返回值。示例代码FF，参考文章"),n("a",v,[a("https://www.cnblogs.com/xiaxveliang/p/15004954.html"),t(p)])]),b])])]),f])]),x,n("li",null,[g,n("ul",null,[y,n("li",null,[n("p",null,[a("C++实现。代码参考 "),n("a",F,[a("百度百科MD5"),t(p)])]),w])])]),h]),_,H,n("ul",null,[A,n("li",null,[D,n("ul",null,[B,n("li",null,[n("p",null,[a("C实现 参考"),n("a",C,[a("https://www.cnblogs.com/Kingfans/p/16561821.html"),t(p)])]),S])])])])])}const j=e(i,[["render",E],["__file","014.html.vue"]]);export{j as default};
