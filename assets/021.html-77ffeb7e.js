import{_ as p,r as o,o as c,c as i,a as n,b as s,d as e,e as a}from"./app-101bb220.js";const l={},u=n("p",null,"AST，全称抽象语法树（Abstract syntax tree）",-1),r=n("p",null,[s("环境的安装 "),n("code",null,"npm install @babel/core")],-1),d=n("blockquote",null,[n("p",null,"在编译原理中，从源码到机器码的过程，中间还需要进过很多步骤。"),n("p",null,"比如，源码通过词法分析器变为记号序列，再通过语法分析器变为AST，再通过语义分析器，一步步往下编译，最后变成机器码")],-1),k=n("p",null,"可以简单理解为将 js 代码，按照规则，解析成一份json数据，通过此json，按照规则，可以还原出 js 代码。此时可以修改 json 中的结构，来解析出新的 js 代码",-1),v=n("h2",{id:"了解ast结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#了解ast结构","aria-hidden":"true"},"#"),s(" 了解AST结构")],-1),m={href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"},b=n("em",null,"javascript",-1),g=n("em",null,"@babel/parser",-1),y=a(`<p>下面是一些说明，路径中大写表示该节点的type值，本文会用 type 值来简称这些节点。根节点为 File 节点</p><ul><li><p>代码内容数组（每个语句都是body中的一项） <em>File -&gt; program -&gt; body</em></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 移除部分信息的结构树</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;File&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Program&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>变量声明</p><ul><li><p>变量声明语句（数组中 type 为 VariableDeclaration 的节点） <em>File -&gt; program -&gt; body[ VariableDeclaration ]</em></p></li><li><p>变量声明类型 <em>File -&gt; program -&gt; body[ VariableDeclaration ] -&gt; kind</em> ，常见取值如 <code>var</code>，<code>let</code>，<code>const</code></p></li><li><p>声明变量数组（声明多个变量 <code>var a,b</code> 的情况存在，因此为数组形式） <em>File -&gt; program -&gt; body[ VariableDeclaration ] -&gt; declarations</em></p></li><li><p>声明变量节点（数组中 type 为 VariableDeclarator 的节点） <em>File -&gt; program -&gt; body[ VariableDeclaration ] -&gt; declarations[ VariableDeclarator ]</em></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 移除部分信息的结构树</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;File&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;declarations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;kind&quot;</span><span class="token operator">:</span> <span class="token string">&quot;let&quot;</span>
        ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>变量标识符为标识符节点（标识符节点的 type 都为 Identifier，不论变量还是函数） <em>File -&gt; program -&gt; body[ VariableDeclaration ] -&gt; declarations[ VariableDeclarator ] -&gt; id</em></p></li><li><p>变量标识符名 <em>File -&gt; program -&gt; body[ VariableDeclaration ] -&gt; declarations[ VariableDeclarator ] -&gt; id -&gt; name</em> 即 Identifier.name</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;declarations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclarator&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span>
        ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>声明变量初始化赋值节点 声明变量节点 <em>VariableDeclaration -&gt; declarations[ VariableDeclarator ]</em> 存在属性 init。init的值为一个字面量节点（直接写死的值），仅在变量声明时做了初始化才存在 <code>init</code> 属性</p><ul><li><p>数字字面量：init的值为 NumericLiteral 节点，value 为赋值内容</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// b = 1</span>
<span class="token comment">// 省略部分内容</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclarator&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;init&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NumericLiteral&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>字符串字面量：init的值为 StringLiteral 节点，value 为赋值内容</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// let b = &#39;b&#39;</span>
<span class="token comment">// 省略部分内容</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;declarations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclarator&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;init&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;StringLiteral&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;kind&quot;</span><span class="token operator">:</span> <span class="token string">&quot;let&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>箭头函数: init的值为 ArrowFunctionExpression 节点, body 的值为 BlockStatement 节点（该节点在函数中详细说明）。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;declarations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclarator&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;init&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ArrowFunctionExpression&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;generator&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;async&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;BlockStatement&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;kind&quot;</span><span class="token operator">:</span> <span class="token string">&quot;let&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数组字面量：ArrayExpression 节点，elements 属性是一个赋值节点数组，用于存放初始化内容。</p><ul><li><p><code>a = []</code>，elements 为空数组</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// let b = []</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;declarations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclarator&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;init&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ArrayExpression&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;elements&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;kind&quot;</span><span class="token operator">:</span> <span class="token string">&quot;let&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>a=[1, &#39;a&#39;, function () {}, null, true]</code> elements 为 [ NumericLiteral 节点，StringLiteral 节点，FunctionExpression 节点，BooleanLiteral 节点， NullLiteral 节点 ]</p></li></ul></li></ul></li></ul></li><li><p>特殊的变量：对象</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 声明行</span>
  <span class="token property">&quot;declarations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclarator&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 声明项</span>
      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 声明项标识符</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;init&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 初始化</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ObjectExpression&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 对象表达式 {key : value}</span>
        <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ObjectProperty&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 对象属性</span>
            <span class="token comment">// ...</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token comment">// ...</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;kind&quot;</span><span class="token operator">:</span> <span class="token string">&quot;let&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>对象声明初始化的属性 <code>init</code> 声明变量节点 <em>VariableDeclaration -&gt; declarations[ VariableDeclarator ]</em> 存在属性 init，init节点的 type 为 ObjectExpression</p></li><li><p>初始化的属性设置数组。ObjectExpression 节点存在属性 <code>properties</code>数组（对象赋值时有多属性赋值情况，因此为数组形式） <em>File -&gt; program -&gt; body[ VariableDeclaration ] -&gt; declarations[ VariableDeclarator ] -&gt; id -&gt; init -&gt; prop</em></p></li><li><p>属性设置节点，即 properties 中的 type 为 ObjectProperty。</p><ul><li><p>对象的属性为数字，如 <code>a = {1:&#39;a&#39;}</code>。ObjectProperty.key 为数字字面量 NumericLiteral 节点，ObjectProperty.value 为字符串字面量节点</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ObjectProperty&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> &quot;NumericLiteral
    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;computed&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;shorthand&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;StringLiteral&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对象属性为字符串，如 <code>a = {b: 1}</code>。ObjectProperty.key 为标识符 Identifier 节点，ObjectProperty.key.name 为属性标识符 <code>&#39;b&#39;</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ObjectProperty&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;computed&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;shorthand&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NumericLiteral&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对象属性值为函数 <code>a = {c: funcion () {}}</code> ObjectProperty.value 为 FunctionExpression 节点</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ObjectProperty&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;c&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;computed&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;shorthand&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;FunctionExpression&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 函数节点，该节点属性见后续</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;generator&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">&quot;async&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;BlockStatement&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;directives&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>表达式</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// var e = 1+2 初始化时的表达式</span>
<span class="token comment">// VariableDeclarator.init 为 BinaryExpression 节点</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;BinaryExpression&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;left&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NumericLiteral&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;operator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;right&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NumericLiteral&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// var e; e = 1+2;  独立的表达式</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ExpressionStatement&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;expression&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;AssignmentExpression&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;operator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;left&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;e&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;right&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;BinaryExpression&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;left&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NumericLiteral&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;operator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;right&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NumericLiteral&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">2</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>逻辑运算 LogicalExpression ：<code>a &amp;&amp; b</code>, <code>x || y</code></p></li><li><p>三元表达式 ConditionalExpression ：<code>a ? b : c</code></p></li><li><p>二元运算 BinaryExpression <code>a + b</code>, <code>x * y</code></p></li><li><p>一元运算 UnaryExpression：<code>!x</code>, <code>typeof y</code>, <code>-z</code></p></li><li><p>自增/自减 UpdateExpression：<code>i++</code>, <code>--j</code></p></li><li><p>变量赋值（非变量声明初始化） AssignmentExpression ：<code>a = 1</code>, <code>b += 2</code></p></li><li><p>逗号表达式 SequenceExpression，SequenceExpression.expressions 数组用于存放逗号切分的多个内容</p></li><li><p>调用 CallExpression ：<code>foo(1, 2)</code></p></li><li><p>实例化：NewExpression <code>new Person()</code></p></li><li><p>箭头函数：ArrowFunctionExpression ：<code>() =&gt; 42</code></p></li><li><p>函数表达式：FunctionExpression ：<code>function() { return 1; }</code></p></li><li><p>成员访问：MemberExpression ：<code>obj.prop</code>, <code>arr[0]</code></p></li><li><p>模板字符串：TemplateLiteral：<code>hello \${name}</code></p></li></ul></li><li><p>函数表达式 FunctionExpression 节点内的重点内容</p><ul><li>函数名节点 FunctionExpression.id 为 标识符节点 Identifier，函数名 FunctionExpression.id.name，即 Identifier.name。匿名函数的 FunctionExpression.id 为 <code>null</code></li><li>函数参数数组 FunctionExpression.params，内部存放 标识符节点 Identifier。函数无传入参数时，FunctionExpression.params 为 []</li><li>函数体节点 FunctionExpression.body 为代码块节点 BlockStatement，FunctionExpression.body.body（BlockStatement.body）为函数内容数组，长度与函数体内容有关 <ul><li>返回值节点：ReturnStatement 节点，argument为返回内容，可以为字面量节点或表达式节点等</li></ul></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// function c(a,b){return 1}</span>
<span class="token comment">// 移除部分信息的结构树</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;FunctionDeclaration&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;c&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;generator&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;async&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;BlockStatement&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ReturnStatement&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;argument&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NumericLiteral&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;extra&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;rawValue&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token property">&quot;raw&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;directives&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="babel-api-简介" tabindex="-1"><a class="header-anchor" href="#babel-api-简介" aria-hidden="true">#</a> babel api 简介</h2><h3 id="常用代码结构" tabindex="-1"><a class="header-anchor" href="#常用代码结构" aria-hidden="true">#</a> 常用代码结构</h3><p>常用的编写流程如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 导包 需要环境@babel/core</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/parser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将源码解析成 ast</span>
<span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/traverse&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>  <span class="token comment">// 遍历ast</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/types&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断节点类型，构建新节点</span>
<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/generator&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>  <span class="token comment">// 将ast解析成js</span>

<span class="token comment">// 2. 读取目标文件，解析为 ast</span>
<span class="token keyword">const</span> jscode <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./target.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jscode<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 处理目标js文件</span>
<span class="token comment">// ...</span>

<span class="token comment">// 4. 获取js，存储为新文件</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>code<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">generator</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./output.js&#39;</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parser" tabindex="-1"><a class="header-anchor" href="#parser" aria-hidden="true">#</a> parser</h3><blockquote><p>用于将 js 代码转换为AST</p></blockquote>`,8),q={href:"https://babeljs.io/docs/babel-parser",target:"_blank",rel:"noopener noreferrer"},h=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jscode<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 常用配置项</span>
  <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span>  <span class="token comment">// 当代码中存在 import export 时，需要配置此选项</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="generator" tabindex="-1"><a class="header-anchor" href="#generator" aria-hidden="true">#</a> generator</h3><blockquote><p>将AST转换为js对象，<code>&lt;js对象&gt;.code</code> 为转换后的代码</p></blockquote><p>可通过在处理代码时，将一部分节点还原为code并打印，便于调试。具体信息参考 <a href="####Path">Path</a> 中生成代码的部分</p>`,4),f={href:"https://babeljs.io/docs/babel-generator",target:"_blank",rel:"noopener noreferrer"},j=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token function">generator</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 常用配置项</span>
  <span class="token literal-property property">retainLine</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 是否使用源代码行号，控制格式化内容</span>
  <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 保留注释</span>
  <span class="token comment">// 压缩代码，行内压缩，不影响行号，配合 retainLine: false 可将代码压缩为单行</span>
  <span class="token literal-property property">compact</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 中压缩，压缩代码，省略不必要的空格，保证行末分号</span>
  <span class="token comment">// minified: true  // 高压缩 省略不必要的行末分号和空格</span>
  <span class="token comment">// concise: true // 低压缩 保证空格为1，保留行末分号</span>
  
  <span class="token comment">// 高级配置项</span>
  <span class="token literal-property property">jsescOption</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  	<span class="token literal-property property">wrap</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  	<span class="token literal-property property">minimal</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// ascii码与unicode自动还原</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="traverse" tabindex="-1"><a class="header-anchor" href="#traverse" aria-hidden="true">#</a> traverse</h3><blockquote><p>遍历所给 ast 中的节点</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> visitor<span class="token punctuation">)</span>
<span class="token comment">// 参数 ast：目标 ast 节点</span>
<span class="token comment">// 参数 visitor：过滤方式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),x=n("li",null,[n("p",null,"ast 目标节点。通常为整个加密代码的根节点")],-1),w=n("p",null,"visitor",-1),_=a(`<li><p>声明 visitor</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> visitor <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 筛选条件。遍历所给节点下的所有函数表达式</span>
visitor<span class="token punctuation">.</span><span class="token function-variable function">FunctionExpress</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 注意：此处回调函数会接收到满足筛选条件的路径，不是节点</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;find function&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 等价代码</span>
<span class="token keyword">const</span> visitor <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 属性为筛选条件，内容为回调函数</span>
  <span class="token function-variable function">FunctionExpress</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;find function&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 等价代码。ES6语法，在对象属性为回调函数时的简写</span>
<span class="token keyword">const</span> visitor <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">FunctionExpress</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;find function&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 节点访问时机</span>
<span class="token keyword">const</span> visitor <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">FunctionExpress</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 进入时或退出时 enter / exit</span>
    <span class="token function">enter</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 同上es6语法，enter属性为回调函数。</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;find function&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当节点嵌套时的访问时机</p><ul><li><code>enter</code>：先处理该节点，再遍历该节点的子节点。处理可能会对子节点产生影响</li><li><code>exit</code>：先遍历该节点的子节点，在遍历到最内层后，依次向上层返回，此时依次判断并处理当前将返回上层的节点</li></ul></li><li><p>筛选条件为多类型，多类型节点使用同一函数处理。visitor 属性使用 <code>｜</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> visitor <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;VariableDeclarator|FunctionDeclaration&#39;</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3),E={href:"https://lzc6244.github.io/2021/07/28/Babel-%E5%B0%8F%E6%8A%80%E5%B7%A7.html",target:"_blank",rel:"noopener noreferrer"},P=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log_a</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This is [a] function -- &#39;</span> <span class="token operator">+</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>init<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">log_b</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This is [b] function -- &#39;</span> <span class="token operator">+</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>init<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">log_c</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This is [c] function -- &#39;</span> <span class="token operator">+</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>init<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> visitor <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token string-property property">&#39;VariableDeclarator&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;enter&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>log_a<span class="token punctuation">,</span> log_c<span class="token punctuation">,</span> log_b<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),I=a(`<li><p>遍历部分节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jscode<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 更新函数参数名</span>
<span class="token keyword">const</span> updateParamNameVisitor <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 遍历函数中的所有标识符，形参和调用都需修改</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paramName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 通过this接收额外参数</span>
      path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> visitor <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">FunctionExpression</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> paramName <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    path<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>updateParamNameVisitor<span class="token punctuation">,</span> <span class="token punctuation">{</span>paramName<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 遍历部分节点</span>
    <span class="token comment">// 遍历路径.traverse(visitor, {额外参数})</span>
    <span class="token comment">// 此处是创建对象的简写，完整为 { paramName: paramName }</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> visitor<span class="token punctuation">)</span>  <span class="token comment">// 遍历全部节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),S=a(`<h3 id="types" tabindex="-1"><a class="header-anchor" href="#types" aria-hidden="true">#</a> types</h3><blockquote><p>节点类型判断 与 构造新节点</p></blockquote><ul><li><p>判断节点类型。判断是否为标识符 <code>types.isIdentifier(path.node)</code>。等价代码<code>path.node.type === &#39;isIdentifier&#39;</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;isIdentifier&#39;</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;n&#39;</span>
<span class="token comment">// 等价</span>
types<span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;n&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 额外筛选条件通过对象传入</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>生成新节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/types&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/generator&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>


<span class="token keyword">let</span> right <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">binaryExpression</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">numericLiteral</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">numericLiteral</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// right = 3 * 4</span>
<span class="token keyword">let</span> binExp <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">binaryExpression</span><span class="token punctuation">(</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">numericLiteral</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>  <span class="token comment">//  binExp = 2 + right</span>
<span class="token keyword">let</span> dclr <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">variableDeclarator</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> binExp<span class="token punctuation">)</span>  <span class="token comment">// 一个变量声明项 - 指明标识符名称与初始化内容 x = binExp</span>
<span class="token keyword">let</span> ast <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">variableDeclaration</span><span class="token punctuation">(</span><span class="token string">&#39;const&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dclr<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 声明语句 const x = binExp</span>

<span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token function">generator</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
<span class="token comment">// const x = 2 + 3 * 4;</span>

<span class="token comment">// 通过将目标代码放入 ast explorer，可得出大概结构</span>
<span class="token comment">// 编写节点时可查看源码确认所需参数</span>

<span class="token comment">// 例如 t.numericLiteral(3) 等 数字，字符串，布尔，对象，正则...等 静态值</span>
<span class="token comment">// 还可以使用 t.valueToNode 生成节点</span>
<span class="token keyword">let</span> node <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">valueToNode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token operator">/</span>\\w<span class="token operator">/</span>s<span class="token operator">/</span>g<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token string">&#39;1000&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 一个包含多个静态常量的静态数组</span>
<span class="token keyword">let</span> code1 <span class="token operator">=</span> <span class="token function">generator</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>code
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>code1<span class="token punctuation">)</span>

<span class="token comment">// 此处的坑</span>
<span class="token comment">// @babel/generator &gt;= 7.24.0</span>
<span class="token comment">// 当前Node 环境不支持 RegExp 的多 flag 输出格式（尤其是 /\\w/s/g）</span>
<span class="token comment">// @babel/generator@7.22.x	输出 /\\w/sg	✅ 正常</span>
<span class="token comment">// @babel/generator@7.24.x	输出 /\\w/s/g	❌ 报错</span>
<span class="token comment">// @babel/generator@7.25.7+	输出 /\\w/sg	✅ 修复</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> Path</h3><blockquote><p>在 visitor 遍历时，回调函数得到的是 Path（<code>NodePath</code>）对象</p></blockquote><p>在解析时，得到的是节点树。当遍历时，会将对应节点对象封装为Path（对当前节点对象进行包装，添加额外的信息属性），传入回调函数</p><ul><li><p>常用属性</p><ul><li><code>path.node</code> 当前节点（<code>Node</code>）对象（ast中解析出的json结构）。visitor 中只使用 <code>Node</code> 时，回调函数可编写解包，如： <code>Identifier( {node} ) { console.log(node) }</code></li><li><code>path.parent</code> <strong>父级节点（<code>Node</code>）对象</strong></li><li><code>path.parentPath</code> <strong>父级Path（NodePath）对象</strong></li><li><code>path.container</code> 同级节点列表</li><li><code>path.scope</code> 作用域<code>Scope</code></li></ul></li><li><p>常用方法</p><ul><li><p><code>path.stop()</code> 停止遍历在当前 path 及其下的子节点。常见使用方式：visitor中只处理某特征的节点，但不对其子节点处理，完成后调用 <code>stop</code> 停止子节点遍历 **注意，只想处理某一个节点，增加特征判断，使用return跳出。stop只停止子节点遍历，依然会操作后续节点 **</p></li><li><p><code>path.skip()</code> 遍历当前 path 下的子节点跳过。常见使用方式：visitor在遍历某一类节点时，不处理某些特征的节点，使用 <code>if</code> 判断并调用<code>skip</code>跳过</p></li><li><p><code>path.get</code> 获取子节点的<code>Node</code>和 <code>NodePath</code></p><ul><li><p>获取子节点 <code>Node</code>. 参考 ast解析结构，对不同种类的节点，通过 <code>Node</code> 访问其子节点对应的属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// BinaryExpression 节点</span>
path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>left  <span class="token comment">// 左操作项节点Node</span>
path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>right  <span class="token comment">// 右操作项节点Node</span>
path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>operator  <span class="token comment">// 操作符节点Node</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取子节点 <code>NodePath</code>。通过 <code>path.get()</code> 方法获取 <code>NodePath</code> 对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// BinaryExpression 节点</span>
path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 左操作项Path</span>
path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;right&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 右操作项节点Path</span>
path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;operator&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 操作符节点Path</span>

path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;left.name&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 多级访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>判断类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Node 对象通过 types 判断节点类型 - 判断的是 path.node.type</span>
types<span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">)</span>
types<span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;n&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 额外筛选条件，是不是变量名为n的变量</span>

<span class="token comment">// NodePath可直接判断 - 判断的是 path.type</span>
path<span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
path<span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;n&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 额外筛选条件，是不是变量名为n的变量</span>

<span class="token comment">// 一般情况下 path.type 与 path.node.type 一致</span>

<span class="token comment">// 类型断言，不符合抛出异常</span>
path<span class="token punctuation">.</span><span class="token function">assertIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>节点转代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Node: 向 \`generator\` 传入 \`Node\` 用于生成代码（**不是Path**）</span>
<span class="token function">generator</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>code

<span class="token comment">// Path: babel通过将 toString 重写，实现 path.toString 将 NodePath 转换成代码</span>
path<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
path <span class="token operator">+</span> <span class="token string">&#39;&#39;</span>  <span class="token comment">// 隐式转换。字符串拼接时，会隐式调用 toString</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>替换节点属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// BinaryExpression 节点，将二项式的左右属性（两个子节点）分别替换为 x 与 y</span>
path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>left <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>right <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>替换当前节点。通过 visitor 遍历需要替换的节点，进行替换。通常需要 <code>path.stop();</code> 防止死循环</p><ul><li><p><code>path.replaceWith</code> 将一个节点替换为一个新节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将当前节点替换为数字字面量1</span>
path<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">valueToNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>path.replaceWithMultiple</code> 将 path 所在节点替换为多个节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将单条  return 替换为 两个表达式 与一个 return</span>
<span class="token function">ReturnStatement</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  path<span class="token punctuation">.</span><span class="token function">replaceWithMultiple</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    t<span class="token punctuation">.</span><span class="token function">expressionStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 表达式1</span>
		t<span class="token punctuation">.</span><span class="token function">expressionStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 表达式2</span>
    t<span class="token punctuation">.</span><span class="token function">returnStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>path.replaceInline</code> 将 path 所在节点替换为一个或多个新节点。源码中通过传入类型是否为数组自动调用 <code>replaceWith</code> 或 <code>replaceWithMultiple</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 替换成一个新节点 - 等效为 replaceWith</span>
path<span class="token punctuation">.</span><span class="token function">replaceInline</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">valueToNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 替换成多个新节点 - 等效为 replaceWithMultiple</span>
<span class="token function">ReturnStatement</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  path<span class="token punctuation">.</span><span class="token function">replaceInline</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    t<span class="token punctuation">.</span><span class="token function">expressionStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 表达式1</span>
		t<span class="token punctuation">.</span><span class="token function">expressionStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 表达式2</span>
    t<span class="token punctuation">.</span><span class="token function">returnStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>path.replaceWithSourceString</code> 将 path 所在节点替换为字符串源码对应的节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 返回值的函数混淆 - 将返回值替换为一个函数，真实返回值放入函数中返回</span>
<span class="token function">ReturnStatement</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> argumentPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;argument&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取返回值的 argument 节点Path。如果返回值为二项式，则此时是二项式的 Path</span>
  argumentPath<span class="token punctuation">.</span><span class="token function">replaceWithSourceString</span><span class="token punctuation">(</span>
    <span class="token string">&#39;function() {return &#39;</span> <span class="token operator">+</span> argumentPath <span class="token operator">+</span> <span class="token string">&#39;}()&#39;</span>  <span class="token comment">// 隐式转换。argumentPath 自动 toString 转换成源码字符串</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  path<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 由于生成了一个带返回值函数，不停止会遍历到新生成函数的返回值，再次进行替换，从而进入递归，出现死循环</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注意替换内容与遍历内容是否一致，需调用 stop ，防止死循环</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>path.remove</code> 删除节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 删除多余的分号</span>
<span class="token function">EmptyStatement</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>插入节点 <code>path.insertBefore</code> 与 <code>path.insertAfter</code>，在指定 path 前 与 后插入兄弟节点</p></li></ul></li><li><p>父级Path</p><ul><li><p><code>path.parent</code> 父节点Node对象</p></li><li><p><code>path.parentPath</code> 父节点Path（NodePath）对象，因此<code>path.parentPath.node === path.parent</code></p></li><li><p>常用方法</p><ul><li><p><code>path.findParent </code> 对层层父节点 path 进行 find 操作。传入回调函数，回调形参为父节点path，函数体为 true 时返回该 path</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取包含 return 的对象表达式 path</span>
<span class="token function">ReturnStatement</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">{</span>
  <span class="token comment">// 形参 p 自动读取父节点 path</span>
  <span class="token comment">// 层层向上，直到 path 所在节点为对象表达式时返回</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">findParent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token function">isObjectExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>path.find</code> 对当前节点和层层父节点 path 进行 find 操作。与 <code>path.findParent </code> 类似，只多包含了当前节点</p></li><li><p><code>path.getFunctionParent</code> 获取父函数。find 条件为函数表达式</p></li><li><p><code>path.getStatementParent</code> 获取语句。find 条件为 Statement</p></li><li><p><code>path.parentPath.replaceWith(Node)</code> 与Path用法一致，替换父节点</p></li><li><p><code>path.parentPath.remove</code> 与Path一致，删除父节点</p></li></ul></li></ul></li><li><p>同级Path。介绍 Path 中的 <code>container</code>，<code>listKey</code>，<code>key</code> 属性。以下方代码中的 <code>return</code> 所在节点为例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 例1：目标 return 语句</span>
<span class="token keyword">const</span> <span class="token function-variable function">x</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 解析结构如下解析</span>
<span class="token comment">// FunctionExpression.body = BlockStatement </span>
<span class="token comment">// BlockStatement.body = [ReturnStatement]  </span>

<span class="token comment">// 例2：目标 属性 b 的 ObjectProperty</span>
<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span>
<span class="token comment">// ObjectExpression.properties = [ObjectProperty, ObjectProperty, ObjectProperty]</span>
<span class="token comment">// ObjectProperty.key = Identifier</span>
<span class="token comment">// Identifier.name = &#39;a&#39;</span>

<span class="token comment">// 例3 例1代码的 BlockStatement</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>path.container</code>（容器） : 本节点所在容器的值（可用于获取同级节点）</p><ul><li>例1中，<code>ReturnStatement</code> 语句位于 <code>BlockStatement.body</code> 数组中， <code>container</code> 值为 <code>BlockStatement.body</code> 的值（解析的值为节点数组，不是Path），即 <code>[ReturnStatement]</code></li><li>例2中，<code>container</code> 值为 <code>ObjectExpression.properties</code> 的值，即 <code>[ObjectProperty, ObjectProperty, ObjectProperty]</code></li><li>例3中，<code>FunctionExpression.body</code> 不是数组，为 <code>BlockStatement</code>本身，一个函数只含有一个代码块。<code>container</code> 值为 <code>FunctionExpression</code> 节点，而不是 <code>FunctionExpression.body</code>（容器不指向自身）。</li></ul></li><li><p><code>path.key</code>：从 <code>container</code> 中获取该节点的 <code>container[]</code> 的 key 值</p><ul><li>例1中，由于获取该节点使用 <code>container[0]</code>，因此 <code>key</code> 值为 <code>0</code></li><li>例2中，由于获取该节点使用 <code>container[1]</code>，因此 <code>key</code> 值为 <code>1</code></li><li>例3中，由于 <code>container</code> 为 <code>FunctionExpression</code>，获取该节点使用<code>container[&#39;body&#39;]</code>，因此 <code>key</code> 值为 <code>body</code></li></ul></li><li><p><code>path.listKey</code>：容器对应的属性名</p><ul><li>例1中，<code>container</code> 为 <code>BlockStatement.body</code>，因此 <code>listKey</code> 为 <code>body</code></li><li>例2中，<code>container</code> 为 <code>ObjectExpression.properties</code>，因此 <code>listKey</code> 为 <code>properties</code></li><li>例3中，<code>container</code> 不是数组，因此为 <code>undefined</code></li></ul></li><li><p><code>path.inList</code> ：判断 <code>container</code> 是否为数组</p></li><li><p><code>container</code> 为数组时的常用方法（可用于操作同级节点）</p><ul><li><p><code>path.getSibling</code>：使用索引获取从 <code>container</code> 中同级节点 <code>path.getSibling(index)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取当前节点的下一个节点</span>
path<span class="token punctuation">.</span><span class="token function">getSibling</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// path.key 为当前节点的索引，\`+1\` 指向下一个节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>path.parentPath.unshiftContainer</code> ：<code>container</code> 前部插入多个节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将给定的节点数组放入当前节点所在容器的最前方（保持传入数组的顺序）</span>
<span class="token comment">// 指明容器位置: 父节点   的          body     节点数组</span>
path<span class="token punctuation">.</span>parentPath<span class="token punctuation">.</span><span class="token function">unshiftContainer</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">valueToNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">valueToNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回值为新节点的Path数组（传入的是节点，返回的是包装为Path）</span>


<span class="token comment">// 通过returnStatement修改函数参数  function(a, b) {return 1}</span>
<span class="token comment">// AST结构：	FunctionExpression.params -&gt; [Idenetifier, Idenetifier]</span>
<span class="token comment">// 					FunctionExpression.body -&gt; BlockStatement</span>
<span class="token comment">// 					BlockStatement.body -&gt; [ReturnStatement]</span>
<span class="token comment">// 指定容器位置  FunctionExpression.params ，新增两个参数 x 和 y</span>
path<span class="token punctuation">.</span>parentPath<span class="token punctuation">.</span>parentPath<span class="token punctuation">.</span><span class="token function">unshiftContainer</span><span class="token punctuation">(</span><span class="token string">&#39;params&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">Idenetifier</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Idenetifier</span><span class="token punctuation">(</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>path.parentPath.pushContainer</code>：<code>container</code> 结尾追加节点</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 指明容器位置: 父节点   的      body    节点</span>
path<span class="token punctuation">.</span>parentPath<span class="token punctuation">.</span><span class="token function">pushContainer</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">valueToNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 返回新节点的Path数组（数组固定只有一个成员，传入的是节点，返回的是包装为Path）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="scope" tabindex="-1"><a class="header-anchor" href="#scope" aria-hidden="true">#</a> scope</h3><p>使用 Path 对象的 <code>scope</code> 属性获取与处理指定Path的作用域相关内容</p><ul><li><p><code>path.scope.block</code> 获取标识符的作用域，得到作用域 Node 对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">var</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span>
  <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>变量作用域。例子，获取变量 <code>c</code> 的作用域，assert：FuncionExpression</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 变量c的作用域为函数 func</span>
<span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span>block<span class="token punctuation">)</span>  <span class="token comment">// FuncionExpression</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数作用域。例子，获取函数 <code>func2</code> 的作用域，assert：FuncionExpression</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// func 的函数声明是函数表达式（匿名函数赋值）</span>
<span class="token comment">// func2 为函数声明</span>
<span class="token function">FunctionDclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span>block  <span class="token comment">// 与变量不一样，直接获取到的作用域是函数自己</span>
  path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>block<span class="token punctuation">.</span> <span class="token comment">// 父级作用域才是该函数真实的作用域</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Binding 对象</p><ul><li><p><code>path.scope.getBinding</code> 获取当前节点上绑定的指定的标识符（当前节点可用的标识符，标识符作用域包含当前的 path）。返回值为 Binding 对象（对当前标识符节点对象进行包装，添加额外的信息属性）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ***** 案例1 *****</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">var</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span>
  <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// func2 path</span>
<span class="token function">FunctionDclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">getBinding</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">// func2 可以读取变量 a ，因此可获得全局变量 a 的 Binding</span>
<span class="token punctuation">}</span>

<span class="token comment">// ***** 案例2 *****</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">return</span> a
<span class="token punctuation">}</span>
<span class="token comment">// f 函数 path</span>
<span class="token function">FunctionDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">getBinding</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">// a 变量重名，优先获取函数形参 a 的 Binding</span>
<span class="token punctuation">}</span>

<span class="token comment">// ***** Binding对象 *****</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">identifier</span><span class="token operator">:</span> 标识符 Node 对象<span class="token punctuation">,</span>
  <span class="token literal-property property">scope</span><span class="token operator">:</span> Scope <span class="token punctuation">{</span>
    <span class="token literal-property property">block</span><span class="token operator">:</span> 作用域 Node 对象<span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> 作用域 Node 的 NodePath 对象
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> 标识符 NodePath 对象<span class="token punctuation">,</span>  <span class="token comment">// 其中 含有 container:[[Node]]、listKey:params 等容器信息</span>
  <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&#39;param&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 该标识符类型</span>
  <span class="token literal-property property">constant</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 是否为常量</span>
  <span class="token literal-property property">constantViolations</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 变量被修改的 NodePath 数组（声明时的赋值不计算在内） </span>
                       <span class="token comment">// ！！重点，根据使用情况，对该变量操作，不影响其他节点</span>
                       <span class="token comment">// 仅依靠变量名称判断无法避免全局变量与局部变量重名时的误改</span>
  
  <span class="token comment">// 引用相关</span>
  <span class="token literal-property property">referencePaths</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 变量被引用的 NodePath 数组  </span>
    <span class="token comment">// ！！重点，根据使用情况，对该变量操作，不影响其他节点</span>
    <span class="token comment">// 仅依靠变量名称判断无法避免全局变量与局部变量重名时的误改</span>
  <span class="token literal-property property">referenced</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否引用（在 return 中引用）</span>
  <span class="token literal-property property">references</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">// 引用次数, 本例中，函数内的 \`a=10\` 只属于赋值，不属于引用</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>scope.hasBinding</code> 方法，判断是否有绑定。<code>false</code> 等效为 <code>getBinding</code> 方法返回 <code>undefined</code></p></li><li><p>通过 Binding 对象获取作用域。除了通过 <code>Identifier</code> 过滤变量名，得到 path 后获取 <code>scope</code> 外，还可以通过该标识符的 Binding 对象获取作用域（避免之前 案例2 中的变量 a 重名情况）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ***** 案例 *****</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">var</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// FunctionExpression</span>
  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span>
  <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// FunctionDeclaration</span>
<span class="token punctuation">}</span>

<span class="token comment">// 案例中的变量 c</span>
<span class="token function">FunctionExpression</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 定位变量所在函数</span>
  <span class="token keyword">let</span> bindingC <span class="token operator">=</span> path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取 c 的 Binding 对象</span>
  bindingC<span class="token punctuation">.</span>scope<span class="token punctuation">.</span>block  <span class="token comment">// 通过 Binding 对象获取作用域</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>path.scope.getOwnBinding</code> 用于获取当前节点自己的绑定。如父节点中定义的变量等内容，不会通过此函数获取（如案例1中，函数内无法通过 <code>getOwnBinding</code> 获取全局变量）由于存在问题，一般不使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// getOwnBinding 案例</span>
<span class="token keyword">let</span> a
<span class="token keyword">const</span> <span class="token function-variable function">func1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 遍历 func1 内的标识符，查看哪些是 OwnBinding</span>
<span class="token function">FunctionExpression</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  path<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> name <span class="token operator">=</span> p<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
      <span class="token comment">// 强转为 boolean，是否为 OwnBinding</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token operator">!</span>p<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">getOwnBinding</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
a <span class="token boolean">false</span>  <span class="token comment">// a 是全局变量</span>
b <span class="token boolean">true</span>  <span class="token comment">// b 是该函数内定义的</span>
func2 <span class="token boolean">false</span>  <span class="token comment">// **重点** 即使为函数内的定义，此时仍然不是 Own ， 需要注意避免</span>
c <span class="token boolean">true</span>  <span class="token comment">// **重点** 子函数内的也视为 Own，但理论上不应该为 Own ， 需要注意避免。需要额外判断作用域范围是否为当前标识符的作用域</span>
func2 <span class="token boolean">true</span>  <span class="token comment">// **重点** 函数内的定义的子函数，引用时才是 Own</span>


<span class="token comment">// 避免 getOwnBinding 的问题，增加作用域一致性判断</span>
<span class="token function">FunctionExpression</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  path<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> name <span class="token operator">=</span> p<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
      <span class="token keyword">let</span> binding <span class="token operator">=</span> p<span class="token punctuation">.</span>scode<span class="token punctuation">.</span><span class="token function">getBinding</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// binding 与 作用域 所在代码是否一致</span>
      binding <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token function">generator</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>scope<span class="token punctuation">.</span>block<span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">==</span> path <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>scope.hasOwnBinding</code> 方法，同理</p></li><li><p><code>scope.getAllBinding</code> 方法，获取当前节点的所有绑定。返回值类型为 Object，key 为 标识符名，value 为 Binding 对象。一样有 <code>getOwnBinding</code> 注意的点</p></li></ul></li><li><p>遍历作用域，通过 <code>scope.traverse</code> 遍历作用域中的节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 遍历作用域 案例</span>
<span class="token keyword">let</span> a
<span class="token keyword">const</span> <span class="token function-variable function">func1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 遍历 b 作用域中的节点</span>
<span class="token function">FunctionExpression</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 定位函数 func2</span>
  <span class="token keyword">const</span> binding <span class="token operator">=</span> path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 获取 b 的 Binding 对象 - func1的函数体 - b的作用范围，包括声明</span>
  binding<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>scope<span class="token punctuation">.</span>block<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// 传入作用域 Node 对象 - func1的函数体</span>
    <span class="token function">AssignmentExpression</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 赋值表达式</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 定位 b 在哪里进行</span>
        p<span class="token punctuation">.</span>node<span class="token punctuation">.</span>right <span class="token operator">=</span> t<span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span><span class="token string">&#39;bbb&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 修改 b 的值</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>scope.rename</code> 方法可用于标识符重命名，并修改引用处</p><ul><li><p>重命名指定变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">func1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通过变量的 Binding 修改</span>
<span class="token function">FunctionExpression</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> binding <span class="token operator">=</span> path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  binding<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// binding.scope 会在作用域内生效</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用 path.scope.rename 需要保证遍历到全部节点，遍历条件需为 Identifier</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>scope.generateUidIdentifier</code> 方法生成标识符名。避免手动指定时，指定了一个已存在的标识符名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 首次调用</span>
path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">generateUidIdentifier</span><span class="token punctuation">(</span><span class="token string">&#39;_id&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 返回值：{type: &#39;Identifier&#39;, name: &#39;_id&#39;}</span>

<span class="token comment">// 第二次调用</span>
path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">generateUidIdentifier</span><span class="token punctuation">(</span><span class="token string">&#39;_id&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 返回值：{type: &#39;Identifier&#39;, name: &#39;_id2&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>简单的标识符混淆</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将所有标识符从 _0x28ba 起，按顺序重命名</span>
<span class="token function">Idetifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name<span class="token punctuation">,</span> path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">generateUidIdentifier</span><span class="token punctuation">(</span><span class="token string">&#39;_0x28ba&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
多次获取时的效果
{type: &#39;Identifier&#39;, name: &#39;_0x28ba&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba2&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba3&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba4&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba5&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba6&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba7&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba8&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba9&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba0&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba1&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba10&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba11&#39;}
{type: &#39;Identifier&#39;, name: &#39;_0x28ba12&#39;}
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>scope.hasReference</code> 方法。<code>hasReference(&#39;a&#39;)</code> 查看当前节点是否有标识符 a 的引用，返回值类型为 boolean。等效为标识符 a 的 Binding 对象中 referenced 的值</p></li><li><p><code>scope.getBindingIdentifier</code> 方法。<code>getBindingIdentifier(&#39;a&#39;)</code> 获取当前节点绑定的标识符 a 的 Node 对象（获取 <code>Identifier</code> 节点）</p></li><li><p><code>scope.getBindingIdentifier</code> 方法。同理</p></li></ul></li></ul>`,10);function B(N,F){const t=o("ExternalLinkIcon");return c(),i("div",null,[u,r,d,k,v,n("p",null,[s("通过解析网站 "),n("a",m,[s("https://astexplorer.net/"),e(t)]),s("，选择语言 "),b,s(" ，解析引擎 "),g,s("。了解 ast 结构")]),y,n("p",null,[s("官方文档 "),n("a",q,[s("https://babeljs.io/docs/babel-parser"),e(t)])]),h,n("p",null,[s("官方文档 "),n("a",f,[s("https://babeljs.io/docs/babel-generator"),e(t)])]),j,n("ul",null,[x,n("li",null,[w,n("ul",null,[_,n("li",null,[n("p",null,[s("同一类型节点使用多函数处理。代码"),n("a",E,[s("来源"),e(t)])]),P])])]),I]),S])}const O=p(l,[["render",B],["__file","021.html.vue"]]);export{O as default};
