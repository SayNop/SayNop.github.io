const n=JSON.parse('{"key":"v-2b6900e7","path":"/detail/007.html","title":"安卓NDK开发","lang":"zh-CN","frontmatter":{"layout":"Detail","title":"安卓NDK开发","date":"2023-05-05T00:00:00.000Z","discription":"安卓NDK开发的简单事例。java层native函数的动态注册与静态注册","category":["Android"],"tags":["Android","Ndk"],"description":"静态注册开发流程 在java中定义native方法 参考以下例子编写java层的类，在类中定义需要通过c语言实现的native方法 package com.example.testndk; import android.R.string; public class MainActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // 弹窗显示出native函数调用结果 // 第一个参数是上下文，这里直接传入this // 第二个参数是显示内容，这里直接调用jni函数，打印函数返回值 // 第三个参数是弹窗时间 Toast.makeText(this, getstring(), Toast.LENGTH_LONG).show(); } // native方法的定义 - 从c层得到返回字段 public native CharSequence getstring(); }","head":[["meta",{"property":"og:url","content":"https://saynop.github.io/detail/007.html"}],["meta",{"property":"og:title","content":"安卓NDK开发"}],["meta",{"property":"og:description","content":"静态注册开发流程 在java中定义native方法 参考以下例子编写java层的类，在类中定义需要通过c语言实现的native方法 package com.example.testndk; import android.R.string; public class MainActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // 弹窗显示出native函数调用结果 // 第一个参数是上下文，这里直接传入this // 第二个参数是显示内容，这里直接调用jni函数，打印函数返回值 // 第三个参数是弹窗时间 Toast.makeText(this, getstring(), Toast.LENGTH_LONG).show(); } // native方法的定义 - 从c层得到返回字段 public native CharSequence getstring(); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-18T06:41:25.000Z"}],["meta",{"property":"article:tag","content":"Android"}],["meta",{"property":"article:tag","content":"Ndk"}],["meta",{"property":"article:published_time","content":"2023-05-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-18T06:41:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"安卓NDK开发\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-18T06:41:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"静态注册开发流程","slug":"静态注册开发流程","link":"#静态注册开发流程","children":[{"level":3,"title":"在java中定义native方法","slug":"在java中定义native方法","link":"#在java中定义native方法","children":[]},{"level":3,"title":"编写c语言源码","slug":"编写c语言源码","link":"#编写c语言源码","children":[]},{"level":3,"title":"通过Cmake打包","slug":"通过cmake打包","link":"#通过cmake打包","children":[]},{"level":3,"title":"在java层声明so文件","slug":"在java层声明so文件","link":"#在java层声明so文件","children":[]}]},{"level":2,"title":"静态注册下C层调用Java层的普通字段与静态字段","slug":"静态注册下c层调用java层的普通字段与静态字段","link":"#静态注册下c层调用java层的普通字段与静态字段","children":[{"level":3,"title":"普通字段","slug":"普通字段","link":"#普通字段","children":[]},{"level":3,"title":"静态字段","slug":"静态字段","link":"#静态字段","children":[]}]},{"level":2,"title":"静态注册下C层调用Java层的普通方法与静态方法","slug":"静态注册下c层调用java层的普通方法与静态方法","link":"#静态注册下c层调用java层的普通方法与静态方法","children":[]},{"level":2,"title":"动态注册开发流程","slug":"动态注册开发流程","link":"#动态注册开发流程","children":[{"level":3,"title":"在java中定义native方法","slug":"在java中定义native方法-1","link":"#在java中定义native方法-1","children":[]},{"level":3,"title":"编写c语言源码","slug":"编写c语言源码-1","link":"#编写c语言源码-1","children":[]},{"level":3,"title":"通过Cmake打包","slug":"通过cmake打包-1","link":"#通过cmake打包-1","children":[]},{"level":3,"title":"在java层声明so文件","slug":"在java层声明so文件-1","link":"#在java层声明so文件-1","children":[]}]}],"git":{"updatedTime":1697611285000,"contributors":[{"name":"SayNop","email":"a2045751@163.com","commits":4}]},"filePathRelative":"detail/007.md","excerpt":"<h2> 静态注册开发流程</h2>\\n<h3> 在java中定义native方法</h3>\\n<p>参考以下例子编写java层的类，在类中定义需要通过c语言实现的native方法</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>example<span class=\\"token punctuation\\">.</span>testndk</span><span class=\\"token punctuation\\">;</span>\\n  \\n<span class=\\"token keyword\\">import</span> <span class=\\"token namespace\\">android<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">R</span><span class=\\"token punctuation\\">.</span>string<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MainActivity</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Activity</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">protected</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">onCreate</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Bundle</span> savedInstanceState<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">super</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">onCreate</span><span class=\\"token punctuation\\">(</span>savedInstanceState<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">setContentView</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">R</span><span class=\\"token punctuation\\">.</span>layout<span class=\\"token punctuation\\">.</span>activity_main<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 弹窗显示出native函数调用结果</span>\\n        <span class=\\"token comment\\">// 第一个参数是上下文，这里直接传入this</span>\\n        <span class=\\"token comment\\">// 第二个参数是显示内容，这里直接调用jni函数，打印函数返回值</span>\\n        <span class=\\"token comment\\">// 第三个参数是弹窗时间</span>\\n        <span class=\\"token class-name\\">Toast</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">makeText</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">getstring</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Toast</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">LENGTH_LONG</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">show</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  \\n    <span class=\\"token comment\\">// native方法的定义 - 从c层得到返回字段</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">native</span> <span class=\\"token class-name\\">CharSequence</span> <span class=\\"token function\\">getstring</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
