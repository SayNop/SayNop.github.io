import{_ as p,r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-e4c0a286.js";const i={},u=t(`<h2 id="kong的部署与基本配置" tabindex="-1"><a class="header-anchor" href="#kong的部署与基本配置" aria-hidden="true">#</a> kong的部署与基本配置</h2><h3 id="服务器建立两个无需认证的服务" tabindex="-1"><a class="header-anchor" href="#服务器建立两个无需认证的服务" aria-hidden="true">#</a> 服务器建立两个无需认证的服务</h3><ul><li>安装服务运行环境</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> python3
<span class="token function">sudo</span> pip3 <span class="token function">install</span> <span class="token assign-left variable">Flask</span><span class="token operator">==</span><span class="token number">1.1</span>.4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>编写服务</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 服务A</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify

app_a <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app_a<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;server A&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment"># # flask --app a run</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app_a<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>

    
<span class="token comment"># 服务B</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify

app_b <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app_b<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;server B&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment"># # flask --app b run</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app_b<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5001</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>开启端口</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> firewall-cmd --add-port<span class="token operator">=</span><span class="token number">5000</span>/tcp <span class="token parameter variable">--permanent</span>
<span class="token function">sudo</span> firewall-cmd --add-port<span class="token operator">=</span><span class="token number">5001</span>/tcp <span class="token parameter variable">--permanent</span>
<span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--reload</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装postgresql" tabindex="-1"><a class="header-anchor" href="#安装postgresql" aria-hidden="true">#</a> 安装Postgresql</h3>`,9),r={href:"https://blog.csdn.net/feinifi/article/details/96474115",target:"_blank",rel:"noopener noreferrer"},k={href:"https://ken.io/note/centos7-postgresql12-install-and-configuration",target:"_blank",rel:"noopener noreferrer"},d=t(`<p><strong>补充：</strong></p><p>Below is an example to install PostgreSQL 9.6 on RHEL/CentOS 7:</p><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span> /etc/yum.repos.d/pgdg-96.repo</span>
[pgdg90]
name=PostgreSQL 9.6 RPMs for RHEL/CentOS 7
baseurl=https://yum-archive.postgresql.org/9.6/redhat/rhel-7-x86_64
enabled=1
gpgcheck=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-PGDG
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, you can install PostgreSQL 9.6 on RHEL/CentOS 7:<code>yum install postgresql96-server</code>. <br> 通过<code>yum install postgresql96-devel</code>方便后续python安装包的处理</p><ul><li>查看安装源</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum search postgresql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>通过yum安装</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装老版本 yum install postgresql-server (不可用)</span>

<span class="token comment"># 添加安装包</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
<span class="token comment"># 上述步骤不成功时使用下面的步骤</span>
<span class="token function">curl</span> <span class="token parameter variable">-Lo</span> pgdg-redhat-repo-latest.noarch.rpm <span class="token variable"><span class="token variable">$(</span> https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm&quot;<span class="token variable">)</span></span> <span class="token operator">||</span> <span class="token function">rpm</span> <span class="token parameter variable">-i</span> pgdg-redhat-repo-latest.noarch.rpm

<span class="token comment"># 安装</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> postgresql12 postgresql12-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>检查安装版本 - 等初始化完成后在登录数据库</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>psql <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>初始化数据库 - 完成后会生成目录 <em>/var/lib/pgsql/12/</em> （老版本*/var/lib/pgsql/data*），配置文件在其中</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 老版本 postgresql-setup initdb</span>
<span class="token function">sudo</span> /usr/pgsql-12/bin/postgresql-12-setup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>启动服务</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#启动PostgreSQL12服务</span>
<span class="token function">sudo</span> systemctl start postgresql-12
<span class="token comment">#设置PostgreSQL12服务为开机启动</span>
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> postgresql-12

<span class="token comment"># 9.2版本 service postgresql start</span>
<span class="token comment"># 9.6版本 sudo systemctl start postgresql-9.6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过<code>netstat -nat</code>可看到运行端口 <em>5432</em></li><li><code>psql postgres</code>通过root用户登录，第一次会失败。使用<code>psql -U postgres</code>以切换到postgres用户登录，会提示认证失败</li><li>通过<code>su - postgres</code>切换到postgres用户后，执行<code>psql</code>进行登录</li><li>通过<code>vim /var/lib/pgsql/data/pg_hba.conf</code>修改配置</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 不切换用户登录 peer改为trust</span>
<span class="token builtin class-name">local</span>		all		all							peer
<span class="token comment"># kong的迁移</span>
<span class="token function">host</span>		all		all		<span class="token number">127.0</span>.0.1/32		trust
<span class="token comment"># 远程登录 - 增加如下行</span>
<span class="token function">host</span>		all		all		<span class="token number">0.0</span>.0.0/0			md5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改监听地址 - 非宿主机访问 <code>vim /var/lib/pgsql/data/postgresql.conf</code></li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改为 &#39;*&#39;</span>
listen_addresses <span class="token operator">=</span> <span class="token string">&#39;localhost&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更新完配置后重启服务。可使用<code>psql -U postgres</code>直接登录，<code>\\q</code>退出</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart postgresql-12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在postgresql内修改登录密码.</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 方法一</span>
<span class="token punctuation">\\</span>password
<span class="token comment"># 方法二</span>
alter user postgres with password <span class="token string">&#39;target_password&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>开启端口</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> firewall-cmd --add-port<span class="token operator">=</span><span class="token number">5432</span>/tcp <span class="token parameter variable">--permanent</span>
<span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--reload</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>补充：</strong></p><ul><li><code>\\l</code> 查看数据库</li><li><code>\\c</code>选择数据库</li><li><code>\\d</code>查看所有表格</li><li><code>\\d 表格名</code>查看指定表格</li><li>创建表格</li></ul><div class="macos language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> login_user<span class="token punctuation">(</span>
   phone <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
   username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
   password <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
   <span class="token keyword">level</span> <span class="token keyword">smallint</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装kong" tabindex="-1"><a class="header-anchor" href="#安装kong" aria-hidden="true">#</a> 安装Kong</h3>`,28),v={href:"https://docs.konghq.com/gateway/latest/install/linux/rhel/",target:"_blank",rel:"noopener noreferrer"},m=t(`<ul><li>安装nignx</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> epel-release
yum update
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>下载安装包</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-Lo</span> kong-enterprise-edition-3.3.0.0.rpm <span class="token variable"><span class="token variable">$(</span> <span class="token function">rpm</span> <span class="token parameter variable">--eval</span> <span class="token string">&quot;https://download.konghq.com/gateway-3.x-rhel-%{rhel}/Packages/k/kong-enterprise-edition-3.3.0.0.rhel%{rhel}.amd64.rpm&quot;</span><span class="token variable">)</span></span> <span class="token operator">||</span> <span class="token function">rpm</span> <span class="token parameter variable">-i</span> 

<span class="token comment"># 老版本</span>
<span class="token function">curl</span> <span class="token parameter variable">-Lo</span> kong-1.1.3.el7.noarch.rpm <span class="token variable"><span class="token variable">$(</span> <span class="token function">rpm</span> <span class="token parameter variable">--eval</span> <span class="token string">&quot;https://download.konghq.com/gateway-1.x-centos-7/Packages/k/kong-1.1.3.el7.noarch.rpm&quot;</span><span class="token variable">)</span></span> <span class="token operator">||</span> <span class="token function">rpm</span> <span class="token parameter variable">-i</span> kong-1.1.3.el7.noarch.rpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用yum安装</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> kong-enterprise-edition-3.3.0.0.rpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置文件 <em>/etc/kong/kong.conf.default</em></p><h3 id="配置与启动" tabindex="-1"><a class="header-anchor" href="#配置与启动" aria-hidden="true">#</a> 配置与启动</h3><ul><li>复制并修改 <em>/etc/kong/kong.config.default</em> 。</li><li>建立kong在postgresql内的数据库</li></ul><div class="macos language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> kong <span class="token keyword">WITH</span> PASSWORD <span class="token string">&#39;super_secret&#39;</span><span class="token punctuation">;</span> 
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> kong OWNER kong<span class="token punctuation">;</span>
<span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token keyword">database</span> kong <span class="token keyword">to</span> kong<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置数据库的账号与密码</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pg_user <span class="token operator">=</span> kong
pg_password <span class="token operator">=</span> password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>迁移</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">KONG_PASSWORD</span><span class="token operator">=</span><span class="token string">&quot;pwd&quot;</span> kong migrations bootstrap <span class="token parameter variable">-c</span> <span class="token string">&quot;PATH_TO_KONG.CONF_FILE&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>启动</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kong start <span class="token parameter variable">-c</span> <span class="token string">&quot;PATH_TO_KONG.CONF_FILE&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>开放端口 - 8000服务api转发端口，8001kong管理端口</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> firewall-cmd --add-port<span class="token operator">=</span><span class="token number">8000</span>/tcp <span class="token parameter variable">--permanent</span>
<span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--reload</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kong代理后端服务" tabindex="-1"><a class="header-anchor" href="#kong代理后端服务" aria-hidden="true">#</a> kong代理后端服务</h3><ul><li>声明一个需要kong接管的后端服务（记录标识名，服务名使用0.0.0.0）</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> POST <span class="token punctuation">\\</span>
  <span class="token parameter variable">--url</span> http://localhost:8001/services/ <span class="token punctuation">\\</span>
  <span class="token parameter variable">--data</span> <span class="token string">&#39;name=服务标识符&#39;</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--data</span> <span class="token string">&#39;url=http://服务地址&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>指明服务转发的host（为声明的服务添加路由，注意字段需为客户端请求的host，详见补充）</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> POST <span class="token punctuation">\\</span>
	<span class="token comment"># 管理地址/services/服务标识符/routers</span>
  <span class="token parameter variable">--url</span> http://localhost:8001/services/服务标识符/routes <span class="token punctuation">\\</span>
  <span class="token comment"># 指明转发host规则：即后续请求头中携带指定host值字段将转发到对应的服务</span>
  <span class="token parameter variable">--data</span> <span class="token string">&#39;hosts[]=example.com&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>让kong转发到指定的服务</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> GET <span class="token punctuation">\\</span>
<span class="token comment"># 请求kong的api服务端口，让kong根据路由配置的host转发到对应的服务</span>
  <span class="token parameter variable">--url</span> http://localhost:8000/ <span class="token punctuation">\\</span>
  <span class="token parameter variable">--header</span> <span class="token string">&#39;Host: example.com&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如配置测试服务A和B，以A为例</p><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 服务标识符命名为service_a，服务a的ip必须为0.0.0.0</span>
<span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">--url</span> http://localhost:8001/services/ <span class="token parameter variable">--data</span> <span class="token string">&#39;name=service_a&#39;</span> <span class="token parameter variable">--data</span> <span class="token string">&#39;url=http://0.0.0.0:5000&#39;</span>

<span class="token comment"># 添加kong的转发路由</span>
<span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">--url</span> http://localhost:8001/services/service_a/routes <span class="token parameter variable">--data</span> <span class="token string">&#39;hosts[]=service_a.com&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>补充：</strong></p><ul><li><p>路由host字段的说明</p><ul><li>根据浏览器安全策略，浏览器发出的请求头中的Host字段根据为实际请求地址<code>http://{host}:{port|80}</code>中的<code>host</code>值，且不可自定义。</li><li>在生产环境中，在一台服务器上部署kong网关在8000端口。如需转发多个后端请求，需全部请求到该服务器的8000端口，才可进入kong网关。</li><li>由于host值不可指定，而kong网关需要host值进行路由区分，因此需为每个服务准备不同的域名，所有域名皆指向kong网关所在ip。</li></ul></li><li><p>路由的查看，修改，删除</p></li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看</span>
<span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> GET <span class="token parameter variable">--url</span>  http://localhost:8001/services/服务标识符

<span class="token comment"># 修改</span>
<span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> PATCH <span class="token parameter variable">--url</span>  http://localhost:8001/services/服务标识符 <span class="token punctuation">\\</span> 
<span class="token parameter variable">--data</span> 	<span class="token string">&#39;name=服务的新标识符&#39;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--data</span> <span class="token string">&#39;retries=6&#39;</span> <span class="token comment"># 其他选项</span>

<span class="token comment"># 删除</span>
<span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> DELETE <span class="token parameter variable">--url</span>  http://localhost:8001/services/服务标识符 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>代理完成后移除原服务端口，只对外暴漏kong端口通过代理请求对应服务</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> firewall-cmd --remove-port<span class="token operator">=</span><span class="token number">5000</span>/tcp <span class="token parameter variable">--permanent</span>
<span class="token function">sudo</span> firewall-cmd --remove-port<span class="token operator">=</span><span class="token number">5001</span>/tcp <span class="token parameter variable">--permanent</span>
<span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--reload</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jwt微服务认证的分析" tabindex="-1"><a class="header-anchor" href="#jwt微服务认证的分析" aria-hidden="true">#</a> jwt微服务认证的分析</h2><p>通过kong的jwt插件可实现对用户的认证。有两个设计方向可供选择：</p><ul><li>jwt认证可以对服务或路由生效。由于服务中一些接口需要无权限也可访问，可将一个服务的接口设置两个kong服务。将需要认证的接口放置一个服务，并设置特殊路径，如<code>/auth/*</code>。将无需认证接口放置另一个服务，并设置特殊路径<code>/free/*</code>。这样对kong来说，配置不同的服务，即可避免配置两个路由指向同一服务，需认证接口通过免认证路由请求而引起的安全性问题。(不同权限等级需不同前缀，较为复杂)</li><li>将全部数据接口与权限等级记入数据表中，根据路径与token中的用户权限查表鉴权，判断是否需要jwt认证，不需要直接放行后端，需要jwt认证的接口验证token得到用户权限，判断权限等级是否匹配。对token验证不通过的返回401，对权限不足的返回403。</li></ul><h3 id="建立需要不同用户权限的服务" tabindex="-1"><a class="header-anchor" href="#建立需要不同用户权限的服务" aria-hidden="true">#</a> 建立需要不同用户权限的服务</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 服务A</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify

app_a <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app_a<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;server A - level 0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app_a<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/auth&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;server A - level 1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app_a<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/admin&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;server A - level 2&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment"># # flask --app a run</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app_a<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>


    
<span class="token comment"># 服务B</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify

app_b <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app_b<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;server B - level 0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app_b<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/auth&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;server B - level 1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app_b<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/admin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;server B - level 2&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment"># # flask --app b run</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app_b<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5001</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="部署插件" tabindex="-1"><a class="header-anchor" href="#部署插件" aria-hidden="true">#</a> 部署插件</h3>`,38),b={href:"https://blog.csdn.net/zz18435842675/article/details/120648334",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>kong的插件默认路径为 <em>/usr/local/share/lua/5.1/kong/plugins</em></p><ul><li><em>/etc/kong/kong.conf</em> 中配置插件路径<code>lua_package_path = /&lt;path-to-plugin-location&gt;/kong/plugins/?.lua;;</code>。其中：<code>;;</code>代表默认路径；需确保最后两个路径为 <em>/kong/plugins/</em></li><li>将插件文件夹放入指定目录（不生效时放入默认目录）</li><li>修改 <em>/etc/kong/kong.conf</em> 中的<code>plugins = bundled</code>，用逗号分隔在后方补充自定义插件</li><li>修改 <em>/usr/local/share/lua/5.1/kong/constants.lua</em> ，添加自定义插件</li><li>通过<code>kong reload -c &quot;PATH_TO_KONG.CONF_FILE&quot;</code>重启kong</li><li>通过命令将插件绑定到服务</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://kong_ip:8001/services/<span class="token operator">&lt;</span>service-name-or-id<span class="token operator">&gt;</span>/plugins <span class="token parameter variable">-d</span> <span class="token string">&quot;name=my-custom-plugin&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="插件开发" tabindex="-1"><a class="header-anchor" href="#插件开发" aria-hidden="true">#</a> 插件开发</h2>`,4),h={href:"https://github.com/qianyugang/kong-docs-cn/blob/master/GUIDES%26REFERENCES/plugin-development/file-structure.md",target:"_blank",rel:"noopener noreferrer"},y=n("ul",null,[n("li",null,"handler.lua : 插件的主逻辑"),n("li",null,"schema.lua : 配置信息。"),n("li",null,"daos.lua : 数据库模型类。可自行建表后通过daos实例连接。如需迁移建表需要编写迁移文件。")],-1),_={href:"https://github.com/SayNop/kong_jwt_url_auth",target:"_blank",rel:"noopener noreferrer"},w=t(`<h3 id="框架搭建" tabindex="-1"><a class="header-anchor" href="#框架搭建" aria-hidden="true">#</a> 框架搭建</h3><p>一个最基本的kong插件需包含两个文件 <em>handler.lua</em> 与<em>schema.lua</em></p><ul><li>handler的开发需按照以下格式进行</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 必要的导包</span>
<span class="token keyword">local</span> kong <span class="token operator">=</span> kong
<span class="token keyword">local</span> BasePlugin <span class="token operator">=</span> require <span class="token string">&quot;kong.plugins.base_plugin&quot;</span>

<span class="token comment">-- 声明自定义handler类</span>
<span class="token keyword">local</span> RequestAuthHandler <span class="token operator">=</span> BasePlugin<span class="token punctuation">:</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">-- 定义优先级与版本号</span>
RequestAuthHandler<span class="token punctuation">.</span>PRIORITY <span class="token operator">=</span> <span class="token number">800</span>
RequestAuthHandler<span class="token punctuation">.</span>VERSION <span class="token operator">=</span> <span class="token string">&quot;1.0.0&quot;</span>

<span class="token comment">-- 自定义handler的new方法</span>
<span class="token keyword">function</span> RequestAuthHandler<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">-- 传入插件名</span>
    RequestAuthHandler<span class="token punctuation">.</span>super<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">&quot;kong_jwt_url_auth&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>


<span class="token comment">-- 主逻辑，access方法处理请求到来时的逻辑</span>
<span class="token keyword">function</span> RequestAuthHandler<span class="token punctuation">:</span><span class="token function">access</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>
    RequestAuthHandler<span class="token punctuation">.</span>super<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  	<span class="token comment">-- 以下是主逻辑</span>
    <span class="token comment">-- 例如：pass options request</span>
    <span class="token keyword">if</span> kong<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">get_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;OPTIONS&quot;</span> <span class="token keyword">then</span>
      <span class="token keyword">return</span>
    <span class="token keyword">end</span>
  
<span class="token keyword">end</span>

<span class="token comment">-- 返回自定义handler</span>
<span class="token keyword">return</span> RequestAuthHandler

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>schema中的配置信息作为handler实例的传入参数。可通过传入参数调用配置信息<code>fields</code>中的预定义变量。配置项在绑定服务时传入了数据库，如后续更新，需要 <strong>删除plugins表中对应的项后重新进行绑定</strong> (<code>delete from plugins where name = &#39;&lt;plugin_name&gt;&#39; ;</code>)。</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> typedefs <span class="token operator">=</span> require <span class="token string">&quot;kong.db.schema.typedefs&quot;</span>

<span class="token keyword">return</span> <span class="token punctuation">{</span>
    name <span class="token operator">=</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span>  <span class="token comment">-- 插件名</span>
    fields <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span> consumer <span class="token operator">=</span> typedefs<span class="token punctuation">.</span>no_consumer <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">-- 插件的消费者</span>
        <span class="token punctuation">{</span> protocols <span class="token operator">=</span> typedefs<span class="token punctuation">.</span>protocols_http <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">-- 插件协议</span>
        <span class="token punctuation">{</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
            type <span class="token operator">=</span> <span class="token string">&quot;record&quot;</span><span class="token punctuation">,</span>
            <span class="token comment">-- handler的配置信息 或 所需要的预定义变量</span>
            fields <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token punctuation">{</span>
                    <span class="token comment">-- jwt secret key</span>
                    secret_key <span class="token operator">=</span> <span class="token punctuation">{</span> type <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> default <span class="token operator">=</span> <span class="token string">&quot;1234567891234567891234567891234567891234567&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span> 
                    <span class="token comment">-- sign deliver, iss, not check</span>
                    key_claim_name <span class="token operator">=</span> <span class="token punctuation">{</span> type <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> default <span class="token operator">=</span> <span class="token string">&quot;iss&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="权限认证" tabindex="-1"><a class="header-anchor" href="#权限认证" aria-hidden="true">#</a> 权限认证</h3>`,7),f=n("em",null,"jwt",-1),q={href:"https://github.com/Kong/kong/blob/master/kong/plugins/jwt/jwt_parser.lua",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>在handler调用 <em>jwt</em> 插件内的认证组件并编写token认证逻辑</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 导入所需内容</span>
<span class="token keyword">local</span> get_header <span class="token operator">=</span> kong<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get_header
<span class="token keyword">local</span> set_header <span class="token operator">=</span> kong<span class="token punctuation">.</span>service<span class="token punctuation">.</span>request<span class="token punctuation">.</span>set_header
<span class="token keyword">local</span> jwt_decoder <span class="token operator">=</span> require <span class="token string">&quot;kong.plugins.jwt.jwt_parser&quot;</span>

<span class="token comment">-- 省略</span>

<span class="token keyword">function</span> RequestAuthHandler<span class="token punctuation">:</span><span class="token function">access</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>
    RequestAuthHandler<span class="token punctuation">.</span>super<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
    <span class="token comment">-- pass options request</span>
    <span class="token keyword">if</span> kong<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">get_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;OPTIONS&quot;</span> <span class="token keyword">then</span>
      <span class="token keyword">return</span>
    <span class="token keyword">end</span>

    <span class="token comment">-- 0. 获取token</span>
    <span class="token keyword">local</span> bear_token <span class="token operator">=</span> <span class="token function">get_header</span><span class="token punctuation">(</span><span class="token string">&quot;authorization&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bear_token <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">or</span> string<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>bear_token<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token string">&quot;Bearer &quot;</span><span class="token punctuation">)</span> <span class="token keyword">then</span>
        kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token string">&quot;miss bearer&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> kong<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> code <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> msg <span class="token operator">=</span> <span class="token string">&quot;UnAuthorized&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>
    <span class="token keyword">local</span> token <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>bear_token<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token comment">-- 1. 解码token</span>
  	<span class="token comment">-- 1.1 base64解码token</span>
    <span class="token keyword">local</span> jwt<span class="token punctuation">,</span> err <span class="token operator">=</span> jwt_decoder<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token keyword">then</span>
      <span class="token comment">-- 解码失败，token有问题</span>
      kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token string">&quot;decode error&quot;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> kong<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> code <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> msg <span class="token operator">=</span> <span class="token string">&quot;UnAuthorized&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>

  	<span class="token comment">-- 2. 验证</span>
    <span class="token comment">-- 2.1 获取payload</span>
    <span class="token keyword">local</span> claims <span class="token operator">=</span> jwt<span class="token punctuation">.</span>claims
    <span class="token comment">-- 2.2 获取token header</span>
    <span class="token keyword">local</span> header <span class="token operator">=</span> jwt<span class="token punctuation">.</span>header
    <span class="token comment">-- 2.3 获取私钥</span>
    <span class="token comment">-- local secret_key = &quot;1234567891234567891234567891234567891234567&quot;</span>
    kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>secret_key<span class="token punctuation">)</span>
    <span class="token comment">-- 2.4 ***** 验签 *****</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> jwt<span class="token punctuation">:</span><span class="token function">verify_signature</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>secret_key<span class="token punctuation">)</span> <span class="token keyword">then</span>
        kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token string">&quot;check secret fail&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> kong<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> code <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> msg <span class="token operator">=</span> <span class="token string">&quot;UnAuthorized&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>
    <span class="token comment">-- 2.5 ***** 验证token有效期 *****</span>
    <span class="token keyword">local</span> ok_claims<span class="token punctuation">,</span> errors <span class="token operator">=</span> jwt<span class="token punctuation">:</span><span class="token function">verify_registered_claims</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>claims_to_verify<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> ok_claims <span class="token keyword">then</span>
        kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span>
        <span class="token keyword">return</span> kong<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> code <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> msg <span class="token operator">=</span> <span class="token string">&quot;Token Expired&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>

    <span class="token comment">-- 2.6 获取payload中的用户标识符</span>
    <span class="token keyword">local</span> phone <span class="token operator">=</span> claims<span class="token punctuation">[</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> phone <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
        kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token string">&quot;miss phone in payload&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> kong<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> code <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> msg <span class="token operator">=</span> <span class="token string">&quot;UnAuthorized&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>
    kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span>

  	<span class="token comment">-- 3. 将用户标识符塞入header，方便后端服务查询对应用户信息</span>
    <span class="token function">set_header</span><span class="token punctuation">(</span><span class="token string">&quot;x-auth-phone&quot;</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span>

<span class="token keyword">end</span>

<span class="token comment">-- 省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong></p><p>开发过程中可使用<code> kong.log.inspect()</code>进行关键信息打印，对复杂类型会进行格式化处理（性能开销），在生产环境中需要移除或使用<code>kong.log.notice()</code>。</p><h3 id="数据库查询" tabindex="-1"><a class="header-anchor" href="#数据库查询" aria-hidden="true">#</a> 数据库查询</h3><p>通过 <em>daos.lua</em> 中对目标表的 <em>daos实例（模型类）</em> 声明，以便在 <em>handler.lua</em> 中进行数据库查询。</p><ul><li><p>关于数据库表生成的两种方式（与后端开发类似）：</p><ul><li><p>可通过 <em>postgresql ctl</em> 在kong连接的数据库中创建目标table，再根据table的字段定义daos实例</p><div class="macos language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> login_user<span class="token punctuation">(</span>
phone <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
password <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token keyword">level</span> <span class="token keyword">smallint</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> login_user <span class="token punctuation">(</span>phone<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token keyword">level</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;13011111111&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;alice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;88888888&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> api_mgr<span class="token punctuation">(</span>
sign <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  <span class="token comment">-- kong插件只可查询主键，主键需包含查询条件</span>
path <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
service <span class="token keyword">smallint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
auth_level <span class="token keyword">smallint</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> api_mgr <span class="token punctuation">(</span>sign<span class="token punctuation">,</span> path<span class="token punctuation">,</span> service<span class="token punctuation">,</span> auth_level<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;0/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> api_mgr <span class="token punctuation">(</span>sign<span class="token punctuation">,</span> path<span class="token punctuation">,</span> service<span class="token punctuation">,</span> auth_level<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;0/auth&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/auth&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> api_mgr <span class="token punctuation">(</span>sign<span class="token punctuation">,</span> path<span class="token punctuation">,</span> service<span class="token punctuation">,</span> auth_level<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;0/admin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/admin&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> api_mgr <span class="token punctuation">(</span>sign<span class="token punctuation">,</span> path<span class="token punctuation">,</span> service<span class="token punctuation">,</span> auth_level<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;1/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> api_mgr <span class="token punctuation">(</span>sign<span class="token punctuation">,</span> path<span class="token punctuation">,</span> service<span class="token punctuation">,</span> auth_level<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;1/auth&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/auth&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> api_mgr <span class="token punctuation">(</span>sign<span class="token punctuation">,</span> path<span class="token punctuation">,</span> service<span class="token punctuation">,</span> auth_level<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;1/admin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/admin&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <em>daos.lua</em> 编写完成后，编写迁移文件 <em>migrations/init.lua</em> 与 <em>migrations/000_base_&lt;plugin_name&gt;.lua</em> 。通过kong的迁移命令在数据库中生成table。</p></li></ul></li><li><p>daos.lua 实例</p></li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      primary_key <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;phone&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  
      name <span class="token operator">=</span> <span class="token string">&quot;login_user&quot;</span><span class="token punctuation">,</span>  <span class="token comment">-- 数据表名称</span>
      endpoint_key <span class="token operator">=</span> <span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span>  <span class="token comment">-- handler中的查询字段</span>
      cache_key <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;phone&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">-- 缓存字段</span>
      fields <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token comment">-- 实例中的type为lua基本类型</span>
            <span class="token punctuation">{</span> phone <span class="token operator">=</span> <span class="token punctuation">{</span> type <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">-- 主键 手机号作为用户唯一标识符</span>
            <span class="token punctuation">{</span> username <span class="token operator">=</span> <span class="token punctuation">{</span> type <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> password <span class="token operator">=</span> <span class="token punctuation">{</span> type <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> level <span class="token operator">=</span> <span class="token punctuation">{</span> type <span class="token operator">=</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> default <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">-- 用户权限等级</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>handler中的数据库查询核心代码</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- payload中获取用户标识符</span>
<span class="token keyword">local</span> phone <span class="token operator">=</span> claims<span class="token punctuation">[</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> phone <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
  kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token string">&quot;miss phone in payload&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> kong<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> code <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> msg <span class="token operator">=</span> <span class="token string">&quot;UnAuthorized&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span>

<span class="token comment">-- 通过用户标识符查询用户对象 select用于查询主键</span>
<span class="token keyword">local</span> user<span class="token punctuation">,</span> err <span class="token operator">=</span> kong<span class="token punctuation">.</span>db<span class="token punctuation">.</span>login_user<span class="token punctuation">:</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">{</span> phone <span class="token operator">=</span> phone <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token keyword">then</span>
  <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token keyword">if</span> <span class="token keyword">not</span> user <span class="token keyword">then</span>
  kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token string">&quot;login user not found&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> kong<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> code <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> msg <span class="token operator">=</span> <span class="token string">&quot;UnAuthorized&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- 通过用户对象获取用户权限等级</span>
<span class="token function">set_header</span><span class="token punctuation">(</span><span class="token string">&quot;x-auth-level&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>level<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="账号多登录的判断" tabindex="-1"><a class="header-anchor" href="#账号多登录的判断" aria-hidden="true">#</a> 账号多登录的判断</h3>`,11),A=n("br",null,null,-1),T={href:"https://juejin.cn/post/6844904197662441486",target:"_blank",rel:"noopener noreferrer"},L=t(`<ul><li>服务端</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 服务端redis支持</span>
<span class="token comment"># sudo pip3 install redis==3.5.3</span>

<span class="token comment"># ** 登录接口中的判断 **</span>
<span class="token comment"># 查询该用户之前是否存在有效期内的token</span>
old_token <span class="token operator">=</span> redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;login:&#39;</span> <span class="token operator">+</span> phone<span class="token punctuation">)</span>
<span class="token comment"># 该用户存在已登录的token，将旧token标记为失效token</span>
<span class="token keyword">if</span> old_token<span class="token punctuation">:</span>
    <span class="token comment"># 在token的最大过期时间内，该token都将标记为失效token</span>
    redis_conn<span class="token punctuation">.</span>setex<span class="token punctuation">(</span><span class="token string">&#39;conflict:&#39;</span> <span class="token operator">+</span> old_token<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># 记录该用户的最新token，下一次出现重复登录时可获取到旧token</span>
redis_conn<span class="token punctuation">.</span>setex<span class="token punctuation">(</span><span class="token string">&#39;login:&#39;</span> <span class="token operator">+</span> phone<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>网关</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> redis <span class="token operator">=</span> require <span class="token string">&quot;resty.redis&quot;</span>
<span class="token keyword">local</span> redis_conn <span class="token operator">=</span> redis<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
redis_conn<span class="token punctuation">:</span><span class="token function">set_timeouts</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">-- 1 sec</span>

<span class="token keyword">local</span> ok<span class="token punctuation">,</span> err <span class="token operator">=</span> redis_conn<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span>redisHost<span class="token punctuation">,</span> redisPort<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span>
    kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;failed to connect redis: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token keyword">else</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>redisPwd <span class="token operator">~=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">then</span>
        <span class="token keyword">local</span> auth<span class="token punctuation">,</span> err <span class="token operator">=</span> redis_conn<span class="token punctuation">:</span><span class="token function">auth</span><span class="token punctuation">(</span>redisPwd<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> auth <span class="token keyword">then</span>
            kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;failed to authenticate: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>

    <span class="token keyword">local</span> conflict_res<span class="token punctuation">,</span> err <span class="token operator">=</span> redis_conn<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;conflict&#39;</span><span class="token operator">..</span>token<span class="token punctuation">)</span>
    <span class="token keyword">if</span> conflict_res <span class="token operator">~=</span> ngx<span class="token punctuation">.</span>null <span class="token keyword">then</span>
        kong<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">err</span><span class="token punctuation">(</span><span class="token string">&quot;user &quot;</span><span class="token operator">..</span>phone<span class="token operator">..</span> <span class="token string">&quot;  token conflict&quot;</span><span class="token punctuation">)</span>
        kong<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> code <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> msg <span class="token operator">=</span> <span class="token string">&quot;Token Conflict&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token keyword">end</span>
    <span class="token comment">-- 使用连接池</span>
    <span class="token keyword">local</span> ok<span class="token punctuation">,</span> err <span class="token operator">=</span> redis_conn<span class="token punctuation">:</span><span class="token function">set_keepalive</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">-- (超时时间 ms, 连接池大小)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="服务端适配" tabindex="-1"><a class="header-anchor" href="#服务端适配" aria-hidden="true">#</a> 服务端适配</h2><h3 id="服务端生成token" tabindex="-1"><a class="header-anchor" href="#服务端生成token" aria-hidden="true">#</a> 服务端生成token</h3><p>通过PyJWT包进行token的生成，需要在payload中添加 <code>exp</code>（过期时间）与<code>nbf</code>（生成时间）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> jwt

secret_key <span class="token operator">=</span> <span class="token string">&#39;1234567891234567891234567891234567891234567&#39;</span>
now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span>
expiry <span class="token operator">=</span> now <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment"># 传入payload，私钥，加密算法</span>
token <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;phone&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;13011111111&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;exp&#39;</span><span class="token punctuation">:</span> expiry<span class="token punctuation">,</span> <span class="token string">&#39;nbf&#39;</span><span class="token punctuation">:</span> now<span class="token punctuation">}</span><span class="token punctuation">,</span> secret_key<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">&#39;HS256&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务端对postgresql的支持" tabindex="-1"><a class="header-anchor" href="#服务端对postgresql的支持" aria-hidden="true">#</a> 服务端对Postgresql的支持</h3><ul><li><p>通过<code>sudo pip3 install Flask-SQLAlchemy==2.5.1</code>安装Flask-SQLAlchemy。</p><ul><li>问题1： <em>src/greenlet/greenlet.cpp:16:20: 致命错误：Python.h：没有那个文件或目录</em> 。解决办法： <code>sudo yum install -y python3-devel</code>安装</li><li>问题2： <em>inline T borrow() const G_NOEXCEPT</em> 即gcc报错。 解决办法：升级pip <code>python3 -m pip install --upgrade pip</code></li><li>问题3： 服务端报错<em>ModuleNotFoundError: No module named &#39;psycopg2&#39;</em> 。 解决办法： 安装psycopg2</li></ul></li><li><p>通过<code>sudo pip3 install psycopg2-binary </code>安装psycopg2。</p><ul><li>问题： <em>Error: pg_config executable not found.</em> 。 解决办法： 确保安装 <em>postgresql96-devel</em> 后，在环境变量PATH中指明pg_config的位置 <em>/usr/pgsql-9.6/bin</em></li></ul></li><li><p>Flask连接Postgresql</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> jwt
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> request
<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy

<span class="token comment"># 连接数据库</span>
app_a <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app_a<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;postgresql://kong:1234@127.0.0.1/kong&#39;</span>
app_a<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;SQLALCHEMY_COMMIT_ON_TEARDOWN&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app_a<span class="token punctuation">)</span>

<span class="token comment"># 模型类</span>
<span class="token keyword">class</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&#39;login_user&#39;</span>
    phone <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token string">&#39;手机号&#39;</span><span class="token punctuation">)</span>
    username <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token string">&#39;昵称&#39;</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token string">&#39;密码&#39;</span><span class="token punctuation">)</span>
    level <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>SMALLINT<span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token string">&#39;用户权限&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&lt;User %r&gt;&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>phone


<span class="token decorator annotation punctuation">@app_a<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/auth&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    phone <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>phone<span class="token punctuation">,</span> password<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Missing required params!&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment"># 查库进行账号认证</span>
    user <span class="token operator">=</span> LoginUser<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>phone<span class="token operator">=</span>phone<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> user<span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;User not exist!&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> user<span class="token punctuation">.</span>password <span class="token operator">!=</span> password<span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Password incorrect!&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;server A - level 1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;header&#39;</span><span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment"># # flask --app a run</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app_a<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务端完整代码" tabindex="-1"><a class="header-anchor" href="#服务端完整代码" aria-hidden="true">#</a> 服务端完整代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> jwt
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta
<span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedis
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> request<span class="token punctuation">,</span> current_app
<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy

<span class="token comment"># 连接redis与postgresql</span>
app_a <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app_a<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;postgresql://kong:1234@127.0.0.1/kong&#39;</span>
app_a<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;SQLALCHEMY_COMMIT_ON_TEARDOWN&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app_a<span class="token punctuation">)</span>
app_a<span class="token punctuation">.</span>redis_master <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Role</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&#39;api_mgr&#39;</span>
    sign <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token string">&#39;api签名&#39;</span><span class="token punctuation">)</span>
    path <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token string">&#39;路径&#39;</span><span class="token punctuation">)</span>
    service <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>SMALLINT<span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token string">&#39;服务ID&#39;</span><span class="token punctuation">)</span>
    auth_level <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>SMALLINT<span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token string">&#39;api权限&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&lt;Api %r&gt;&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sign


<span class="token keyword">class</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&#39;login_user&#39;</span>
    phone <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token string">&#39;手机号&#39;</span><span class="token punctuation">)</span>
    username <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token string">&#39;昵称&#39;</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token string">&#39;密码&#39;</span><span class="token punctuation">)</span>
    level <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>SMALLINT<span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token string">&#39;用户权限&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&lt;User %r&gt;&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>phone


<span class="token decorator annotation punctuation">@app_a<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># token生成</span>
    secret_key <span class="token operator">=</span> <span class="token string">&#39;1234567891234567891234567891234567891234567&#39;</span>
    now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span>
    expiry <span class="token operator">=</span> now <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
    token <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;phone&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;13011111111&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;exp&#39;</span><span class="token punctuation">:</span> expiry<span class="token punctuation">,</span> <span class="token string">&#39;nbf&#39;</span><span class="token punctuation">:</span> now<span class="token punctuation">}</span><span class="token punctuation">,</span> secret_key<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">&#39;HS256&#39;</span><span class="token punctuation">)</span>

    <span class="token comment"># 测试对postgresql的支持</span>
    users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;phone&#39;</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>phone<span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>username<span class="token punctuation">}</span> <span class="token keyword">for</span> user <span class="token keyword">in</span> LoginUser<span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token comment"># 账号多登录的处理</span>
    old_token <span class="token operator">=</span> current_app<span class="token punctuation">.</span>redis_master<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;login:13011111111&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> old_token<span class="token punctuation">:</span>
        current_app<span class="token punctuation">.</span>redis_master<span class="token punctuation">.</span>setex<span class="token punctuation">(</span><span class="token string">&#39;conflict:&#39;</span> <span class="token operator">+</span> old_token<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    current_app<span class="token punctuation">.</span>redis_master<span class="token punctuation">.</span>setex<span class="token punctuation">(</span><span class="token string">&#39;login:13011111111&#39;</span><span class="token punctuation">,</span> <span class="token number">3600</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> token1<span class="token punctuation">)</span>

    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string">&#39;success&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
        <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;server A - level 0&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;header&#39;</span><span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">&#39;token&#39;</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>
            <span class="token string">&#39;users&#39;</span><span class="token punctuation">:</span> users
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app_a<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/auth&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    phone <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>phone<span class="token punctuation">,</span> password<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Missing required params!&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment"># 测试对postgresql的支持</span>
    user <span class="token operator">=</span> LoginUser<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>phone<span class="token operator">=</span>phone<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> user<span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;User not exist!&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> user<span class="token punctuation">.</span>password <span class="token operator">!=</span> password<span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Password incorrect!&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;server A - level 1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;header&#39;</span><span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app_a<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/admin&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 接口权限与用户权限不匹配的测试</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;server A - level 2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;header&#39;</span><span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment"># # flask --app a run</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app_a<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="部署至生产服务器" tabindex="-1"><a class="header-anchor" href="#部署至生产服务器" aria-hidden="true">#</a> 部署至生产服务器</h2><h3 id="多服务的多后端域名部署" tabindex="-1"><a class="header-anchor" href="#多服务的多后端域名部署" aria-hidden="true">#</a> 多服务的多后端域名部署</h3><p>当设置多个不同的后端域名时（如协议不一致时）</p><ul><li><p>客户端请求服务通过 <code>api.*.*.com</code> ，nginx监听80端口后转发到服务端8000端口来传入网关</p></li><li><p>由于此时option请求无法到达后端，需在nginx统一配置跨域。此时后端无需再配置跨域信息</p></li></ul><div class="language-systemd line-numbers-mode" data-ext="systemd"><pre class="language-systemd"><code>    server {
        listen       80;
        server_name  api.&lt;service_sign&gt;.*.com;

        location / {

            add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39; always;
            add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, PUT, DELETE, PATCH,OPTIONS&#39;;
            add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#39;;
            add_header &#39;Access-Control-Expose-Headers&#39; &#39;Content-Length,Content-Range&#39;;
            if ($request_method <span class="token punctuation">=</span> <span class="token value attr-value">OPTIONS ) {</span>
                return 204;
            }
            proxy_read_timeout 300;
            proxy_pass http://127.0.0.1:8000;
            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port 80;
            proxy_set_header Host $host;
       }
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多服务的单后端域名部署" tabindex="-1"><a class="header-anchor" href="#多服务的单后端域名部署" aria-hidden="true">#</a> 多服务的单后端域名部署</h3><p>当设置一个统一域名，通过地址区分不同服务（协议必须统一）。如 <code>api.*.com/a/*</code> 用于请求A服务， <code>api.*.com/b/*</code> 用于请求B服务</p><ul><li><p>如多域名一样配置好域名的nginx</p></li><li><p>配置kong通过路径进行路由转发</p></li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">--url</span> http://localhost:8001/services/<span class="token operator">&lt;</span>service_name<span class="token operator">&gt;</span>/routes <span class="token parameter variable">--data</span> <span class="token string">&#39;name=&lt;router_name&gt;&#39;</span> <span class="token parameter variable">--data</span> <span class="token string">&#39;hosts[]=api.*.com&#39;</span> <span class="token parameter variable">--data</span> <span class="token string">&#39;paths[]=/&lt;service_sign&gt;/&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>插件内通过 <code>kong.router.get_route()</code> 可直接判断需要转发的目标服务</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token punctuation">{</span>
    created_at <span class="token operator">=</span> <span class="token operator">&lt;</span>route_create_timestamp<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    hosts <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;api.*.com&quot;</span><span class="token punctuation">,</span>
        <span class="token operator">&lt;</span>metatable<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>
            __class <span class="token operator">=</span> <span class="token punctuation">{</span>
                __base <span class="token operator">=</span> <span class="token operator">&lt;</span>table <span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
                __init <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token keyword">function</span> <span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
                __name <span class="token operator">=</span> <span class="token string">&quot;PostgresArray&quot;</span><span class="token punctuation">,</span>
                <span class="token operator">&lt;</span>metatable<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
                    __call <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token keyword">function</span> <span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
                    __index <span class="token operator">=</span> <span class="token operator">&lt;</span>table <span class="token number">1</span><span class="token operator">&gt;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            __index <span class="token operator">=</span> <span class="token operator">&lt;</span>table <span class="token number">1</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    id <span class="token operator">=</span> <span class="token string">&quot;&lt;route_id&gt;&quot;</span><span class="token punctuation">,</span>
    name <span class="token operator">=</span> <span class="token string">&quot;&lt;route_name&gt;&quot;</span><span class="token punctuation">,</span>
    paths <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;/&lt;service_sign&gt;/&quot;</span><span class="token punctuation">,</span>
        <span class="token operator">&lt;</span>metatable<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>table <span class="token number">1</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    preserve_host <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>
    protocols <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https&quot;</span><span class="token punctuation">,</span>
        <span class="token operator">&lt;</span>metatable<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            __index <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token keyword">function</span> <span class="token number">3</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    regex_priority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    service <span class="token operator">=</span> <span class="token punctuation">{</span>
        id <span class="token operator">=</span> <span class="token string">&quot;&lt;service_id&gt;&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    strip_path <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
    updated_at <span class="token operator">=</span> <span class="token operator">&lt;</span>route_update_timestamp<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-- 通过<code>kong.request.get_path()</code>获取路径，与路由的路径相剪以获取真实请求路径。根据接口管理判断请求路径是否存在。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 举例</span>
prefix_path <span class="token operator">=</span> kong<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">get_route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>paths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">-- /service_a/</span>
path <span class="token operator">=</span> kong<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">get_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">-- /service_a/test</span>

<span class="token comment">-- 服务端得到的真实请求地址为 /test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插件开发中遇到的问题" tabindex="-1"><a class="header-anchor" href="#插件开发中遇到的问题" aria-hidden="true">#</a> 插件开发中遇到的问题</h2><ul><li>在编辑完schema.lua后，加载插件时出现以下问题</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[error] 2546#0: init_by_lua error: /usr/local/share/lua/5.1/kong/init.lua:402: error loading plugin schemas: on plugin &#39;kong_jwt_url_auth&#39;: [postgres] schema violation (fields.3: {
    fields = {
        [2] = {
            description = &quot;unknown field&quot;
        }
    }
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由报错信息可知，<code>descrption</code>字段不被支持。1.x版本的Kong在schema的配置中不支持descrption字段，新版本支持。插件源码中含有<code>descrption</code>字段。</p>`,30);function E(R,S){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("kong需要数据版本大于9.5，yum直接安装的版本为9.2.24"),n("a",r,[s("参考文章1"),e(a)]),n("a",k,[s("参考文章2"),e(a)])]),d,n("p",null,[s("参考"),n("a",v,[s("官方文档"),e(a)])]),m,n("p",null,[n("a",b,[s("参考文章"),e(a)])]),g,n("p",null,[s("kong插件的文件结构"),n("a",h,[s("文档"),e(a)])]),y,n("p",null,[s("下面将用jwt token的认证为例，说明一个接口认证插件的开发流程，源码"),n("a",_,[s("在此"),e(a)]),s("。")]),w,n("p",null,[s("使用kong官方插件 "),f,s(" 中的jwt认证组件"),n("a",q,[s("jwt_parser.lua"),e(a)]),s("进行验证")]),x,n("p",null,[s("通过redis缓存token，kong插件查询token后进行判断"),A,s(" redis连接代码参考"),n("a",T,[s("文章"),e(a)])]),L])}const C=p(i,[["render",E],["__file","008.html.vue"]]);export{C as default};
