import{_ as p,r as o,o as c,c as i,a as n,b as s,d as e,e as a}from"./app-61da9cd5.js";const l="/assets/imgs/020/01.png",u="/assets/imgs/020/02.png",r="/assets/imgs/020/03.png",k="/assets/imgs/020/04.png",d="/assets/imgs/020/05.png",m="/assets/imgs/020/06.png",v="/assets/imgs/020/07.png",b="/assets/imgs/020/08.png",g={},y=a('<h2 id="原型" tabindex="-1"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h2><ul><li><p><code>__proto__</code>：在js中，每个实例对象都拥有 <code>__proto__</code>（隐式原型），<strong>实例的 <code>__proto__.constructor</code> 指明该实例创建时使用的构造方法</strong> 。如下所示</p><p><img src="'+l+'" alt="proto"></p></li><li><p><code>prototype</code>: 函数除了拥有<code>__proto__</code>，还额外拥有<code>prototype</code>（显示原型）</p><p><img src="'+u+'" alt="proto"></p></li></ul><h2 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h2><p>在了解原型链前，先了解js中的构造方法。构造方法也是函数，因此也拥有 <code>prototype</code>。构造函数首字母通常大写，表示可以用 <code>new</code> 创建实例</p><p>下面介绍两种构造函数编写方式</p>',5),f=a(`<li><p>传统方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">introduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi, I&#39;m </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下。使用该方法 <code>new</code> 出来的对象，其 <code>__proto__.constructor</code> 指向构造函数</p><p><img src="`+r+'" alt="构造方法"></p><p>通过以上例子，可以得到如下结论（Tips：实例通常用到<code>__proto__</code>，构造方法通常用到<code>prototype</code>）</p><ul><li><p><strong>重点1：实例的<code>__proto__.constructor</code> 与 构造函数的 <code>prototype.constructor</code> 指向构造函数自己</strong>，即 <code>otto.__proto__.constructor === Person</code></p></li><li><p><strong>重点2：实例的 <code>__proto__</code> 指向构造函数的 <code>prototype</code></strong></p></li><li><p><strong>重点3：</strong> 构造函数的<code>prototype.__proto__</code>指向父类的 <code>prototype</code>，即 <strong><code>Person.prototype.__proto__ === Object.prototype</code></strong></p></li><li><p><code>this</code>方式绑定的方法为实例私有，实例自己修改后不会影响其他实例，可理解为实例方法</p><p><img src="'+k+'" alt="实例方法"></p></li><li><p><strong>重点4：绑定在构造方法的 <code>prototype</code> 内的方法是其所有实例共享的，实例可调用该方法。且在该方法修改时，实例调用也会对应变动</strong>。可理解为随动的类方法</p><p><img src="'+d+'" alt="类方法"></p></li></ul></li>',1),w={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor",target:"_blank",rel:"noopener noreferrer"},_=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好，我的名字是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> otto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Otto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

otto<span class="token punctuation">.</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 你好，我的名字是 Otto</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下。此时 <code>class</code> 中声明的方法，都会绑定到构造方法的 <code>prototype</code> 中，即所有实例共享</p><p><img src="`+m+'" alt="ES6构造方法"></p>',3),h=a(`<h2 id="考虑继承关系时声明类" tabindex="-1"><a class="header-anchor" href="#考虑继承关系时声明类" aria-hidden="true">#</a> 考虑继承关系时声明类</h2><p>需要<strong>声明某个类</strong>时，需按照以下流程</p><ul><li>明确其父类并声明</li><li>声明子类（自身）并设置继承关系</li><li>保证子类原型指向与构造函数指向</li></ul><p>注意以下两点</p><ul><li>在新建一个构造方法时，其 <code>prototype.constructor</code> 默认指向自己，即之前提到的重点2默认是成立的</li><li>若需要多个构造方法，其中存在继承关系，则需要保证 <code>&lt;子类&gt;.prototype.__proto__ === &lt;父类&gt;.prototype</code>。采用传统方式需要手动处理，而在处理原型指向后，会影响到重点2构造函数的指向，也需对构造方法指向手动处理</li></ul><p>下面以浏览器中 <em>Element -&gt; HTMLElement -&gt; HTMLHtmlElement / HTMLDivElement / ... (html标签)</em> 的继承关系为例（ Tips：通过重点2查看父类， <code>getParent = (cls) =&gt; {return cls.prototype.__proto__.constructor}</code> ）</p><ul><li><p>传统方式</p><ul><li><p>创建父类<code>Element</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">Element</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// \`Element = \` 是利用全局变量自动绑定到全局的特性</span>
<span class="token comment">// 在补环境时，\`window = global; delete global;\`</span>
<span class="token comment">// 这样声明 Element，会实现 window.Element</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建子类<code>HTMLElement</code>继承自父类<code>Element</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">HTMLElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">HTMLElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Element</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment">// 继承逻辑，调用父类构造函数。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置原型链中的指向关系。如果不进行此步骤。<code>HTMLElement</code>的原型链将指向<code>Object</code>，构造方法依然指向自己</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一</span>
<span class="token comment">// 设置子类原型指向，以实现 HTMLElement.prototype.__proto__ === Element.prototype</span>
<span class="token class-name">HTMLHtmlElement</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">HTMLElement</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token comment">// 保证构造函数指向自己。由于子类原型通过父类原型创建，此时子类原型中的构造方法与父类一致，即指向父类自己，需要修改</span>
<span class="token class-name">HTMLHtmlElement</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> HTMLHtmlElement

<span class="token comment">// 方法二 同时保证子类原型指向与构造函数指向的设置方法</span>
<span class="token class-name">HTMLElement</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">constructor</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span>
        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>class方式，自动实现了原型指向问题，无需额外设置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span>Element <span class="token operator">=</span> Element  <span class="token comment">// 需要手动绑定到 window 上，不然 window.Element 会 undefined</span>
<span class="token keyword">class</span> <span class="token class-name">HTMLElement</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>  <span class="token comment">// 声明父类</span>
    <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 使用父类构造方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span>HTMLElement <span class="token operator">=</span> Element

<span class="token comment">// 检测</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">HTMLElement</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token comment">// 应该为false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">HTMLElement</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Element</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token comment">// 应该为true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">HTMLElement</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> HTMLElement<span class="token punctuation">)</span>  <span class="token comment">// 应该为true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>Element<span class="token punctuation">)</span>  <span class="token comment">// 不应该为undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 当前输出 es6 class 模式。需要输出 function native code，可使用toString检测函数处理 safeFunction(Element)来过检测</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>常见浏览器内置的继承关系</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Object
├── EventTarget
│     ├── Node
│     │    ├── Document
│     │    │     └── HTMLDocument
│     │    ├── DocumentFragment
│     │    ├── Element
│     │    │     ├── HTMLElement
│     │    │     │     ├── HTMLHtmlElement
│     │    │     │     ├── HTMLCanvasElement
│     │    │     │     └── ...(html标签)
│     │    │     └── SVGElement
│     │    ├── CharacterData
│     │    │     ├── Text
│     │    │     └── Comment
│     │    └── ...
│     ├── XMLHttpRequestEventTarget
│     │    └── XMLHttpRequest
│     ├── Window
│     ├── Screen (window.screen)
│     ├── Performance
│     ├── Clipboard
│     ├── MediaDevices
│     └── ...
│
├── Navigator (window.navigator)
├── History (window.history)
├── Location (window.location) 
├── Storage (localStorage / sessionStorage)
├── Crypto
├── AbortController
└── ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="原型链检测" tabindex="-1"><a class="header-anchor" href="#原型链检测" aria-hidden="true">#</a> 原型链检测</h2><ul><li><p>常规补环境。常常使用以下代码进行，其中 <code>userAgent</code> 是 <code>navigator</code> 的属性，相当于构造方法中通过 <code>this</code> 绑定到实例上的实例私有属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>navigator <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
navigator<span class="token punctuation">.</span>userAgent <span class="token operator">=</span> <span class="token string">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>检测代码。浏览器环境中，<code>navigator</code> 是通过 <code>Navigator</code> 构造方法 <code>new</code> 出来的实例，而 <code>userAgent</code> 是 <code>Navigator.prototype</code> 内的属性，对于 <code>navigator</code> 实例来说是共享属性。以下检测代码会无法通过</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 浏览器环境应该为false，userAgent 不是 navigator 实例的私有属性。而是原型链上的属性（构造方法上的属性）</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;userAgent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;invalid&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pass&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// undefined 才通过检测</span>
<span class="token punctuation">}</span>

<span class="token comment">// 检测是否有属性描述符。原型链上的属性没有描述符</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>navigator<span class="token punctuation">,</span> <span class="token string">&#39;userAgent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;invalid&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pass&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// undefined 才通过检测</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>原型链检测的补环境方法</p><ul><li><p>使用构造方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 编写构造函数</span>
<span class="token function-variable function">Navigator</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token comment">// 2. 原型链属性补充</span>
<span class="token class-name">Navigator</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">userAgent</span><span class="token operator">:</span> <span class="token string">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 3. 实例化</span>
navigator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Navigator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 4. 绑定window。Tips: 在浏览器中，所有定义的全局内容，都是window的属性</span>
window<span class="token punctuation">.</span>Navigator <span class="token operator">=</span> Navigator

<span class="token comment">// eg: 在浏览器中查看原型 如 document.documentElement.__proto__，指向了HTMLHtmlElement</span>
<span class="token comment">// 而 HTMLHtmlElement 继承自 HTMLElement ，HTMLElement 继承自 Element</span>
window<span class="token punctuation">.</span><span class="token function-variable function">Element</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function-variable function">HTMLElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">HTMLElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Element</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token class-name">HTMLElement</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token comment">// 设置子类原型指向，以实现 HTMLElement.prototype.__proto__ === Element.prototype。</span>
<span class="token class-name">HTMLElement</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> HTMLElement  <span class="token comment">// 保证构造函数指向自己。由于原型通过父类创</span>
window<span class="token punctuation">.</span><span class="token function-variable function">HTMLHtmlElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">HTMLHtmlElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">HTMLElement</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token class-name">HTMLHtmlElement</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">HTMLElement</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token class-name">HTMLHtmlElement</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> HTMLHtmlElement
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>利用 <strong>实例的 <code>__proto__</code> 指向构造函数的 <code>prototype</code></strong> 的特性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> navigator <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

navigator<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">userAgent</span><span class="token operator">:</span> <span class="token string">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="补环境" tabindex="-1"><a class="header-anchor" href="#补环境" aria-hidden="true">#</a> 补环境</h2><h3 id="使用代理明确检测内容" tabindex="-1"><a class="header-anchor" href="#使用代理明确检测内容" aria-hidden="true">#</a> 使用代理明确检测内容</h3>`,11),E={href:"https://www.cnblogs.com/xiaohai123/p/19068874",target:"_blank",rel:"noopener noreferrer"},q=a(`<ul><li>环境代理：将浏览器内置对象进行代理，查看内置对象的调用情况<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">setProxyArr</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">proxyObjArr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 环境代理</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> proxyObjArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{
            get: function(target, property, receiver) {
                console.log(&quot;方法:&quot;, &quot;get&quot;, &quot;对象:&quot;, &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>proxyObjArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;, &quot;属性:&quot;,
                property, &quot;属性类型:&quot;, typeof property, &quot;属性值:&quot;, target[property], &quot;属性值类型:&quot;, typeof target[property]);
                return target[property];
            },
            set: function(target, property, value, receiver) {
                console.log(&quot;方法:&quot;, &quot;set&quot;, &quot;对象:&quot;, &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>proxyObjArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;, &quot;属性:&quot;,
                property, &quot;属性类型:&quot;, typeof property, &quot;属性值:&quot;, value, &quot;属性值类型:&quot;, typeof target[property]);
                return Reflect.set(...arguments);
            }
        }</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">try{
            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>proxyObjArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;
            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>proxyObjArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = new Proxy(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>proxyObjArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>handler<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">);
        } catch (e) {
            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>proxyObjArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = {};
            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>proxyObjArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = new Proxy(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>proxyObjArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>handler<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">);
        }</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
proxyArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;window&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;document&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;location&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;navigator&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;history&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;screen&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// [&#39;window&#39;,&#39;document&#39;,&#39;location&#39;, &#39;navigator&#39;, &#39;history&#39;, &#39;screen&#39;,&#39;span&#39;, &#39;div&#39;,&#39;chrome&#39;,&#39;SCRIPT&#39;, &#39;canvas&#39;,&#39;HEAD&#39;,&#39;body&#39;,&#39;EventTarget&#39;,&#39;navigator.mimeTypes&#39;,&#39;catvm.memory.PluginArray._&#39;,&#39;localStorage&#39;,&#39;sessionStorage&#39;];</span>

window <span class="token operator">=</span> global<span class="token punctuation">;</span>
<span class="token keyword">delete</span> global<span class="token punctuation">;</span>
<span class="token keyword">delete</span> Buffer<span class="token punctuation">;</span>

<span class="token comment">// 需要先补这些对象，再对这些对象挂代理</span>
<span class="token function">setProxyArr</span><span class="token punctuation">(</span>proxyArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>通用代理。若发现检测我们补充内容的属性时，可以代理我们补充内容，打印调用该对象的内容，并执行原本的内容<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 通用代理，当检测补充内容的属性值，用于对补充内容进行代理</span>
    <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">!==</span> <span class="token string">&#39;isNaN&#39;</span> <span class="token operator">&amp;&amp;</span> property <span class="token operator">!==</span> <span class="token string">&#39;encodeURI&#39;</span> <span class="token operator">&amp;&amp;</span> property <span class="token operator">!==</span> <span class="token string">&#39;Uint8Array&#39;</span> <span class="token operator">&amp;&amp;</span> property <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">&amp;&amp;</span> property <span class="token operator">!==</span> <span class="token string">&#39;JSON&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;方法:&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;对象:&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token string">&#39;属性:&#39;</span><span class="token punctuation">,</span> property<span class="token punctuation">,</span>
                <span class="token string">&#39;属性类型:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> property<span class="token punctuation">,</span> <span class="token string">&#39;属性值:&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;属性值类型:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span>
            <span class="token comment">// return Reflect.get(...arguments)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;方法:&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;set&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;对象&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token string">&#39;属性:&#39;</span><span class="token punctuation">,</span> property<span class="token punctuation">,</span>
            <span class="token string">&#39;属性类型:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> property<span class="token punctuation">,</span> <span class="token string">&#39;属性值:&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token string">&#39;属性值类型:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="常规处理流程" tabindex="-1"><a class="header-anchor" href="#常规处理流程" aria-hidden="true">#</a> 常规处理流程</h3><ul><li><p>补充基本环境。如 <code>window</code>，<code>document</code>，<code>navigator</code> 等浏览器内置对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window <span class="token operator">=</span> global<span class="token punctuation">;</span>
<span class="token keyword">delete</span> Buffer<span class="token punctuation">;</span>  <span class="token comment">// nodejs自带关键字，删除防止检测</span>
<span class="token keyword">delete</span> global<span class="token punctuation">;</span>  <span class="token comment">// 防止检测</span>
window<span class="token punctuation">.</span>parent <span class="token operator">=</span> window<span class="token punctuation">.</span>self <span class="token operator">=</span> window<span class="token punctuation">.</span>top <span class="token operator">=</span> window<span class="token punctuation">.</span>window <span class="token operator">=</span> window<span class="token punctuation">;</span>  <span class="token comment">// 窗口检测，是否存在 iframe 等窗口嵌套</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>挂代理。将基本环境与环境代理放在目标代码前，或放入 <em>env.js</em> 一个js文件中，使用 <code>require(&quot;./env.js&quot;)</code></p></li><li><p>加载目标代码。在补环境后放，可通过 <code>require(&quot;./vmp.js&quot;)</code> 的方式，将vmp自执行函数运行，方便过格式化检测。在<code>require</code> 后，调用vmp中的加密函数</p></li><li><p>运行代码，查看控制台是否log出检测内容。如果没有，打断点后，在控制台输入<code>window</code>，查看window对象是否有代理。如果window已有代理，可能通过 <code>&lt;alias&gt; = winodow;</code> 的别名方式对window调用与检测，搜索 <code>global</code> 、<code>self</code>、<code>this</code>、<code>env</code> 等可能的别名，查看是否有类似别名。将其全局替换为 <code>window</code> 后查看控制台是否正常log</p></li><li><p>运行代码，查看是否异常中断。通常需要补环境使代码可以顺利执行完成</p><p><img src="`+v+'" alt="调试运行"></p><ul><li><p><strong>注意：不是所有的异常都需要处理。</strong> 通过勾选以下内容明确原本代码中是否抛出该异常。如出现读取<code>buffer</code>内的属性产生的异常，实际上是检测<code>buffer</code>，在浏览器中也存在该异常，则无需处理，保持与浏览器一致即可</p><p><img src="'+b+`" alt="明确异常是否需要处理"></p></li></ul></li><li><p>补充环境。查看调用的 undefined 内容，配合浏览器查看调用内容类型（方法还是属性，是什么类型的属性）。不是每个调用都需要补充，如检测自动化、爬虫框架的特征，配合浏览器环境，此时理应需要结果是<code>undefined</code></p><ul><li><p>常见的待补充内容如下</p><ul><li>方法 <code>document.createElement</code></li><li>属性 <code>document.documentElement</code></li><li>方法 <code>window/document.addEventListener</code></li><li>方法 <code>window.MouseEvent</code></li><li>属性 <code>navigator.webdriver = false</code></li></ul></li><li><p>普通补环境方法。此处以 <code>document.documentElement</code> 为例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;createElement&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;document createElement &quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>  <span class="token comment">// 通过打印确定调用内容</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>原型链补环境。补充到原型（构造函数prototype）中，详见原型链部分</p><ul><li><p>补属性。绑定到构造函数的原型上使其成为属性。需要先检查属性是否为实例，则声明该实例的构造函数后，使用构造函数实例化，再。此处以 <code>document.documentElement</code> 为例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">HTMLDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 待绑定对象</span>

<span class="token keyword">function</span> <span class="token function">HTMLHtmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 目标属性的构造函数</span>
<span class="token class-name">HTMLDocument</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>documentElement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLHtmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 绑定到待绑定类的原型上</span>

<span class="token comment">// Tips:</span>
<span class="token comment">// 严格情况下，需要考虑继承关系，HTMLDocument -&gt; HTMLHtmlDocument</span>
<span class="token comment">// 常用继承关系与构造函数继承方法，可查看原型链部分</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>补方法。在对象的构造函数原型上创建该方法。此处以 <code>document.addEventListener</code> 为例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">HTMLDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 待绑定对象</span>

<span class="token comment">// 绑定到待绑定类的原型上</span>
<span class="token class-name">HTMLDocument</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addEventListener</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>对被调用对象进行代理后返回。查看后续可能检测该对象的内容</p><ul><li><p>普通方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;createElement&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;document createElement &quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过打印确定调用内容</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">==</span><span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// canvas是对象，先返回空对象，挂上代理，查看可能检测canvas的内容</span>
        <span class="token keyword">return</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span>  
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>原型链</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">HTMLDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">HTMLHtmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token class-name">HTMLDocument</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>documentElement <span class="token operator">=</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HTMLHtmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;document.documentElement&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 补对象后挂上代理</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>勾选通过代理发现调用canvas中的getContext，进行补充（对于创建和获取，日志打印较为关键）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;createElement&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;document createElement &quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过打印确定调用内容</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">==</span><span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">// 补充的内容</span>
            <span class="token function-variable function">getContext</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;canvas getContext &quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>  <span class="token comment">// 通过打印确定调用内容</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span>  
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>代码没有异常中断后，勾选 <em>断点（变量下面）-&gt; Caught Exception &amp; Uncaught Exception</em> 。对代码自行 <code>catch</code> 的异常进行分析，查看是否存在明显的错误需要调整。一些环境逻辑可能在通过catch处理而不异常中断</p><p>如 <code>catch</code> 到了一个属性是undefined，控制台log了 getAttribute，说明 getAttribute 为找到，需要补充。可以考虑补充到构造函数原型上。如果获取对象本身是构造函数，则补充到父类的原型上。此处给出几个典型案例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// E.G. </span>
<span class="token comment">// HTMLElement.getAttribute</span>
<span class="token keyword">class</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Element</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>custom <span class="token operator">=</span> <span class="token string">&#39;custom&#39;</span>  <span class="token comment">// 在父类的原型上绑定</span>
<span class="token comment">// tips：方法可以直接写在class中，属性需单独 prototype 赋值</span>

<span class="token keyword">class</span> <span class="token class-name">HTMLElement</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getAttribute<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">HTMLElement</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getAttribute<span class="token punctuation">)</span>


<span class="token comment">// E.G. </span>
<span class="token comment">// 检测 document.getElementByTagName(&#39;*&#39;) 输出HTMLCollection数组</span>
<span class="token comment">// 及数组内元素的 方法 get 属性 Symbol(Symbol.iterator) 类型 symbol（补充后发现调用了_elements）</span>
<span class="token comment">// 补 _elements = [] 后</span>
<span class="token comment">// 控制台输出 HTMLCollection{_elements:Array(0)} 中元素的属性 \`(0)[]\`，说明取了HTMLCollection._elements[0]。具体属性需要补对象后通过代理确定</span>
<span class="token keyword">function</span> <span class="token function">HTMLCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_elements<span class="token operator">=</span><span class="token punctuation">[</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token comment">// 通过代理查看 检测了 _elements[0] 的属性 TagName</span>
    
    <span class="token comment">// 浏览器 document.getElementByTagName(&#39;*&#39;) 的第一个元素是html标签，查看其 TagName 为 HTML</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_elements<span class="token operator">=</span><span class="token punctuation">[</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HTMLHtmlElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> 
    <span class="token comment">// 然后HTMLHtmlElement中添加tagName this.tagName = &#39;HTML&#39;</span>

<span class="token punctuation">}</span>
<span class="token class-name">HTMLDocument</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getElementByTagName</span> <span class="token operator">=</span> <span class="token keyword">function</span>  <span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token parameter">tagName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName <span class="token operator">==</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 触发 getElementByTagName(&#39;*&#39;) 检测时，返回一个HTMLCollection</span>
        <span class="token keyword">return</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HTMLCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;HTMLCollection_obj&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">HTMLCollection</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// prompt: 不引入库，在 function HTMLCollection() {} 基础上实现属性 Symbol(Symbol.iterator)</span>
    <span class="token comment">// 异常时把代码copy并让其修改</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_elements<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
        <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> elements<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>


<span class="token comment">// E.G. then属性报错 -&gt; 调用 then 的 Promise 对象。补 Promise ()。此处示例 navigator.permissions.query</span>
<span class="token comment">// 0. 先发现navigator.permissions undefined</span>
<span class="token function-variable function">Permissions</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">Permissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Navigator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>permissions <span class="token operator">=</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Permissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function-variable function">PermissionStatus</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">PermissionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 1.3</span>
<span class="token comment">// 1. 补完后发现寻找 navigator.permissions 中的 query ，浏览器查看 navigator.permissions.query  是函数</span>
<span class="token comment">// 补完 query 发现 query 中没有 then，通过浏览器控制台发现 query 函数返回了 Promise 对象，then 关键字也可以印证 query 返回了 Promise 对象</span>
<span class="token class-name">Permission</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">query</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 1.2 Promise 不正常打印，可能是需要入参，增加参数输出</span>
console<span class="token punctuation">.</span>log（<span class="token string">&#39;Permissions.prototype.query 参数：&#39;</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>）
<span class="token comment">// 1.1 resolve 内容需要通过浏览器控制台注入确定。代码断点时状态为pending，需要跳过断点，使请求正常响应，触发回调</span>
<span class="token comment">// navigator.permissions.query().then(res=&gt;console.log(res) </span>
<span class="token comment">// 1.3 得到参数后修改注入代码。这里假设入参为字符串&#39;in_params&#39; ，navigator.permissions.query(&#39;in_params&#39;).then(res=&gt;console.log(res) </span>
<span class="token comment">// 得到响应为 PermissionStatus 对象</span>
<span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>watch <span class="token keyword">new</span> <span class="token class-name">PermissionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>
<span class="token comment">// 浏览器控制台使用此代码测试 then ，需要释放断点，使 Promise 从 pending 状态变为结束状态，从而触发注入代码打印结果</span>
<span class="token comment">// navigator.permissions.query({name: camera}).then(res=&gt;console.log(res))</span>


<span class="token comment">// E.G. 补XMLHttpRequest</span>
<span class="token function-variable function">XMLHttpRequest</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">XMLHttpRequest</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">open</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">XMLHttpRequest</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">send</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">XMLHttpRequest</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setRequestHeader</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">XMLHttpRequest</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addEventListener</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>一边补充，一边查看结果的长度。长度与加密函数长度一致时，可考虑进行下一步，函数调用</p></li></ul><h3 id="结果检测" tabindex="-1"><a class="header-anchor" href="#结果检测" aria-hidden="true">#</a> 结果检测</h3><ul><li><p>进行加密函数调用，验证结果。结果不正确需对代理打印的undefined进行补充（看情况补充，不是所有undefined都补充，此处通常是cookie或localStorage内读取某个内容）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>navigator <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
navigator<span class="token punctuation">.</span>webdriver <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
navigator<span class="token punctuation">.</span>userAgent <span class="token operator">=</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">;</span>
navigator<span class="token punctuation">.</span>plateform <span class="token operator">=</span> <span class="token string">&#39;Win32&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// window.location 浏览器console直接location</span>
location <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// window.localStorage</span>
localStorage <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
localStorage <span class="token operator">=</span> <span class="token function">getProxy</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">,</span> <span class="token string">&quot;localStorage&quot;</span><span class="token punctuation">)</span> 
localStorage<span class="token punctuation">.</span><span class="token function-variable function">getItem</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;localStorage getItem&#39;</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// getItem获取对应值时undefined，根据if返回对应值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>自执行。加密通常为自执行，仍不成功，考虑自执行，查看是否有特殊的undefined内容进行补充 - 此处通过代理得到的代码逻辑是<code>document.createElement(&#39;canvas&#39;)</code>, 然后调用了<code>canvas.getContext(&quot;webgl&quot;)</code>，此时的执行结果为undefined，需要补充</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;createElement&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;document createElement &quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">==</span><span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token function-variable function">getContext</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">==</span> <span class="token string">&quot;webgl&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;webgl&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 在浏览器得到webgl是第一个对象，需要补充</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="tostring检测" tabindex="-1"><a class="header-anchor" href="#tostring检测" aria-hidden="true">#</a> toString检测</h2><p>一些环境会对内置函数进行检测。以 <code>createElement</code> 为例，console打印的内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>createElement<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 浏览器环境输出： &#39;function createElement() { [native code] }&#39;</span>
<span class="token comment">// 手动补环境输出： &#39;function createElement() {}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),H=n("code",null,"native code",-1),j={href:"https://www.cnblogs.com/xiaohai123/p/19068874",target:"_blank",rel:"noopener noreferrer"},L=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">safeFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">safeFunction</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//处理安全函数</span>
    <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$call <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>call<span class="token punctuation">;</span>
    <span class="token keyword">const</span> $toString <span class="token operator">=</span> Function<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>
    <span class="token keyword">const</span> myFunction_toString_symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">const</span> <span class="token function-variable function">myToString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">myToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">[</span>myFunction_toString_symbol<span class="token punctuation">]</span> <span class="token operator">||</span> $toString<span class="token punctuation">.</span><span class="token function">$call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">const</span> <span class="token function-variable function">set_native</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">set_native</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;enumerable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;configurable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;writable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> value
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">delete</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span><span class="token string">&#39;toString&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">set_native</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&quot;toString&quot;</span><span class="token punctuation">,</span> myToString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_native</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">,</span> myFunction_toString_symbol<span class="token punctuation">,</span> <span class="token string">&quot;function toString() { [native code] }&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">const</span> <span class="token function-variable function">safe_Function</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">safe_Function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">set_native</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> myFunction_toString_symbol<span class="token punctuation">,</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span>name <span class="token operator">?</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> func<span class="token punctuation">.</span>name <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;() { [native code] }&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token function">safe_Function</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用示例</span>
window<span class="token punctuation">.</span><span class="token function-variable function">addEventListener</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">safeFunction</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span>
<span class="token comment">// 本地node环境执行时，在后续代码处断点，控制台输入 window.addEventListener.toString() 查看是否成功加入[native code]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function M(T,x){const t=o("ExternalLinkIcon");return c(),i("div",null,[y,n("ul",null,[f,n("li",null,[n("p",null,[s("class方式（ES6引入）。代码来自"),n("a",w,[s("MDN"),e(t)])]),_])]),h,n("p",null,[s("通过代理的方式，在控制台打印出代码读取了目标对象的哪些属性。以下代理"),n("a",E,[s("代码来源"),e(t)])]),q,n("p",null,[s("通过函数使补充内容的toString返回与浏览器一样拥有 "),H,s(" 标志。一般将所有自定义函数（包括构造函数）都使用此函数进行保护 "),n("a",j,[s("代码来源"),e(t)])]),L])}const P=p(g,[["render",M],["__file","020.html.vue"]]);export{P as default};
