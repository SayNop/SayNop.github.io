const e=JSON.parse('{"key":"v-63b8ed66","path":"/detail/019.html","title":"webpack逆向通用流程","lang":"zh-CN","frontmatter":{"layout":"Detail","title":"webpack逆向通用流程","date":"2024-09-13T00:00:00.000Z","discription":"webpack内加密函数的快速处理流程","category":["Spider"],"tags":["Spider","Reverse"],"description":"如有不当可联系本人删除！ 本文以x乎的请求为例，发现加密字段在请求头中。下面分析请求头中的加密字段96 加密函数的定位 复制携带加密参数的请求路径。在 Source 中下XHR断点，然后右键清除缓存并刷新页面 在调用堆栈中回溯，可查看到加密参数生成过程。tT中包含了加密参数。tT是通过函数ed生成的，因此ed为加密函数 (补充：t0，即er函数是取cookie中d_c0的值) 通过函数所在文件的第一行，发现该函数在webpack中 (self.webpackChunkheifetz = self.webpackChunkheifetz || []).push([[2636], { ...","head":[["meta",{"property":"og:url","content":"https://saynop.github.io/detail/019.html"}],["meta",{"property":"og:title","content":"webpack逆向通用流程"}],["meta",{"property":"og:description","content":"如有不当可联系本人删除！ 本文以x乎的请求为例，发现加密字段在请求头中。下面分析请求头中的加密字段96 加密函数的定位 复制携带加密参数的请求路径。在 Source 中下XHR断点，然后右键清除缓存并刷新页面 在调用堆栈中回溯，可查看到加密参数生成过程。tT中包含了加密参数。tT是通过函数ed生成的，因此ed为加密函数 (补充：t0，即er函数是取cookie中d_c0的值) 通过函数所在文件的第一行，发现该函数在webpack中 (self.webpackChunkheifetz = self.webpackChunkheifetz || []).push([[2636], { ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Spider"}],["meta",{"property":"article:tag","content":"Reverse"}],["meta",{"property":"article:published_time","content":"2024-09-13T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"webpack逆向通用流程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-13T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"加密函数的定位","slug":"加密函数的定位","link":"#加密函数的定位","children":[]},{"level":2,"title":"webpack流程","slug":"webpack流程","link":"#webpack流程","children":[{"level":3,"title":"明确分发编号","slug":"明确分发编号","link":"#明确分发编号","children":[]},{"level":3,"title":"分发器(加载器)定位","slug":"分发器-加载器-定位","link":"#分发器-加载器-定位","children":[]},{"level":3,"title":"处理加密函数","slug":"处理加密函数","link":"#处理加密函数","children":[]}]},{"level":2,"title":"解密","slug":"解密","link":"#解密","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"detail/019.md","excerpt":"<p><strong>如有不当可联系本人删除！</strong></p>\\n<p>本文以x乎的请求为例，发现加密字段在请求头中。下面分析请求头中的加密字段96</p>\\n<img src=\\"/assets/imgs/019/01.png\\" style=\\"zoom: 60%\\">\\n<h2> 加密函数的定位</h2>\\n<ul>\\n<li>\\n<p>复制携带加密参数的请求路径。在 <em>Source</em> 中下XHR断点，然后右键清除缓存并刷新页面</p>\\n</li>\\n<li>\\n<p>在调用堆栈中回溯，可查看到加密参数生成过程。<code>tT</code>中包含了加密参数。<code>tT</code>是通过函数<code>ed</code>生成的，因此<code>ed</code>为加密函数 (补充：t0，即<code>er</code>函数是取cookie中<code>d_c0</code>的值)</p>\\n  <img src=\\"/assets/imgs/019/02.png\\" style=\\"zoom: 60%\\">\\n</li>\\n<li>\\n<p>通过函数所在文件的第一行，发现该函数在webpack中</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>webpackChunkheifetz <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>webpackChunkheifetz <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2636</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token operator\\">...</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","autoDesc":true}');export{e as data};
