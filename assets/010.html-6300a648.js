import{_ as a,o as e,c as s,e as l}from"./app-e045d920.js";const i={},n=l(`<h2 id="调试环境" tabindex="-1"><a class="header-anchor" href="#调试环境" aria-hidden="true">#</a> 调试环境</h2><p>IDA版本：<em>7.0</em></p><ul><li><p>进入IDA软件的数据路径 <em>ida.app/Contents/MacOS/dbgsrv</em><br><strong>注意：</strong> 根据so文件目录判断目标文件位数，v7a - 32位，v8是64位。使用不同的位数的ida进行调试</p></li><li><p>将文件夹内对应位数的android server文件传入手机</p></li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>adb push android_server /data/local/tmp/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>进入手机，运行android server</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入手机 - 多台设备使用时使用-s参数设备名</span>
adb shell
<span class="token comment"># 切换管理员 - 才能进入tmp目录</span>
<span class="token function">su</span>
<span class="token comment"># 进入android server所在目录</span>
<span class="token builtin class-name">cd</span> /data/local/tmp/
<span class="token comment"># 给予android server最高权限</span>
<span class="token function">chmod</span> <span class="token number">777</span> android_server
<span class="token comment"># 运行android server 指定端口需要携带参数-p且无空格，例如\`-p23456\`</span>
./android_server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将android server端口转发到电脑（需要使用新端口）</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>adb forward tcp:23946 tcp:23946
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上准备工作完成后便可通过IDA进行调试<br> 一般情况下会将android server进行重命名，并自定义端口号运行。防止app进行进程名与默认端口号检测</p><h2 id="动态调试" tabindex="-1"><a class="header-anchor" href="#动态调试" aria-hidden="true">#</a> 动态调试</h2><p>动态调试分为 Debug调试 与 普通调试。附加进程 与 新建进程</p><h3 id="debug调试" tabindex="-1"><a class="header-anchor" href="#debug调试" aria-hidden="true">#</a> Debug调试</h3><p>脱壳或反调试时常用此方法</p><ul><li><p>挂起程序</p><ul><li>手机打开目标程序</li><li>依次打开 <em>IDA -&gt; Go -&gt; Debugger -&gt; Attach -&gt; Remote ARMLinux/Android debugger</em></li><li>填写监听地址。由于端口转发到本机，Host填写<code>127.0.0.1</code>，Port填写转发到主机的端口后点击OK，弹出手机进程列表</li><li>选择目标程序的运行进程，点击OK，完成<strong>进程附加</strong></li></ul></li><li><p>加载目标SO文件</p><ul><li>依次打开 <em>Debugger -&gt; Debugger options...</em></li><li>勾选三项 <ul><li>Suspend on process entry point (进程入口点挂起)</li><li>Suspend on thread start/exit (创建与退出线程时挂起)</li><li>Suspend on library load/unload (加载与卸载库时挂起)</li></ul></li><li>启动程序，图形按钮 或 快捷键F9</li></ul></li></ul><h3 id="普通调试" tabindex="-1"><a class="header-anchor" href="#普通调试" aria-hidden="true">#</a> 普通调试</h3><ul><li><p>挂起程序</p><ul><li>通过jadx-gui打开app，在 <em>Resources -&gt; AndroidManifest.xml</em>（配置清单）中查找make launch（搜索LAUNCHER），找到activity中的<code>android:name=</code>，得到app的包名+类名</li><li>使用命令挂起程序</li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>adb shell am start <span class="token parameter variable">-D</span> <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>packageName<span class="token operator">&gt;</span>/.<span class="token operator">&lt;</span>className<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>执行完成后手机弹窗 <em>Waiting For Debugger</em></li></ul></li><li><p>得到程序端口：打开DDMS窗口，debug图标(红色的bug)会出现在目标进程前，记录目标程序运行的端口号<code>&lt;port&gt;</code></p></li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ddms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>依次打开 <em>IDA -&gt; Go -&gt; Debugger -&gt; Attach -&gt; Remote ARMLinux/Android debugger</em>。填写监听地址 <em>127.0.0.1+转发端口</em>。选择目标程序的进行进程。勾选三项。此步骤与Debug调试一致。</p></li><li><p>目标程序跳过ddms断点继续运行</p></li></ul><div class="macos language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jdb <span class="token parameter variable">-connect</span> com.sun.jdi.SocketAttach:hostname<span class="token operator">=</span><span class="token number">127.0</span>.0.1 <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token operator">&lt;</span>port<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时可正常弹窗即将加载的so库。如需调试JNI_Load或静态注册函数<code>Java_*</code>，先在函数中下断点后再F9运行<br><strong>问题：</strong> 打不开DDMS的办法</p><ul><li>adb shell ps 得到进程PID<code>&lt;pid&gt;</code></li><li><code>adb forward tcp:xxx jdwp:&lt;pid&gt;</code></li><li>执行jdb</li></ul><h2 id="调试jni-onload" tabindex="-1"><a class="header-anchor" href="#调试jni-onload" aria-hidden="true">#</a> 调试JNI_OnLoad</h2><ul><li>在右侧Modules窗口中搜索目标so文件</li><li>双击查看so中的函数，找到JNI_OnLoad。在汇编指令区F2下断点</li><li>F9运行</li></ul><h2 id="关于ida调试时的几点" tabindex="-1"><a class="header-anchor" href="#关于ida调试时的几点" aria-hidden="true">#</a> 关于IDA调试时的几点</h2><ul><li><p>断点的实现：在断点处设置一个异常，调试器对其进行捕获，从而使程序暂停到断点处</p></li><li><p>勾选三项后的弹窗：找不到so的map文件（找不到so的调试符号信息，详情搜索调试符号），点击取消即可，不影响后期调试</p></li><li><p>寄存器中的值若为黑色，则说明指令执行后未发生改变。否则为蓝色。</p></li><li><p>调试快捷键</p><ul><li>F2: 下断点</li><li>F4: 执行至光标处</li><li>F7: 单步执行</li><li>F9: 继续运行</li><li>寄存器快捷键E - 修改寄存器值</li></ul></li><li><p>关于汇编代码区颜色：</p><ul><li>黑色：可识别（可Tab得到C语言伪代码）</li><li>红色：不可识别</li></ul></li><li><p>代码区常用快捷键</p><ul><li>Tab：得到伪代码</li><li>D：选中代码识别成数据</li><li>U：选中代码识别成未识别数据</li><li>P：选中代码识别成函数（代码块）</li><li>C：选中代码识别成指令（行代码）因此经常先转化成代码（C）再将多条代码转化成函数（P）</li></ul></li></ul>`,25),d=[n];function r(o,t){return e(),s("div",null,d)}const p=a(i,[["render",r],["__file","010.html.vue"]]);export{p as default};
