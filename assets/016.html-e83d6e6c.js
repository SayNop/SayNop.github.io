const n=JSON.parse('{"key":"v-5e9a6389","path":"/detail/016.html","title":"非对称加密算法","lang":"zh-CN","frontmatter":{"layout":"Detail","title":"非对称加密算法","date":"2024-05-03T00:00:00.000Z","discription":"非对称加密算法简介，非对称加密锁涉及到的算法，如DH、RSA等算法的说明","category":["Cryptography"],"tags":["Cryptography","DH","RSA"],"description":"简介 非对称加密算法的加密与解密使用不同的密钥，即公钥和私钥。通常来说，发送方使用公钥加密数据后发送，接受方使用私钥解密数据得到明文 DH DH（Diffie-Hellman 密钥交换）算法用于安全的发放收发双方约定的密钥 DH算法是第一个密钥协商算法，仅用于密钥分配，不能用于加解密消息 消息传递流程 收发双方构建本地密钥。构建密钥时，使用本方的私钥及对方的公钥构建本地密钥 发送方使用本地密钥加密消息发送 接受方使用本地密钥对收到的消息解密 API 使用流程 通过调用生成甲方密钥对 通过甲方公钥生成乙方密钥对 构建甲方本地密钥：通过甲方私钥与乙方公钥构建 构建乙方本地密钥：通过乙方私钥与甲方公钥构建 甲方加密 乙方解密 代码 Java API// 初始化甲方密钥 - 直接构建 public static Map&lt;String, Object&gt; initKey() throws Exception { // 1.实例化DH算法的密钥对生成器 KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\\"DH\\"); keyPairGenerator.initialize(512); // 初始化生成器 - 密钥长度需64的整数倍，默认1024 // 2.生成密钥对 KeyPair keyPair = keyPairGenerator.generateKeyPair(); DHPublicKey publicKey = (DHPublicKey) keyPair.getPublic(); // 甲方公钥 DHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate(); // 甲方私钥 // 3.hash表存储密钥并返回 Map&lt;String, Object&gt; KeyMap = new HashMap&lt;String, Object&gt;(2); keyMap.put(\\"DHPublicKey\\", publicKey); keyMap.put(\\"DHPrivateKey\\", privateKey); return keyMap; } // 初始化乙方密钥 - 根据甲方公钥构建自己的密钥对 public static Map&lt;String, Object&gt; initKey(byte[] publicKey) throws Exception { // 1.根据传入的公钥转换成可生成本地密钥对的公钥 X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(publickey); // 公钥转换材料。X509为数字证书文档，根据RFC 5280编码 KeyFactory keyFactory = KeyFactory.getInstance(\\"DH\\"); // 实例化 PublicKey pubKey = keyFactory.generatePublic(x509KeySpec); // 产生转换后的公钥 // 2.根据转化后的公钥构建密钥对 DHParameterSpec dhParamSpec = ((DHPublicKey) pubKey).getParams(); // 密钥对生成器 KeyPairGenerator KeyPairGenerator = KeyPairGenerator.getInstance(keyFactory.getAlgorithm()) // 生成密钥对 KeyPair keyPair = keyPairGenerator.generateKeyPair(); DHPublicKey publicKey = (DHPublicKey) keyPair.getPublic(); // 已方公钥 DHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate(); // 已方私钥 // 3.hash表存储密钥对并返回 Map&lt;String, Object&gt; KeyMap = new HashMap&lt;String, Object&gt;(2); keyMap.put(\\"DHPublicKey\\", publicKey); keyMap.put(\\"DHPrivateKey\\", privateKey); return keyMap; } // 构建本地密钥 - 本方的私钥及对方的公钥 public static byte[] getSecretKey(byte[] publicKey, byte[] privateKey) throws Exception { // 公钥转换为可用公钥 X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(publickey); // 公钥转换材料。X509为数字证书文档，根据RFC 5280编码 KeyFactory keyFactory = KeyFactory.getInstance(\\"DH\\"); // 实例化 PublicKey pubKey = keyFactory.generatePublic(x509KeySpec); // 产生转换后的公钥 // 私钥转换为可用私钥 PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(privateKey); PrivateKey priKey = KeyFactory.generatory.generatePrivate(pkcs8KeySpec); // 构建本地密钥 KeyAgreement keyAgree = KeyAgreement.getInstance(keyFactory.getAlgorithm()); keyAgree.init(priKey); KeyAgree.doPhase(pubKey, true); // 生成本地密钥 SecretKey secretKey = keyAgree.generateSecret(\\"AES\\"); return secretKey.getEncoded(); } // 加密 - 消息加解密使用AES进行，DH只在密钥交换中使用 public static byte[] encrypt(byte[] data, byte[] key) throws Exception { // 转换成可用本地密钥 SecretKey secretKey = new SecretKeySpec(key, \\"AES\\"); // 加密 Cipher cipher = Cipher.getInstance(secretKey.getAlgorithm()); cipher,init(Cipher.ENCRYPT_MODE, secretKey); return cipher.doFinal(data); } // 解密 - 消息加解密使用AES进行，DH只在密钥交换中使用 public static byte[] decrypt(byte[] data, byte[] key) throws Exception { // 转换成可用本地密钥 SecretKey secretKey = new SecretKeySpec(key, \\"AES\\"); // 解密 Cipher cipher = Cipher.getInstance(secretKey.getAlgorithm()); cipher,init(Cipher.DECRYPT_MODE, secretKey); return cipher.doFinal(data); }","head":[["meta",{"property":"og:url","content":"https://saynop.github.io/detail/016.html"}],["meta",{"property":"og:title","content":"非对称加密算法"}],["meta",{"property":"og:description","content":"简介 非对称加密算法的加密与解密使用不同的密钥，即公钥和私钥。通常来说，发送方使用公钥加密数据后发送，接受方使用私钥解密数据得到明文 DH DH（Diffie-Hellman 密钥交换）算法用于安全的发放收发双方约定的密钥 DH算法是第一个密钥协商算法，仅用于密钥分配，不能用于加解密消息 消息传递流程 收发双方构建本地密钥。构建密钥时，使用本方的私钥及对方的公钥构建本地密钥 发送方使用本地密钥加密消息发送 接受方使用本地密钥对收到的消息解密 API 使用流程 通过调用生成甲方密钥对 通过甲方公钥生成乙方密钥对 构建甲方本地密钥：通过甲方私钥与乙方公钥构建 构建乙方本地密钥：通过乙方私钥与甲方公钥构建 甲方加密 乙方解密 代码 Java API// 初始化甲方密钥 - 直接构建 public static Map&lt;String, Object&gt; initKey() throws Exception { // 1.实例化DH算法的密钥对生成器 KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\\"DH\\"); keyPairGenerator.initialize(512); // 初始化生成器 - 密钥长度需64的整数倍，默认1024 // 2.生成密钥对 KeyPair keyPair = keyPairGenerator.generateKeyPair(); DHPublicKey publicKey = (DHPublicKey) keyPair.getPublic(); // 甲方公钥 DHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate(); // 甲方私钥 // 3.hash表存储密钥并返回 Map&lt;String, Object&gt; KeyMap = new HashMap&lt;String, Object&gt;(2); keyMap.put(\\"DHPublicKey\\", publicKey); keyMap.put(\\"DHPrivateKey\\", privateKey); return keyMap; } // 初始化乙方密钥 - 根据甲方公钥构建自己的密钥对 public static Map&lt;String, Object&gt; initKey(byte[] publicKey) throws Exception { // 1.根据传入的公钥转换成可生成本地密钥对的公钥 X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(publickey); // 公钥转换材料。X509为数字证书文档，根据RFC 5280编码 KeyFactory keyFactory = KeyFactory.getInstance(\\"DH\\"); // 实例化 PublicKey pubKey = keyFactory.generatePublic(x509KeySpec); // 产生转换后的公钥 // 2.根据转化后的公钥构建密钥对 DHParameterSpec dhParamSpec = ((DHPublicKey) pubKey).getParams(); // 密钥对生成器 KeyPairGenerator KeyPairGenerator = KeyPairGenerator.getInstance(keyFactory.getAlgorithm()) // 生成密钥对 KeyPair keyPair = keyPairGenerator.generateKeyPair(); DHPublicKey publicKey = (DHPublicKey) keyPair.getPublic(); // 已方公钥 DHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate(); // 已方私钥 // 3.hash表存储密钥对并返回 Map&lt;String, Object&gt; KeyMap = new HashMap&lt;String, Object&gt;(2); keyMap.put(\\"DHPublicKey\\", publicKey); keyMap.put(\\"DHPrivateKey\\", privateKey); return keyMap; } // 构建本地密钥 - 本方的私钥及对方的公钥 public static byte[] getSecretKey(byte[] publicKey, byte[] privateKey) throws Exception { // 公钥转换为可用公钥 X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(publickey); // 公钥转换材料。X509为数字证书文档，根据RFC 5280编码 KeyFactory keyFactory = KeyFactory.getInstance(\\"DH\\"); // 实例化 PublicKey pubKey = keyFactory.generatePublic(x509KeySpec); // 产生转换后的公钥 // 私钥转换为可用私钥 PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(privateKey); PrivateKey priKey = KeyFactory.generatory.generatePrivate(pkcs8KeySpec); // 构建本地密钥 KeyAgreement keyAgree = KeyAgreement.getInstance(keyFactory.getAlgorithm()); keyAgree.init(priKey); KeyAgree.doPhase(pubKey, true); // 生成本地密钥 SecretKey secretKey = keyAgree.generateSecret(\\"AES\\"); return secretKey.getEncoded(); } // 加密 - 消息加解密使用AES进行，DH只在密钥交换中使用 public static byte[] encrypt(byte[] data, byte[] key) throws Exception { // 转换成可用本地密钥 SecretKey secretKey = new SecretKeySpec(key, \\"AES\\"); // 加密 Cipher cipher = Cipher.getInstance(secretKey.getAlgorithm()); cipher,init(Cipher.ENCRYPT_MODE, secretKey); return cipher.doFinal(data); } // 解密 - 消息加解密使用AES进行，DH只在密钥交换中使用 public static byte[] decrypt(byte[] data, byte[] key) throws Exception { // 转换成可用本地密钥 SecretKey secretKey = new SecretKeySpec(key, \\"AES\\"); // 解密 Cipher cipher = Cipher.getInstance(secretKey.getAlgorithm()); cipher,init(Cipher.DECRYPT_MODE, secretKey); return cipher.doFinal(data); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Cryptography"}],["meta",{"property":"article:tag","content":"DH"}],["meta",{"property":"article:tag","content":"RSA"}],["meta",{"property":"article:published_time","content":"2024-05-03T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"非对称加密算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"DH","slug":"dh","link":"#dh","children":[]},{"level":2,"title":"RSA","slug":"rsa","link":"#rsa","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"detail/016.md","excerpt":"<h2> 简介</h2>\\n<p>非对称加密算法的加密与解密使用不同的密钥，即公钥和私钥。通常来说，发送方使用公钥加密数据后发送，接受方使用私钥解密数据得到明文</p>\\n<h2> DH</h2>\\n<p>DH（Diffie-Hellman 密钥交换）算法用于安全的发放收发双方约定的密钥</p>\\n<blockquote>\\n<p>DH算法是第一个密钥协商算法，仅用于密钥分配，不能用于加解密消息</p>\\n</blockquote>\\n<ul>\\n<li>\\n<p>消息传递流程</p>\\n<ul>\\n<li>收发双方构建本地密钥。构建密钥时，使用本方的私钥及对方的公钥构建本地密钥</li>\\n<li>发送方使用本地密钥加密消息发送</li>\\n<li>接受方使用本地密钥对收到的消息解密</li>\\n</ul>\\n</li>\\n<li>\\n<p>API 使用流程</p>\\n<ul>\\n<li>通过调用生成甲方密钥对</li>\\n<li>通过甲方公钥生成乙方密钥对</li>\\n<li>构建甲方本地密钥：通过甲方私钥与乙方公钥构建</li>\\n<li>构建乙方本地密钥：通过乙方私钥与甲方公钥构建</li>\\n<li>甲方加密</li>\\n<li>乙方解密</li>\\n</ul>\\n</li>\\n<li>\\n<p>代码</p>\\n<ul>\\n<li>Java API<div class=\\"macos language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 初始化甲方密钥 - 直接构建</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">initKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 1.实例化DH算法的密钥对生成器</span>\\n    <span class=\\"token class-name\\">KeyPairGenerator</span> keyPairGenerator <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">KeyPairGenerator</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"DH\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    keyPairGenerator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">initialize</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">512</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 初始化生成器 - 密钥长度需64的整数倍，默认1024</span>\\n    \\n    <span class=\\"token comment\\">// 2.生成密钥对</span>\\n    <span class=\\"token class-name\\">KeyPair</span> keyPair <span class=\\"token operator\\">=</span> keyPairGenerator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generateKeyPair</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">DHPublicKey</span> publicKey <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DHPublicKey</span><span class=\\"token punctuation\\">)</span> keyPair<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getPublic</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 甲方公钥</span>\\n    <span class=\\"token class-name\\">DHPrivateKey</span> privateKey <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DHPrivateKey</span><span class=\\"token punctuation\\">)</span> keyPair<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getPrivate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 甲方私钥</span>\\n    \\n    <span class=\\"token comment\\">// 3.hash表存储密钥并返回</span>\\n    <span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token class-name\\">KeyMap</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    keyMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"DHPublicKey\\"</span><span class=\\"token punctuation\\">,</span> publicKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    keyMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"DHPrivateKey\\"</span><span class=\\"token punctuation\\">,</span> privateKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> keyMap<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 初始化乙方密钥 - 根据甲方公钥构建自己的密钥对</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">initKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> publicKey<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 1.根据传入的公钥转换成可生成本地密钥对的公钥</span>\\n    <span class=\\"token class-name\\">X509EncodedKeySpec</span> x509KeySpec <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">X509EncodedKeySpec</span><span class=\\"token punctuation\\">(</span>publickey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 公钥转换材料。X509为数字证书文档，根据RFC 5280编码</span>\\n    <span class=\\"token class-name\\">KeyFactory</span> keyFactory <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">KeyFactory</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"DH\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 实例化</span>\\n    <span class=\\"token class-name\\">PublicKey</span> pubKey <span class=\\"token operator\\">=</span> keyFactory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generatePublic</span><span class=\\"token punctuation\\">(</span>x509KeySpec<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 产生转换后的公钥</span>\\n    \\n    <span class=\\"token comment\\">// 2.根据转化后的公钥构建密钥对</span>\\n    <span class=\\"token class-name\\">DHParameterSpec</span> dhParamSpec <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DHPublicKey</span><span class=\\"token punctuation\\">)</span> pubKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getParams</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 密钥对生成器</span>\\n    <span class=\\"token class-name\\">KeyPairGenerator</span> <span class=\\"token class-name\\">KeyPairGenerator</span> <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">KeyPairGenerator</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span>keyFactory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAlgorithm</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// 生成密钥对</span>\\n    <span class=\\"token class-name\\">KeyPair</span> keyPair <span class=\\"token operator\\">=</span> keyPairGenerator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generateKeyPair</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">DHPublicKey</span> publicKey <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DHPublicKey</span><span class=\\"token punctuation\\">)</span> keyPair<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getPublic</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 已方公钥</span>\\n    <span class=\\"token class-name\\">DHPrivateKey</span> privateKey <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DHPrivateKey</span><span class=\\"token punctuation\\">)</span> keyPair<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getPrivate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 已方私钥</span>\\n    \\n    <span class=\\"token comment\\">// 3.hash表存储密钥对并返回</span>\\n    <span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token class-name\\">KeyMap</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    keyMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"DHPublicKey\\"</span><span class=\\"token punctuation\\">,</span> publicKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    keyMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"DHPrivateKey\\"</span><span class=\\"token punctuation\\">,</span> privateKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> keyMap<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 构建本地密钥 - 本方的私钥及对方的公钥</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token function\\">getSecretKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> publicKey<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> privateKey<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span> \\n    <span class=\\"token comment\\">// 公钥转换为可用公钥</span>\\n    <span class=\\"token class-name\\">X509EncodedKeySpec</span> x509KeySpec <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">X509EncodedKeySpec</span><span class=\\"token punctuation\\">(</span>publickey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 公钥转换材料。X509为数字证书文档，根据RFC 5280编码</span>\\n    <span class=\\"token class-name\\">KeyFactory</span> keyFactory <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">KeyFactory</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"DH\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 实例化</span>\\n    <span class=\\"token class-name\\">PublicKey</span> pubKey <span class=\\"token operator\\">=</span> keyFactory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generatePublic</span><span class=\\"token punctuation\\">(</span>x509KeySpec<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 产生转换后的公钥</span>\\n    \\n    <span class=\\"token comment\\">// 私钥转换为可用私钥</span>\\n    <span class=\\"token class-name\\">PKCS8EncodedKeySpec</span> pkcs8KeySpec <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">PKCS8EncodedKeySpec</span><span class=\\"token punctuation\\">(</span>privateKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">PrivateKey</span> priKey <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">KeyFactory</span><span class=\\"token punctuation\\">.</span>generatory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generatePrivate</span><span class=\\"token punctuation\\">(</span>pkcs8KeySpec<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    \\n    <span class=\\"token comment\\">// 构建本地密钥</span>\\n    <span class=\\"token class-name\\">KeyAgreement</span> keyAgree <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">KeyAgreement</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span>keyFactory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAlgorithm</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    keyAgree<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span>priKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">KeyAgree</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">doPhase</span><span class=\\"token punctuation\\">(</span>pubKey<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 生成本地密钥</span>\\n    <span class=\\"token class-name\\">SecretKey</span> secretKey <span class=\\"token operator\\">=</span> keyAgree<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generateSecret</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"AES\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> secretKey<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getEncoded</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 加密 - 消息加解密使用AES进行，DH只在密钥交换中使用</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token function\\">encrypt</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> data<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 转换成可用本地密钥</span>\\n    <span class=\\"token class-name\\">SecretKey</span> secretKey <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">SecretKeySpec</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"AES\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 加密</span>\\n    <span class=\\"token class-name\\">Cipher</span> cipher <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span>secretKey<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAlgorithm</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    cipher<span class=\\"token punctuation\\">,</span><span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">ENCRYPT_MODE</span><span class=\\"token punctuation\\">,</span> secretKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> cipher<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">doFinal</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 解密 - 消息加解密使用AES进行，DH只在密钥交换中使用</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token function\\">decrypt</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> data<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 转换成可用本地密钥</span>\\n    <span class=\\"token class-name\\">SecretKey</span> secretKey <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">SecretKeySpec</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"AES\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 解密</span>\\n    <span class=\\"token class-name\\">Cipher</span> cipher <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span>secretKey<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAlgorithm</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    cipher<span class=\\"token punctuation\\">,</span><span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">DECRYPT_MODE</span><span class=\\"token punctuation\\">,</span> secretKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> cipher<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">doFinal</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{n as data};
