import{_ as n,o as s,c as a,e as t}from"./app-716fb9d6.js";const p={},e=t(`<h2 id="静态注册开发流程" tabindex="-1"><a class="header-anchor" href="#静态注册开发流程" aria-hidden="true">#</a> 静态注册开发流程</h2><h3 id="在java中定义native方法" tabindex="-1"><a class="header-anchor" href="#在java中定义native方法" aria-hidden="true">#</a> 在java中定义native方法</h3><p>参考以下例子编写java层的类，在类中定义需要通过c语言实现的native方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>testndk</span><span class="token punctuation">;</span>
  
<span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span></span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 弹窗显示出native函数调用结果</span>
        <span class="token comment">// 第一个参数是上下文，这里直接传入this</span>
        <span class="token comment">// 第二个参数是显示内容，这里直接调用jni函数，打印函数返回值</span>
        <span class="token comment">// 第三个参数是弹窗时间</span>
        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getstring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_LONG</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token comment">// native方法的定义 - 从c层得到返回字段</span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token class-name">CharSequence</span> <span class="token function">getstring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写c语言源码" tabindex="-1"><a class="header-anchor" href="#编写c语言源码" aria-hidden="true">#</a> 编写c语言源码</h3><ul><li>在安卓项目目录的 <em>src</em> 文件夹下，使用命令<code>javah -jni com.example.testndk.MainActivity</code> <em>生成 JNI 样式的标头文件 (默认值)</em> 。其中，说明文字是<code>javah</code>中的说明，<code>com.example.testndk.MainActivity</code>是native函数所在类的路径。此时在 <em>src</em> 下生成了名为 <em>com.example.testndk.h</em> 的头文件。</li><li>在项目目录下创建文件夹 <em>jni</em> （与 <em>src</em> 文件夹同级）。将生成的 <em>com.example.testndk.h</em> 改名为 <em>JNI_study.h</em> ，并移动到 <em>jni</em> 文件夹内。</li><li>在 <em>jni</em> 文件夹内创建同名的 <em>JNI_study.c</em> 文件并编写ndk函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;JNI_study.h&quot;</span>  <span class="token comment">// 调用生成的库文件</span></span>

<span class="token comment">// 返回指定字段</span>
<span class="token comment">// 函数名直接从生成的JNI_study.h中复制，并按规定补全固定的形参</span>
JNIEXPORT jobject JNICALL <span class="token function">Java_example_testndk_MainActivity_getstring</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token comment">// 在jni.h中搜索并复制出NewStringUTF，参考定义传入指定参数，从c层将数据返回java层</span>
  	<span class="token comment">// 使用搜索第一次出现的结果，第一次是c语言接口，后续出现的是c++接口</span>
    <span class="token comment">// jstring     (*NewStringUTF)(JNIEnv*, const char*);</span>
  	jstring str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">NewStringUTF</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 <em>jni.h</em> 中定义的api将so中的值返回给java</li></ul><p><strong>说明：</strong></p><p>在结构体指针中，<code>(*p).attr</code>等价于<code>p-&gt;attr</code>。</p><h3 id="通过cmake打包" tabindex="-1"><a class="header-anchor" href="#通过cmake打包" aria-hidden="true">#</a> 通过Cmake打包</h3><ul><li>在 <em>jni</em> 文件夹内编写android mk文件 <em>Android.mk</em></li></ul><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>LOCAL_PATH <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> my-dir<span class="token punctuation">)</span>
<span class="token keyword">include</span> <span class="token variable">$</span><span class="token punctuation">(</span>CLEAR_VARS<span class="token punctuation">)</span>
LOCAL_MODULE <span class="token operator">:=</span> JNI_study  <span class="token comment"># 模块名，即头文件&#39;.h&#39;前的文件名</span>
LOCAL_SRC_FILES <span class="token operator">:=</span> JNI_study.c  <span class="token comment"># 源文件 .c/.cpp</span>
LOCAL_ARM_MODE <span class="token operator">:=</span> arm  <span class="token comment"># 编译后的指令集 ARM指令集</span>
LOCAL_LDLIBS <span class="token operator">+=</span> -llog  <span class="token comment"># 依赖库</span>
<span class="token keyword">include</span> <span class="token variable">$</span><span class="token punctuation">(</span>BULID_SHARED_LIBRARY<span class="token punctuation">)</span>  <span class="token comment"># 指定编译文件的类型</span>
<span class="token comment"># 编译可执行文件 $(BULID_EXECUTABLE)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 <em>jni</em> 文件夹内编写android mk文件 <em>Application.mk</em></li></ul><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>APP_API <span class="token operator">:=</span> armeabi-v7a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在 <em>jni</em> 文件夹执行命令<code>ndk-build</code>，在项目目录下生成<code>libs/arm/libJNI_study.so</code></li></ul><h3 id="在java层声明so文件" tabindex="-1"><a class="header-anchor" href="#在java层声明so文件" aria-hidden="true">#</a> 在java层声明so文件</h3><p>将android mk文件中的模块名称作为导入名 (so文件去头去尾：libJNI_study.so -&gt; JNI_study) 进行导入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>testndk</span><span class="token punctuation">;</span>
  
<span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span></span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
    <span class="token comment">// 声明导入的模块</span>
    <span class="token keyword">static</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;JNI_study&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getstring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token class-name">CharSequence</span> <span class="token function">getstring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态注册下c层调用java层的普通字段与静态字段" tabindex="-1"><a class="header-anchor" href="#静态注册下c层调用java层的普通字段与静态字段" aria-hidden="true">#</a> 静态注册下C层调用Java层的普通字段与静态字段</h2><p>在java层定义普通字段与静态字段，和native方法声明</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>testndk</span><span class="token punctuation">;</span>
  
<span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span></span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
  	<span class="token comment">// java层的普通字段与静态字段</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;Normal String&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;Static String&quot;</span><span class="token punctuation">;</span>
  
    <span class="token keyword">static</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;JNI_study&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getNormalString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getStaticString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// native函数声明 - 从java层得到字段</span>
    <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token class-name">CharSequence</span> <span class="token function">getNormalString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token class-name">CharSequence</span> <span class="token function">getStaticString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="普通字段" tabindex="-1"><a class="header-anchor" href="#普通字段" aria-hidden="true">#</a> 普通字段</h3><p>生成<code>javah</code>头文件并根据头文件编写c语言源码。从下往上，缺啥补啥。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;JNI_study.h&quot;</span></span>

<span class="token comment">// 获取java层普通字段</span>
JNIEXPORT jobject JNICALL <span class="token function">Java_example_testndk_MainActivity_getNormalString</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token comment">// 在jni.h中搜索并复制出getObjectField，参考定义传入指定参数，从java层获取字段</span>
    <span class="token comment">// jobject     (*GetObjectField)(JNIEnv*, jobject, jfieldID);</span>
  	<span class="token comment">// 获取字段id需要用到接口</span>
  	<span class="token comment">// jfieldID    (*GetFieldID)(JNIEnv*, jclass, const char*, const char*);</span>
  	<span class="token comment">// GetFieldID第二个参数jclass 需要用到接口FindClass指明字段所在类</span>
    <span class="token comment">// jclass      (*FindClass)(JNIEnv*, const char*); 字符串为类签名，只需将类路径的&#39;.&#39;换成&#39;/&#39;</span>
    jclass j_class <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">FindClass</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;com/example/testndk/MainActivity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token comment">// GetFieldID后两个参数，第一个为java层字段变量名；第二个为返回值的签名，smali的类型（&#39;.&#39;改成&#39;/&#39;，字符&#39;L&#39;开头，并加上&#39;;&#39;）</span>
    jfieldID j_fieldID <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">GetFieldID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> j_class<span class="token punctuation">,</span> <span class="token string">&quot;str1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ljava/lang/String;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	jobject str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">GetObjectField</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> j_fieldID<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态字段" tabindex="-1"><a class="header-anchor" href="#静态字段" aria-hidden="true">#</a> 静态字段</h3><p>生成<code>javah</code>头文件并根据头文件编写c语言源码。从下往上，缺啥补啥。先缺jfieldID，后缺jclass</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;JNI_study.h&quot;</span></span>

<span class="token comment">// 获取java层静态字段</span>
JNIEXPORT jobject JNICALL <span class="token function">Java_example_testndk_MainActivity_getStaticString</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token comment">// 在jni.h中搜索并复制出GetStaticObjectField，参考定义传入指定参数，从java层获取字段</span>
    <span class="token comment">// jobject     (*GetStaticObjectField)(JNIEnv*, jclass, jfieldID);</span>
  	<span class="token comment">// 需要获取java类和java静态字段id</span>
  	jclass j_class <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">FindClass</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;com/example/testndk/MainActivity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">// jfieldID    (*GetStaticFieldID)(JNIEnv*, jclass, const char*, const char*);</span>
    <span class="token comment">// GetStaticFieldID 后两个参数，第一个为java层字段变量名；第二个为返回值的签名，smali的类型（&#39;.&#39;改成&#39;/&#39;，字符&#39;L&#39;开头，并加上&#39;;&#39;）</span>
    jfieldID j_fieldID <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">GetStaticFieldID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> j_class<span class="token punctuation">,</span> <span class="token string">&quot;str2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ljava/lang/String;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  	jobject str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">GetStaticObjectField</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> j_class<span class="token punctuation">,</span> j_fieldID<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态注册下c层调用java层的普通方法与静态方法" tabindex="-1"><a class="header-anchor" href="#静态注册下c层调用java层的普通方法与静态方法" aria-hidden="true">#</a> 静态注册下C层调用Java层的普通方法与静态方法</h2><ul><li>在java层定义普通字段与静态字段，和native方法声明</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>testndk</span><span class="token punctuation">;</span>
  
<span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span></span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>  
    <span class="token keyword">static</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;JNI_study&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 静态方法所需要的上下文，静态方法不能用this</span>
        context <span class="token operator">=</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// </span>
        <span class="token function">getJavaMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// java层的普通方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;Normal Method&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// java层的静态方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// static 静态方法获取上下文不能用this</span>
        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">&quot;Static Method&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token comment">// native函数声明</span>
    <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token class-name">String</span> <span class="token function">getJavaMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>生成<code>javah</code>头文件并根据头文件编写c语言源码。从下往上，缺啥补啥。先缺jfieldID，后缺jclass</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;JNI_study.h&quot;</span></span>

<span class="token comment">// 调用java层普通方法与静态方法</span>
JNIEXPORT jstring JNICALL <span class="token function">Java_example_testndk_MainActivity_getNormalMethod</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ************调用java层普通方法************</span>
    <span class="token comment">// 获取java类</span>
    jclass j_class <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">FindClass</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;com/example/testndk/MainActivity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	
    <span class="token comment">// 获取方法id</span>
    <span class="token comment">//jmethodID   (*GetMethodID)(JNIEnv*, jclass, const char*, const char*);缺失class参数</span>
    <span class="token comment">// 第三个参数为java方法名，第四个参数是入参出参签名(例如：&quot;(Ljava/lang/String;)Ljava/lang/String;&quot;)</span>
    jmethodID method1_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">GetMethodID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> j_class<span class="token punctuation">,</span> <span class="token string">&quot;method1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()V&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token comment">// **调用java层返回空的普通方法，第三个参数为方法id(需要api获取)，后续参数为目标函数的入参</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">CallVoidMethod</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> method1_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  
    <span class="token comment">// ************java层静态方法************</span>
    <span class="token comment">// jmethodID   (*GetStaticMethodID)(JNIEnv*, jclass, const char*, const char*);</span>
    jmethodID method2_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">GetStaticMethodID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> j_class<span class="token punctuation">,</span> <span class="token string">&quot;method2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()V&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用java层静态方法</span>
    <span class="token comment">// void        (*CallStaticVoidMethod)(JNIEnv*, jclass, jmethodID, ...);</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">CallStaticVoidMethod</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> j_class<span class="token punctuation">,</span> method2_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
   
    <span class="token comment">// 函数需要jstring返回值</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span><span class="token string">&quot;111&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p><ul><li>由于调用java层返回值为空方法的api<code>CallVoidMethod</code>的返回值一定也为空，所以返回值省略。即<code>void call1 = (*env) -&gt; CallVoidMethod(env, obj, method1_id);</code>省略为<code>(*env) -&gt; CallVoidMethod(env, obj, method1_id);</code>。</li><li>java层方法的入参若为字符串，需要通过jni接口创建java类型的字符串传入函数。<code>str_arg = (*env)-&gt;NewStringUTF(env,&quot;我是java层方法的字符串参数&quot;);</code></li></ul><h2 id="动态注册开发流程" tabindex="-1"><a class="header-anchor" href="#动态注册开发流程" aria-hidden="true">#</a> 动态注册开发流程</h2><h3 id="在java中定义native方法-1" tabindex="-1"><a class="header-anchor" href="#在java中定义native方法-1" aria-hidden="true">#</a> 在java中定义native方法</h3><p>参考以下例子编写一个计算器应用（两个操作数输入框，加减乘除四个操作按钮，toast弹出结果）。在java层的类中定义需要通过c语言实现的native方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>calc</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第一个操作数</span>
    <span class="token keyword">private</span> <span class="token class-name">EditText</span> num1<span class="token punctuation">;</span>
    <span class="token comment">// 第二个操作数</span>
    <span class="token keyword">private</span> <span class="token class-name">EditText</span> num2<span class="token punctuation">;</span>
    <span class="token comment">// 操作按钮 加、减、乘、除</span>
    <span class="token keyword">private</span> <span class="token class-name">Button</span> add<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Button</span> sub<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Button</span> mul<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Button</span> div<span class="token punctuation">;</span>
    <span class="token comment">// native函数的输入参数</span>
    <span class="token keyword">private</span> <span class="token keyword">float</span> arg1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> fioat arg2<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 控件初始化函数的调用</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 操作</span>
        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 控件初始化函数的定义 - 绑定变量与控件</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 绑定操作数据 - 从输入框获取操作数，需要强制类型转换</span>
        num1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editText1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        num2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editText2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 绑定操作按钮</span>
        add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sub <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mul <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>mul<span class="token punctuation">)</span><span class="token punctuation">;</span>
        div <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token comment">// 计算方法</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 监听触发了哪种计算</span>
        <span class="token keyword">final</span> <span class="token class-name">OnClickListener</span> click<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            pubilc <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>add<span class="token operator">:</span>
                      <span class="token comment">// 将输入框内容解析成数字作为传入参数(需要放到监听内动态获取，不然只获取一次)</span>
                      arg1 <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      arg2 <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token comment">// 直接this是setOnClickListener的上下文, 弹出内容需要转换成字符串</span>
                      <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                      <span class="token keyword">break</span>
                  <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>sub<span class="token operator">:</span>
                      arg1 <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      arg2 <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">sub</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                      <span class="token keyword">break</span>
                  <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>mul<span class="token operator">:</span>
                      arg1 <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      arg2 <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">mul</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                      <span class="token keyword">break</span>
                  <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>div<span class="token operator">:</span>
                      arg1 <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      arg2 <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">div</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                      <span class="token keyword">break</span>
                  <span class="token keyword">default</span><span class="token operator">:</span>
                      <span class="token keyword">break</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 绑定监听事件</span>
        add <span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>click<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sub <span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>click<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mul <span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>click<span class="token punctuation">)</span><span class="token punctuation">;</span>
        div <span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>click<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// native方法</span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">float</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">float</span> arg1<span class="token punctuation">,</span> <span class="token keyword">float</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">float</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">float</span> arg1<span class="token punctuation">,</span> <span class="token keyword">float</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">float</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">float</span> arg1<span class="token punctuation">,</span> <span class="token keyword">float</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">float</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">float</span> arg1<span class="token punctuation">,</span> <span class="token keyword">float</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写c语言源码-1" tabindex="-1"><a class="header-anchor" href="#编写c语言源码-1" aria-hidden="true">#</a> 编写c语言源码</h3><ul><li>在项目目录下创建文件夹 <em>jni</em> （与 <em>src</em> 文件夹同级）。在 <em>jni</em> 文件夹内创建c语言源文件 <em>calcnative.c</em> 文件并编写ndk函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span>  <span class="token comment">// 导入jni接口头文件</span></span>

<span class="token comment">// 加法计算参数, 前两个参数固定， 后续为java层方法参数。函数名无需与java层一样。。</span>
jfloat <span class="token function">add_c</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> jfloat a<span class="token punctuation">,</span> jfloat b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

jfloat <span class="token function">sub_c</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> jfloat a<span class="token punctuation">,</span> jfloat b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

jfloat <span class="token function">mul_c</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> jfloat a<span class="token punctuation">,</span> jfloat b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

jfloat <span class="token function">div_c</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> jfloat a<span class="token punctuation">,</span> jfloat b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 动态注册JNINativeMethod结构体 - jni.h中的定义</span>
<span class="token comment">// typedef struct {</span>
<span class="token comment">//     const char* name;  // java方法名</span>
<span class="token comment">//     const char* signature;  // 参数签名</span>
<span class="token comment">//     void*       fnPtr;  // 函数指针fnPtr，指向c层的jni函数</span>
<span class="token comment">// } JNINativeMethod;</span>

<span class="token comment">// 绑定c层的jni函数与java层的native函数的数组</span>
<span class="token comment">// 通过jni.h中的结构体定义数组</span>
JNINativeMethod nativeMethod<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span>  <span class="token string">&quot;(FF)F&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>add_c<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;sub&quot;</span><span class="token punctuation">,</span>  <span class="token string">&quot;(FF)F&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>sub_c<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;mul&quot;</span><span class="token punctuation">,</span>  <span class="token string">&quot;(FF)F&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>mul_c<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>  <span class="token string">&quot;(FF)F&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>div_c<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 注册函数 - 自定义名称 - 使用RegisterNatives接口对函数进行注册</span>
<span class="token comment">// jint        (*RegisterNatives)(JNIEnv*, jclass, const JNINativeMethod*, jint);</span>
jint <span class="token function">registerNative</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    jclass j_class <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">FindClass</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;com/example/calc/MainActivity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 需要获取类、数组、元素个数, 返回值为注册结果</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">RegisterNatives</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> j_class<span class="token punctuation">,</span> nativeMethod<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>nativeMethod<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>nativeMethod<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> JNI_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> JNI_ERR<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> JNI_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 编写JNI_Onload进行动态注册，第二个参数为保留参数</span>
<span class="token comment">// **系统自动调用**, 需要返回版本号</span>
JNIEXPORT jint JNICALL <span class="token function">JNI_OnLoad</span><span class="token punctuation">(</span>JavaVM<span class="token operator">*</span> vm<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> reserved<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    JNIEnv<span class="token operator">*</span> env<span class="token punctuation">;</span>
    <span class="token comment">// 获取env用于注册</span>
    <span class="token comment">// jint        (*GetEnv)(JavaVM*, void**, jint);</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>vm<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">GetEnv</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>env<span class="token punctuation">,</span> JNI_VERSION<span class="token punctuation">)</span> <span class="token operator">!=</span> JNI_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取env失败</span>
        <span class="token keyword">return</span> JNI_ERR<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">registerNative</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">!=</span> JNI_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注册失败</span>
        <span class="token keyword">return</span> JNI_ERR<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 全部成功，返回版本号</span>
    <span class="token keyword">return</span> JNI_VERSION_1_4<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过cmake打包-1" tabindex="-1"><a class="header-anchor" href="#通过cmake打包-1" aria-hidden="true">#</a> 通过Cmake打包</h3><ul><li>在 <em>jni</em> 文件夹内编写android mk文件 <em>Android.mk</em></li></ul><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>LOCAL_PATH <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> my-dir<span class="token punctuation">)</span>
<span class="token keyword">include</span> <span class="token variable">$</span><span class="token punctuation">(</span>CLEAR_VARS<span class="token punctuation">)</span>
LOCAL_MODULE <span class="token operator">:=</span> calcnative  <span class="token comment"># 模块名</span>
LOCAL_SRC_FILES <span class="token operator">:=</span> calcnative.c  <span class="token comment"># 源文件 .c/.cpp</span>
LOCAL_ARM_MODE <span class="token operator">:=</span> arm  <span class="token comment"># 编译后的指令集 ARM指令集</span>
LOCAL_LDLIBS <span class="token operator">+=</span> -llog  <span class="token comment"># 依赖库</span>
<span class="token keyword">include</span> <span class="token variable">$</span><span class="token punctuation">(</span>BULID_SHARED_LIBRARY<span class="token punctuation">)</span>  <span class="token comment"># 指定编译文件的类型</span>
<span class="token comment"># 编译可执行文件 $(BULID_EXECUTABLE)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 <em>jni</em> 文件夹内编写android mk文件 <em>Application.mk</em></li></ul><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>APP_API <span class="token operator">:=</span> armeabi-v7a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在 <em>jni</em> 文件夹执行命令<code>ndk-build</code>，在项目目录下生成<code>libs/arm/libcalcnative.so</code></li></ul><h3 id="在java层声明so文件-1" tabindex="-1"><a class="header-anchor" href="#在java层声明so文件-1" aria-hidden="true">#</a> 在java层声明so文件</h3><p>将android mk文件中的模块名称作为导入名 (so文件去头去尾：libJNI_study.so -&gt; JNI_study) 进行导入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>calc</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
    <span class="token comment">// 声明导入的模块</span>
    <span class="token keyword">static</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;calcnative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态注册与动态注册的优缺点" tabindex="-1"><a class="header-anchor" href="#静态注册与动态注册的优缺点" aria-hidden="true">#</a> 静态注册与动态注册的优缺点</h2><h3 id="静态注册缺点" tabindex="-1"><a class="header-anchor" href="#静态注册缺点" aria-hidden="true">#</a> 静态注册缺点</h3><ul><li>编写不方便，jni方法名必须遵守规则且长度无法控制</li><li>过程较多</li><li>运行效率不高，不安全。</li></ul><h3 id="动态注册优点" tabindex="-1"><a class="header-anchor" href="#动态注册优点" aria-hidden="true">#</a> 动态注册优点</h3><ul><li>流程清晰，过程可控</li><li>运行效率高</li></ul>`,56),c=[e];function o(i,l){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","007.html.vue"]]);export{k as default};
