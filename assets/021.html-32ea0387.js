const e=JSON.parse('{"key":"v-ea0f38a2","path":"/detail/021.html","title":"JS AST 与 Babel","lang":"zh-CN","frontmatter":{"layout":"Detail","title":"JS AST 与 Babel","date":"2025-03-15T00:00:00.000Z","discription":"JS代码的 AST 结构 及 Babel api 操作 AST 的基本了解","category":["Spider"],"tags":["Spider","Reverse"],"description":"AST，全称抽象语法树（Abstract syntax tree） 环境的安装 npm install @babel/core 在编译原理中，从源码到机器码的过程，中间还需要进过很多步骤。 比如，源码通过词法分析器变为记号序列，再通过语法分析器变为AST，再通过语义分析器，一步步往下编译，最后变成机器码 可以简单理解为将 js 代码，按照规则，解析成一份json数据，通过此json，按照规则，可以还原出 js 代码。此时可以修改 json 中的结构，来解析出新的 js 代码","head":[["meta",{"property":"og:url","content":"https://saynop.github.io/detail/021.html"}],["meta",{"property":"og:title","content":"JS AST 与 Babel"}],["meta",{"property":"og:description","content":"AST，全称抽象语法树（Abstract syntax tree） 环境的安装 npm install @babel/core 在编译原理中，从源码到机器码的过程，中间还需要进过很多步骤。 比如，源码通过词法分析器变为记号序列，再通过语法分析器变为AST，再通过语义分析器，一步步往下编译，最后变成机器码 可以简单理解为将 js 代码，按照规则，解析成一份json数据，通过此json，按照规则，可以还原出 js 代码。此时可以修改 json 中的结构，来解析出新的 js 代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Spider"}],["meta",{"property":"article:tag","content":"Reverse"}],["meta",{"property":"article:published_time","content":"2025-03-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JS AST 与 Babel\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"了解AST结构","slug":"了解ast结构","link":"#了解ast结构","children":[]},{"level":2,"title":"babel api 简介","slug":"babel-api-简介","link":"#babel-api-简介","children":[{"level":3,"title":"常用代码结构","slug":"常用代码结构","link":"#常用代码结构","children":[{"level":4,"title":"parser","slug":"parser","link":"#parser","children":[]}]},{"level":3,"title":"generator","slug":"generator","link":"#generator","children":[]},{"level":3,"title":"traverse","slug":"traverse","link":"#traverse","children":[]},{"level":3,"title":"types","slug":"types","link":"#types","children":[]},{"level":3,"title":"Path","slug":"path","link":"#path","children":[]},{"level":3,"title":"scope","slug":"scope","link":"#scope","children":[]}]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"detail/021.md","excerpt":"<p>AST，全称抽象语法树（Abstract syntax tree）</p>\\n<p>环境的安装 <code>npm install @babel/core</code></p>\\n<blockquote>\\n<p>在编译原理中，从源码到机器码的过程，中间还需要进过很多步骤。</p>\\n<p>比如，源码通过词法分析器变为记号序列，再通过语法分析器变为AST，再通过语义分析器，一步步往下编译，最后变成机器码</p>\\n</blockquote>\\n<p>可以简单理解为将 js 代码，按照规则，解析成一份json数据，通过此json，按照规则，可以还原出 js 代码。此时可以修改 json 中的结构，来解析出新的 js 代码</p>","autoDesc":true}');export{e as data};
